
STM32F4_Discovery_FreeRTOS_Simple_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005284  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08005414  08005414  00015414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08005418  08005418  00015418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  20000000  0800541c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
  6 .bss          0000cad8  2000007c  2000007c  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000cb54  2000cb54  0002007c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000fb8b  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000282c  00000000  00000000  0002fc35  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b10  00000000  00000000  00032468  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009e0  00000000  00000000  00032f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005d29  00000000  00000000  00033958  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004138  00000000  00000000  00039681  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003d7b9  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003160  00000000  00000000  0003d838  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080053fc 	.word	0x080053fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080053fc 	.word	0x080053fc

080001d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f103 0208 	add.w	r2, r3, #8
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f04f 32ff 	mov.w	r2, #4294967295
 80001e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f103 0208 	add.w	r2, r3, #8
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f103 0208 	add.w	r2, r3, #8
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2200      	movs	r2, #0
 800021c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr

0800022a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800022a:	b480      	push	{r7}
 800022c:	b085      	sub	sp, #20
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
 8000232:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	68fa      	ldr	r2, [r7, #12]
 800023e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	689a      	ldr	r2, [r3, #8]
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	683a      	ldr	r2, [r7, #0]
 800024e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	1c5a      	adds	r2, r3, #1
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	3714      	adds	r7, #20
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000288:	d103      	bne.n	8000292 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	691b      	ldr	r3, [r3, #16]
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	e00c      	b.n	80002ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3308      	adds	r3, #8
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	e002      	b.n	80002a0 <vListInsert+0x2e>
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d9f6      	bls.n	800029a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	685a      	ldr	r2, [r3, #4]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	683a      	ldr	r2, [r7, #0]
 80002ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	601a      	str	r2, [r3, #0]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	6892      	ldr	r2, [r2, #8]
 80002fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	6852      	ldr	r2, [r2, #4]
 8000304:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	685a      	ldr	r2, [r3, #4]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	d103      	bne.n	8000318 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	689a      	ldr	r2, [r3, #8]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	1e5a      	subs	r2, r3, #1
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	3b04      	subs	r3, #4
 8000348:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	3b04      	subs	r3, #4
 8000356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	f023 0201 	bic.w	r2, r3, #1
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3b04      	subs	r3, #4
 8000366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <pxPortInitialiseStack+0x64>)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	3b14      	subs	r3, #20
 8000372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	3b04      	subs	r3, #4
 800037e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f06f 0202 	mvn.w	r2, #2
 8000386:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	3b20      	subs	r3, #32
 800038c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800038e:	68fb      	ldr	r3, [r7, #12]
}
 8000390:	4618      	mov	r0, r3
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	080003a1 	.word	0x080003a1

080003a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <prvTaskExitError+0x38>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003ae:	d009      	beq.n	80003c4 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80003b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003b4:	f383 8811 	msr	BASEPRI, r3
 80003b8:	f3bf 8f6f 	isb	sy
 80003bc:	f3bf 8f4f 	dsb	sy
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	e7fe      	b.n	80003c2 <prvTaskExitError+0x22>
 80003c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003c8:	f383 8811 	msr	BASEPRI, r3
 80003cc:	f3bf 8f6f 	isb	sy
 80003d0:	f3bf 8f4f 	dsb	sy
 80003d4:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80003d6:	e7fe      	b.n	80003d6 <prvTaskExitError+0x36>
 80003d8:	20000000 	.word	0x20000000
 80003dc:	00000000 	.word	0x00000000

080003e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <pxCurrentTCBConst2>)
 80003e2:	6819      	ldr	r1, [r3, #0]
 80003e4:	6808      	ldr	r0, [r1, #0]
 80003e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003ea:	f380 8809 	msr	PSP, r0
 80003ee:	f3bf 8f6f 	isb	sy
 80003f2:	f04f 0000 	mov.w	r0, #0
 80003f6:	f380 8811 	msr	BASEPRI, r0
 80003fa:	4770      	bx	lr
 80003fc:	f3af 8000 	nop.w

08000400 <pxCurrentTCBConst2>:
 8000400:	2000c8b8 	.word	0x2000c8b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop

08000408 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000408:	4806      	ldr	r0, [pc, #24]	; (8000424 <prvPortStartFirstTask+0x1c>)
 800040a:	6800      	ldr	r0, [r0, #0]
 800040c:	6800      	ldr	r0, [r0, #0]
 800040e:	f380 8808 	msr	MSP, r0
 8000412:	b662      	cpsie	i
 8000414:	b661      	cpsie	f
 8000416:	f3bf 8f4f 	dsb	sy
 800041a:	f3bf 8f6f 	isb	sy
 800041e:	df00      	svc	0
 8000420:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000422:	bf00      	nop
 8000424:	e000ed08 	.word	0xe000ed08

08000428 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800042e:	4b3b      	ldr	r3, [pc, #236]	; (800051c <xPortStartScheduler+0xf4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a3b      	ldr	r2, [pc, #236]	; (8000520 <xPortStartScheduler+0xf8>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d109      	bne.n	800044c <xPortStartScheduler+0x24>
 8000438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800043c:	f383 8811 	msr	BASEPRI, r3
 8000440:	f3bf 8f6f 	isb	sy
 8000444:	f3bf 8f4f 	dsb	sy
 8000448:	613b      	str	r3, [r7, #16]
 800044a:	e7fe      	b.n	800044a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800044c:	4b33      	ldr	r3, [pc, #204]	; (800051c <xPortStartScheduler+0xf4>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a34      	ldr	r2, [pc, #208]	; (8000524 <xPortStartScheduler+0xfc>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d109      	bne.n	800046a <xPortStartScheduler+0x42>
 8000456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800045a:	f383 8811 	msr	BASEPRI, r3
 800045e:	f3bf 8f6f 	isb	sy
 8000462:	f3bf 8f4f 	dsb	sy
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	e7fe      	b.n	8000468 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800046a:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <xPortStartScheduler+0x100>)
 800046c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	22ff      	movs	r2, #255	; 0xff
 800047a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b27      	ldr	r3, [pc, #156]	; (800052c <xPortStartScheduler+0x104>)
 8000490:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000492:	4b27      	ldr	r3, [pc, #156]	; (8000530 <xPortStartScheduler+0x108>)
 8000494:	2207      	movs	r2, #7
 8000496:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000498:	e009      	b.n	80004ae <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800049a:	4b25      	ldr	r3, [pc, #148]	; (8000530 <xPortStartScheduler+0x108>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3b01      	subs	r3, #1
 80004a0:	4a23      	ldr	r2, [pc, #140]	; (8000530 <xPortStartScheduler+0x108>)
 80004a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004b6:	2b80      	cmp	r3, #128	; 0x80
 80004b8:	d0ef      	beq.n	800049a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80004ba:	4b1d      	ldr	r3, [pc, #116]	; (8000530 <xPortStartScheduler+0x108>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	021b      	lsls	r3, r3, #8
 80004c0:	4a1b      	ldr	r2, [pc, #108]	; (8000530 <xPortStartScheduler+0x108>)
 80004c2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80004c4:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <xPortStartScheduler+0x108>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80004cc:	4a18      	ldr	r2, [pc, #96]	; (8000530 <xPortStartScheduler+0x108>)
 80004ce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80004d8:	4a16      	ldr	r2, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80004e4:	4a13      	ldr	r2, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80004ee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80004f0:	f000 f8d2 	bl	8000698 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80004f4:	4b10      	ldr	r3, [pc, #64]	; (8000538 <xPortStartScheduler+0x110>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80004fa:	f000 f8e9 	bl	80006d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80004fe:	4a0f      	ldr	r2, [pc, #60]	; (800053c <xPortStartScheduler+0x114>)
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <xPortStartScheduler+0x114>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000508:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800050a:	f7ff ff7d 	bl	8000408 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800050e:	f7ff ff47 	bl	80003a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000512:	2300      	movs	r3, #0
}
 8000514:	4618      	mov	r0, r3
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	e000ed00 	.word	0xe000ed00
 8000520:	410fc271 	.word	0x410fc271
 8000524:	410fc270 	.word	0x410fc270
 8000528:	e000e400 	.word	0xe000e400
 800052c:	20000098 	.word	0x20000098
 8000530:	2000009c 	.word	0x2000009c
 8000534:	e000ed20 	.word	0xe000ed20
 8000538:	20000000 	.word	0x20000000
 800053c:	e000ef34 	.word	0xe000ef34

08000540 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800054a:	f383 8811 	msr	BASEPRI, r3
 800054e:	f3bf 8f6f 	isb	sy
 8000552:	f3bf 8f4f 	dsb	sy
 8000556:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <vPortEnterCritical+0x54>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <vPortEnterCritical+0x54>)
 8000560:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <vPortEnterCritical+0x54>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d10e      	bne.n	8000588 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <vPortEnterCritical+0x58>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d009      	beq.n	8000588 <vPortEnterCritical+0x48>
 8000574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000578:	f383 8811 	msr	BASEPRI, r3
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	e7fe      	b.n	8000586 <vPortEnterCritical+0x46>
	}
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	20000000 	.word	0x20000000
 8000598:	e000ed04 	.word	0xe000ed04

0800059c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <vPortExitCritical+0x4c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d109      	bne.n	80005be <vPortExitCritical+0x22>
 80005aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ae:	f383 8811 	msr	BASEPRI, r3
 80005b2:	f3bf 8f6f 	isb	sy
 80005b6:	f3bf 8f4f 	dsb	sy
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	e7fe      	b.n	80005bc <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <vPortExitCritical+0x4c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d104      	bne.n	80005da <vPortExitCritical+0x3e>
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000000 	.word	0x20000000
 80005ec:	00000000 	.word	0x00000000

080005f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80005f0:	f3ef 8009 	mrs	r0, PSP
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <pxCurrentTCBConst>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	f01e 0f10 	tst.w	lr, #16
 8000600:	bf08      	it	eq
 8000602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800060a:	6010      	str	r0, [r2, #0]
 800060c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8000610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000614:	f380 8811 	msr	BASEPRI, r0
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f001 fcec 	bl	8001ffc <vTaskSwitchContext>
 8000624:	f04f 0000 	mov.w	r0, #0
 8000628:	f380 8811 	msr	BASEPRI, r0
 800062c:	bc08      	pop	{r3}
 800062e:	6819      	ldr	r1, [r3, #0]
 8000630:	6808      	ldr	r0, [r1, #0]
 8000632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000636:	f01e 0f10 	tst.w	lr, #16
 800063a:	bf08      	it	eq
 800063c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000640:	f380 8809 	msr	PSP, r0
 8000644:	f3bf 8f6f 	isb	sy
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	f3af 8000 	nop.w

08000650 <pxCurrentTCBConst>:
 8000650:	2000c8b8 	.word	0x2000c8b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop

08000658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	__asm volatile
 800065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000662:	f383 8811 	msr	BASEPRI, r3
 8000666:	f3bf 8f6f 	isb	sy
 800066a:	f3bf 8f4f 	dsb	sy
 800066e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000670:	f001 fc08 	bl	8001e84 <xTaskIncrementTick>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d003      	beq.n	8000682 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <SysTick_Handler+0x3c>)
 800067c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	e000ed04 	.word	0xe000ed04

08000698 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800069c:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <vPortSetupTimerInterrupt+0x28>)
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <vPortSetupTimerInterrupt+0x2c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4909      	ldr	r1, [pc, #36]	; (80006c8 <vPortSetupTimerInterrupt+0x30>)
 80006a4:	fba1 1303 	umull	r1, r3, r1, r3
 80006a8:	099b      	lsrs	r3, r3, #6
 80006aa:	3b01      	subs	r3, #1
 80006ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <vPortSetupTimerInterrupt+0x34>)
 80006b0:	2207      	movs	r2, #7
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000e014 	.word	0xe000e014
 80006c4:	20000014 	.word	0x20000014
 80006c8:	10624dd3 	.word	0x10624dd3
 80006cc:	e000e010 	.word	0xe000e010

080006d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80006d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80006e0 <vPortEnableVFP+0x10>
 80006d4:	6801      	ldr	r1, [r0, #0]
 80006d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006da:	6001      	str	r1, [r0, #0]
 80006dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80006de:	bf00      	nop
 80006e0:	e000ed88 	.word	0xe000ed88

080006e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80006ea:	f3ef 8305 	mrs	r3, IPSR
 80006ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b0f      	cmp	r3, #15
 80006f4:	d913      	bls.n	800071e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80006f6:	4a16      	ldr	r2, [pc, #88]	; (8000750 <vPortValidateInterruptPriority+0x6c>)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <vPortValidateInterruptPriority+0x70>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	7afa      	ldrb	r2, [r7, #11]
 8000706:	429a      	cmp	r2, r3
 8000708:	d209      	bcs.n	800071e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800070a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070e:	f383 8811 	msr	BASEPRI, r3
 8000712:	f3bf 8f6f 	isb	sy
 8000716:	f3bf 8f4f 	dsb	sy
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	e7fe      	b.n	800071c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <vPortValidateInterruptPriority+0x74>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <vPortValidateInterruptPriority+0x78>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	429a      	cmp	r2, r3
 800072c:	d909      	bls.n	8000742 <vPortValidateInterruptPriority+0x5e>
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	f383 8811 	msr	BASEPRI, r3
 8000736:	f3bf 8f6f 	isb	sy
 800073a:	f3bf 8f4f 	dsb	sy
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	e7fe      	b.n	8000740 <vPortValidateInterruptPriority+0x5c>
	}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e3f0 	.word	0xe000e3f0
 8000754:	20000098 	.word	0x20000098
 8000758:	e000ed0c 	.word	0xe000ed0c
 800075c:	2000009c 	.word	0x2000009c

08000760 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800076c:	f001 fad0 	bl	8001d10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000770:	4b59      	ldr	r3, [pc, #356]	; (80008d8 <pvPortMalloc+0x178>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d101      	bne.n	800077c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8000778:	f000 f91c 	bl	80009b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800077c:	4b57      	ldr	r3, [pc, #348]	; (80008dc <pvPortMalloc+0x17c>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4013      	ands	r3, r2
 8000784:	2b00      	cmp	r3, #0
 8000786:	f040 808c 	bne.w	80008a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d01c      	beq.n	80007ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8000790:	2208      	movs	r2, #8
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d013      	beq.n	80007ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f023 0307 	bic.w	r3, r3, #7
 80007a8:	3308      	adds	r3, #8
 80007aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d009      	beq.n	80007ca <pvPortMalloc+0x6a>
 80007b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007ba:	f383 8811 	msr	BASEPRI, r3
 80007be:	f3bf 8f6f 	isb	sy
 80007c2:	f3bf 8f4f 	dsb	sy
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e7fe      	b.n	80007c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d068      	beq.n	80008a2 <pvPortMalloc+0x142>
 80007d0:	4b43      	ldr	r3, [pc, #268]	; (80008e0 <pvPortMalloc+0x180>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d863      	bhi.n	80008a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80007da:	4b42      	ldr	r3, [pc, #264]	; (80008e4 <pvPortMalloc+0x184>)
 80007dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80007de:	4b41      	ldr	r3, [pc, #260]	; (80008e4 <pvPortMalloc+0x184>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007e4:	e004      	b.n	80007f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80007e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d203      	bcs.n	8000802 <pvPortMalloc+0xa2>
 80007fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1f1      	bne.n	80007e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000802:	4b35      	ldr	r3, [pc, #212]	; (80008d8 <pvPortMalloc+0x178>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000808:	429a      	cmp	r2, r3
 800080a:	d04a      	beq.n	80008a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800080c:	6a3b      	ldr	r3, [r7, #32]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2208      	movs	r2, #8
 8000812:	4413      	add	r3, r2
 8000814:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	6a3b      	ldr	r3, [r7, #32]
 800081c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000820:	685a      	ldr	r2, [r3, #4]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	1ad2      	subs	r2, r2, r3
 8000826:	2308      	movs	r3, #8
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	429a      	cmp	r2, r3
 800082c:	d91e      	bls.n	800086c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800082e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4413      	add	r3, r2
 8000834:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000836:	69bb      	ldr	r3, [r7, #24]
 8000838:	f003 0307 	and.w	r3, r3, #7
 800083c:	2b00      	cmp	r3, #0
 800083e:	d009      	beq.n	8000854 <pvPortMalloc+0xf4>
 8000840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000844:	f383 8811 	msr	BASEPRI, r3
 8000848:	f3bf 8f6f 	isb	sy
 800084c:	f3bf 8f4f 	dsb	sy
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	e7fe      	b.n	8000852 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000856:	685a      	ldr	r2, [r3, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	1ad2      	subs	r2, r2, r3
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000866:	69b8      	ldr	r0, [r7, #24]
 8000868:	f000 f906 	bl	8000a78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800086c:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <pvPortMalloc+0x180>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	4a1a      	ldr	r2, [pc, #104]	; (80008e0 <pvPortMalloc+0x180>)
 8000878:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <pvPortMalloc+0x180>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <pvPortMalloc+0x188>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	429a      	cmp	r2, r3
 8000884:	d203      	bcs.n	800088e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <pvPortMalloc+0x180>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <pvPortMalloc+0x188>)
 800088c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	4b12      	ldr	r3, [pc, #72]	; (80008dc <pvPortMalloc+0x17c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	431a      	orrs	r2, r3
 8000898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800089c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80008a2:	f001 fa43 	bl	8001d2c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d101      	bne.n	80008b0 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80008ac:	f003 fad6 	bl	8003e5c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d009      	beq.n	80008ce <pvPortMalloc+0x16e>
 80008ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008be:	f383 8811 	msr	BASEPRI, r3
 80008c2:	f3bf 8f6f 	isb	sy
 80008c6:	f3bf 8f4f 	dsb	sy
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	e7fe      	b.n	80008cc <pvPortMalloc+0x16c>
	return pvReturn;
 80008ce:	69fb      	ldr	r3, [r7, #28]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2000c8a8 	.word	0x2000c8a8
 80008dc:	2000c8b4 	.word	0x2000c8b4
 80008e0:	2000c8ac 	.word	0x2000c8ac
 80008e4:	2000c8a0 	.word	0x2000c8a0
 80008e8:	2000c8b0 	.word	0x2000c8b0

080008ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d046      	beq.n	800098c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80008fe:	2308      	movs	r3, #8
 8000900:	425b      	negs	r3, r3
 8000902:	697a      	ldr	r2, [r7, #20]
 8000904:	4413      	add	r3, r2
 8000906:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	685a      	ldr	r2, [r3, #4]
 8000910:	4b20      	ldr	r3, [pc, #128]	; (8000994 <vPortFree+0xa8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4013      	ands	r3, r2
 8000916:	2b00      	cmp	r3, #0
 8000918:	d109      	bne.n	800092e <vPortFree+0x42>
 800091a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800091e:	f383 8811 	msr	BASEPRI, r3
 8000922:	f3bf 8f6f 	isb	sy
 8000926:	f3bf 8f4f 	dsb	sy
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	e7fe      	b.n	800092c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d009      	beq.n	800094a <vPortFree+0x5e>
 8000936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800093a:	f383 8811 	msr	BASEPRI, r3
 800093e:	f3bf 8f6f 	isb	sy
 8000942:	f3bf 8f4f 	dsb	sy
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	e7fe      	b.n	8000948 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	685a      	ldr	r2, [r3, #4]
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <vPortFree+0xa8>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4013      	ands	r3, r2
 8000954:	2b00      	cmp	r3, #0
 8000956:	d019      	beq.n	800098c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d115      	bne.n	800098c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	685a      	ldr	r2, [r3, #4]
 8000964:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <vPortFree+0xa8>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	43db      	mvns	r3, r3
 800096a:	401a      	ands	r2, r3
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000970:	f001 f9ce 	bl	8001d10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	685a      	ldr	r2, [r3, #4]
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <vPortFree+0xac>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4413      	add	r3, r2
 800097e:	4a06      	ldr	r2, [pc, #24]	; (8000998 <vPortFree+0xac>)
 8000980:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000982:	6938      	ldr	r0, [r7, #16]
 8000984:	f000 f878 	bl	8000a78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000988:	f001 f9d0 	bl	8001d2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800098c:	bf00      	nop
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2000c8b4 	.word	0x2000c8b4
 8000998:	2000c8ac 	.word	0x2000c8ac

0800099c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <xPortGetFreeHeapSize+0x14>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	2000c8ac 	.word	0x2000c8ac

080009b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80009ba:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 80009be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009c0:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <prvHeapInit+0xac>)
 80009c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d00c      	beq.n	80009e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	3307      	adds	r3, #7
 80009d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f023 0307 	bic.w	r3, r3, #7
 80009da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80009dc:	68ba      	ldr	r2, [r7, #8]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	4a1f      	ldr	r2, [pc, #124]	; (8000a60 <prvHeapInit+0xac>)
 80009e4:	4413      	add	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009ec:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <prvHeapInit+0xb0>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <prvHeapInit+0xb0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	4413      	add	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a00:	2208      	movs	r2, #8
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	1a9b      	subs	r3, r3, r2
 8000a06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f023 0307 	bic.w	r3, r3, #7
 8000a0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4a15      	ldr	r2, [pc, #84]	; (8000a68 <prvHeapInit+0xb4>)
 8000a14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <prvHeapInit+0xb4>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <prvHeapInit+0xb4>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	68fa      	ldr	r2, [r7, #12]
 8000a2e:	1ad2      	subs	r2, r2, r3
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <prvHeapInit+0xb4>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <prvHeapInit+0xb8>)
 8000a42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	4a09      	ldr	r2, [pc, #36]	; (8000a70 <prvHeapInit+0xbc>)
 8000a4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <prvHeapInit+0xc0>)
 8000a4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a52:	601a      	str	r2, [r3, #0]
}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	200000a0 	.word	0x200000a0
 8000a64:	2000c8a0 	.word	0x2000c8a0
 8000a68:	2000c8a8 	.word	0x2000c8a8
 8000a6c:	2000c8b0 	.word	0x2000c8b0
 8000a70:	2000c8ac 	.word	0x2000c8ac
 8000a74:	2000c8b4 	.word	0x2000c8b4

08000a78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a80:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <prvInsertBlockIntoFreeList+0xac>)
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	e002      	b.n	8000a8c <prvInsertBlockIntoFreeList+0x14>
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d3f7      	bcc.n	8000a86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	441a      	add	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d108      	bne.n	8000aba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	685a      	ldr	r2, [r3, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	441a      	add	r2, r3
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	441a      	add	r2, r3
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d118      	bne.n	8000b00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <prvInsertBlockIntoFreeList+0xb0>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d00d      	beq.n	8000af6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	441a      	add	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	e008      	b.n	8000b08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <prvInsertBlockIntoFreeList+0xb0>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	e003      	b.n	8000b08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d002      	beq.n	8000b16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	2000c8a0 	.word	0x2000c8a0
 8000b28:	2000c8a8 	.word	0x2000c8a8

08000b2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d109      	bne.n	8000b54 <xQueueGenericReset+0x28>
 8000b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b44:	f383 8811 	msr	BASEPRI, r3
 8000b48:	f3bf 8f6f 	isb	sy
 8000b4c:	f3bf 8f4f 	dsb	sy
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	e7fe      	b.n	8000b52 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000b54:	f7ff fcf4 	bl	8000540 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b60:	68f9      	ldr	r1, [r7, #12]
 8000b62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b64:	fb01 f303 	mul.w	r3, r1, r3
 8000b68:	441a      	add	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	2200      	movs	r2, #0
 8000b72:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b84:	3b01      	subs	r3, #1
 8000b86:	68f9      	ldr	r1, [r7, #12]
 8000b88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b8a:	fb01 f303 	mul.w	r3, r1, r3
 8000b8e:	441a      	add	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	22ff      	movs	r2, #255	; 0xff
 8000b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	22ff      	movs	r2, #255	; 0xff
 8000ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d114      	bne.n	8000bd4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	691b      	ldr	r3, [r3, #16]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d01a      	beq.n	8000be8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	3310      	adds	r3, #16
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 faee 	bl	8002198 <xTaskRemoveFromEventList>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d012      	beq.n	8000be8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <xQueueGenericReset+0xcc>)
 8000bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	f3bf 8f4f 	dsb	sy
 8000bce:	f3bf 8f6f 	isb	sy
 8000bd2:	e009      	b.n	8000be8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3310      	adds	r3, #16
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff faf9 	bl	80001d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	3324      	adds	r3, #36	; 0x24
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff faf4 	bl	80001d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000be8:	f7ff fcd8 	bl	800059c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000bec:	2301      	movs	r3, #1
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	e000ed04 	.word	0xe000ed04

08000bfc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af02      	add	r7, sp, #8
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	4613      	mov	r3, r2
 8000c08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d109      	bne.n	8000c24 <xQueueGenericCreate+0x28>
 8000c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c14:	f383 8811 	msr	BASEPRI, r3
 8000c18:	f3bf 8f6f 	isb	sy
 8000c1c:	f3bf 8f4f 	dsb	sy
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	e7fe      	b.n	8000c22 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d102      	bne.n	8000c30 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	e004      	b.n	8000c3a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	fb02 f303 	mul.w	r3, r2, r3
 8000c38:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3348      	adds	r3, #72	; 0x48
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fd8e 	bl	8000760 <pvPortMalloc>
 8000c44:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d00b      	beq.n	8000c64 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	3348      	adds	r3, #72	; 0x48
 8000c50:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000c52:	79fa      	ldrb	r2, [r7, #7]
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	68f8      	ldr	r0, [r7, #12]
 8000c60:	f000 f805 	bl	8000c6e <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8000c64:	69bb      	ldr	r3, [r7, #24]
	}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3720      	adds	r7, #32
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b084      	sub	sp, #16
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	60f8      	str	r0, [r7, #12]
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
 8000c7a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d103      	bne.n	8000c8a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	e002      	b.n	8000c90 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	69b8      	ldr	r0, [r7, #24]
 8000ca0:	f7ff ff44 	bl	8000b2c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000ca4:	bf00      	nop
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08e      	sub	sp, #56	; 0x38
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
 8000cb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d109      	bne.n	8000cdc <xQueueGenericSend+0x30>
 8000cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ccc:	f383 8811 	msr	BASEPRI, r3
 8000cd0:	f3bf 8f6f 	isb	sy
 8000cd4:	f3bf 8f4f 	dsb	sy
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cda:	e7fe      	b.n	8000cda <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d103      	bne.n	8000cea <xQueueGenericSend+0x3e>
 8000ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <xQueueGenericSend+0x42>
 8000cea:	2301      	movs	r3, #1
 8000cec:	e000      	b.n	8000cf0 <xQueueGenericSend+0x44>
 8000cee:	2300      	movs	r3, #0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d109      	bne.n	8000d08 <xQueueGenericSend+0x5c>
 8000cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cf8:	f383 8811 	msr	BASEPRI, r3
 8000cfc:	f3bf 8f6f 	isb	sy
 8000d00:	f3bf 8f4f 	dsb	sy
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
 8000d06:	e7fe      	b.n	8000d06 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d103      	bne.n	8000d16 <xQueueGenericSend+0x6a>
 8000d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d101      	bne.n	8000d1a <xQueueGenericSend+0x6e>
 8000d16:	2301      	movs	r3, #1
 8000d18:	e000      	b.n	8000d1c <xQueueGenericSend+0x70>
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d109      	bne.n	8000d34 <xQueueGenericSend+0x88>
 8000d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d24:	f383 8811 	msr	BASEPRI, r3
 8000d28:	f3bf 8f6f 	isb	sy
 8000d2c:	f3bf 8f4f 	dsb	sy
 8000d30:	623b      	str	r3, [r7, #32]
 8000d32:	e7fe      	b.n	8000d32 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d34:	f001 fbec 	bl	8002510 <xTaskGetSchedulerState>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d102      	bne.n	8000d44 <xQueueGenericSend+0x98>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d101      	bne.n	8000d48 <xQueueGenericSend+0x9c>
 8000d44:	2301      	movs	r3, #1
 8000d46:	e000      	b.n	8000d4a <xQueueGenericSend+0x9e>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d109      	bne.n	8000d62 <xQueueGenericSend+0xb6>
 8000d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d52:	f383 8811 	msr	BASEPRI, r3
 8000d56:	f3bf 8f6f 	isb	sy
 8000d5a:	f3bf 8f4f 	dsb	sy
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	e7fe      	b.n	8000d60 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000d62:	f7ff fbed 	bl	8000540 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d302      	bcc.n	8000d78 <xQueueGenericSend+0xcc>
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d129      	bne.n	8000dcc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000d78:	683a      	ldr	r2, [r7, #0]
 8000d7a:	68b9      	ldr	r1, [r7, #8]
 8000d7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d7e:	f000 fa35 	bl	80011ec <prvCopyDataToQueue>
 8000d82:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d010      	beq.n	8000dae <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d8e:	3324      	adds	r3, #36	; 0x24
 8000d90:	4618      	mov	r0, r3
 8000d92:	f001 fa01 	bl	8002198 <xTaskRemoveFromEventList>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d013      	beq.n	8000dc4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000d9c:	4b3f      	ldr	r3, [pc, #252]	; (8000e9c <xQueueGenericSend+0x1f0>)
 8000d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	f3bf 8f4f 	dsb	sy
 8000da8:	f3bf 8f6f 	isb	sy
 8000dac:	e00a      	b.n	8000dc4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d007      	beq.n	8000dc4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000db4:	4b39      	ldr	r3, [pc, #228]	; (8000e9c <xQueueGenericSend+0x1f0>)
 8000db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	f3bf 8f4f 	dsb	sy
 8000dc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000dc4:	f7ff fbea 	bl	800059c <vPortExitCritical>
				return pdPASS;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e063      	b.n	8000e94 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d103      	bne.n	8000dda <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000dd2:	f7ff fbe3 	bl	800059c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e05c      	b.n	8000e94 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d106      	bne.n	8000dee <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4618      	mov	r0, r3
 8000de6:	f001 fa39 	bl	800225c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000dea:	2301      	movs	r3, #1
 8000dec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000dee:	f7ff fbd5 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000df2:	f000 ff8d 	bl	8001d10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000df6:	f7ff fba3 	bl	8000540 <vPortEnterCritical>
 8000dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e06:	d103      	bne.n	8000e10 <xQueueGenericSend+0x164>
 8000e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e1c:	d103      	bne.n	8000e26 <xQueueGenericSend+0x17a>
 8000e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e26:	f7ff fbb9 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e2a:	1d3a      	adds	r2, r7, #4
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 fa36 	bl	80022a4 <xTaskCheckForTimeOut>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d124      	bne.n	8000e88 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000e3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e40:	f000 facc 	bl	80013dc <prvIsQueueFull>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d018      	beq.n	8000e7c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e4c:	3310      	adds	r3, #16
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f001 f952 	bl	80020fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e5a:	f000 fa57 	bl	800130c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000e5e:	f000 ff65 	bl	8001d2c <xTaskResumeAll>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f47f af7c 	bne.w	8000d62 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <xQueueGenericSend+0x1f0>)
 8000e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	f3bf 8f4f 	dsb	sy
 8000e76:	f3bf 8f6f 	isb	sy
 8000e7a:	e772      	b.n	8000d62 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e7e:	f000 fa45 	bl	800130c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000e82:	f000 ff53 	bl	8001d2c <xTaskResumeAll>
 8000e86:	e76c      	b.n	8000d62 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e8a:	f000 fa3f 	bl	800130c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000e8e:	f000 ff4d 	bl	8001d2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000e92:	2300      	movs	r3, #0
		}
	}
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3738      	adds	r7, #56	; 0x38
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	e000ed04 	.word	0xe000ed04

08000ea0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08e      	sub	sp, #56	; 0x38
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d109      	bne.n	8000ecc <xQueueGenericSendFromISR+0x2c>
 8000eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ebc:	f383 8811 	msr	BASEPRI, r3
 8000ec0:	f3bf 8f6f 	isb	sy
 8000ec4:	f3bf 8f4f 	dsb	sy
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eca:	e7fe      	b.n	8000eca <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d103      	bne.n	8000eda <xQueueGenericSendFromISR+0x3a>
 8000ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <xQueueGenericSendFromISR+0x3e>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <xQueueGenericSendFromISR+0x40>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d109      	bne.n	8000ef8 <xQueueGenericSendFromISR+0x58>
 8000ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ee8:	f383 8811 	msr	BASEPRI, r3
 8000eec:	f3bf 8f6f 	isb	sy
 8000ef0:	f3bf 8f4f 	dsb	sy
 8000ef4:	623b      	str	r3, [r7, #32]
 8000ef6:	e7fe      	b.n	8000ef6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d103      	bne.n	8000f06 <xQueueGenericSendFromISR+0x66>
 8000efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d101      	bne.n	8000f0a <xQueueGenericSendFromISR+0x6a>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <xQueueGenericSendFromISR+0x6c>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d109      	bne.n	8000f24 <xQueueGenericSendFromISR+0x84>
 8000f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f14:	f383 8811 	msr	BASEPRI, r3
 8000f18:	f3bf 8f6f 	isb	sy
 8000f1c:	f3bf 8f4f 	dsb	sy
 8000f20:	61fb      	str	r3, [r7, #28]
 8000f22:	e7fe      	b.n	8000f22 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000f24:	f7ff fbde 	bl	80006e4 <vPortValidateInterruptPriority>
	__asm volatile
 8000f28:	f3ef 8211 	mrs	r2, BASEPRI
 8000f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f30:	f383 8811 	msr	BASEPRI, r3
 8000f34:	f3bf 8f6f 	isb	sy
 8000f38:	f3bf 8f4f 	dsb	sy
 8000f3c:	61ba      	str	r2, [r7, #24]
 8000f3e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8000f40:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d302      	bcc.n	8000f56 <xQueueGenericSendFromISR+0xb6>
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d12c      	bne.n	8000fb0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	68b9      	ldr	r1, [r7, #8]
 8000f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f66:	f000 f941 	bl	80011ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000f6a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f72:	d112      	bne.n	8000f9a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d016      	beq.n	8000faa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f7e:	3324      	adds	r3, #36	; 0x24
 8000f80:	4618      	mov	r0, r3
 8000f82:	f001 f909 	bl	8002198 <xTaskRemoveFromEventList>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d00e      	beq.n	8000faa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00b      	beq.n	8000faa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2201      	movs	r2, #1
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	e007      	b.n	8000faa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000f9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	b25a      	sxtb	r2, r3
 8000fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000faa:	2301      	movs	r3, #1
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8000fae:	e001      	b.n	8000fb4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8000fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb6:	613b      	str	r3, [r7, #16]
	__asm volatile
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3738      	adds	r7, #56	; 0x38
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08e      	sub	sp, #56	; 0x38
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d109      	bne.n	8000ff8 <xQueueGenericReceive+0x30>
	__asm volatile
 8000fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fe8:	f383 8811 	msr	BASEPRI, r3
 8000fec:	f3bf 8f6f 	isb	sy
 8000ff0:	f3bf 8f4f 	dsb	sy
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff6:	e7fe      	b.n	8000ff6 <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d103      	bne.n	8001006 <xQueueGenericReceive+0x3e>
 8000ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <xQueueGenericReceive+0x42>
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <xQueueGenericReceive+0x44>
 800100a:	2300      	movs	r3, #0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d109      	bne.n	8001024 <xQueueGenericReceive+0x5c>
 8001010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001014:	f383 8811 	msr	BASEPRI, r3
 8001018:	f3bf 8f6f 	isb	sy
 800101c:	f3bf 8f4f 	dsb	sy
 8001020:	623b      	str	r3, [r7, #32]
 8001022:	e7fe      	b.n	8001022 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001024:	f001 fa74 	bl	8002510 <xTaskGetSchedulerState>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d102      	bne.n	8001034 <xQueueGenericReceive+0x6c>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d101      	bne.n	8001038 <xQueueGenericReceive+0x70>
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <xQueueGenericReceive+0x72>
 8001038:	2300      	movs	r3, #0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d109      	bne.n	8001052 <xQueueGenericReceive+0x8a>
 800103e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001042:	f383 8811 	msr	BASEPRI, r3
 8001046:	f3bf 8f6f 	isb	sy
 800104a:	f3bf 8f4f 	dsb	sy
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	e7fe      	b.n	8001050 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001052:	f7ff fa75 	bl	8000540 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800105c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105e:	2b00      	cmp	r3, #0
 8001060:	d046      	beq.n	80010f0 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800106c:	f000 f928 	bl	80012c0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d121      	bne.n	80010ba <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8001076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001078:	1e5a      	subs	r2, r3, #1
 800107a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800107c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800107e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d104      	bne.n	8001090 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001086:	f001 fb5b 	bl	8002740 <pvTaskIncrementMutexHeldCount>
 800108a:	4602      	mov	r2, r0
 800108c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800108e:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d027      	beq.n	80010e8 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800109a:	3310      	adds	r3, #16
 800109c:	4618      	mov	r0, r3
 800109e:	f001 f87b 	bl	8002198 <xTaskRemoveFromEventList>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d01f      	beq.n	80010e8 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 80010a8:	4b4f      	ldr	r3, [pc, #316]	; (80011e8 <xQueueGenericReceive+0x220>)
 80010aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	f3bf 8f4f 	dsb	sy
 80010b4:	f3bf 8f6f 	isb	sy
 80010b8:	e016      	b.n	80010e8 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80010ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010be:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00f      	beq.n	80010e8 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80010c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ca:	3324      	adds	r3, #36	; 0x24
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 f863 	bl	8002198 <xTaskRemoveFromEventList>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d007      	beq.n	80010e8 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 80010d8:	4b43      	ldr	r3, [pc, #268]	; (80011e8 <xQueueGenericReceive+0x220>)
 80010da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	f3bf 8f4f 	dsb	sy
 80010e4:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 80010e8:	f7ff fa58 	bl	800059c <vPortExitCritical>
				return pdPASS;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e077      	b.n	80011e0 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d103      	bne.n	80010fe <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80010f6:	f7ff fa51 	bl	800059c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e070      	b.n	80011e0 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 80010fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001100:	2b00      	cmp	r3, #0
 8001102:	d106      	bne.n	8001112 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	4618      	mov	r0, r3
 800110a:	f001 f8a7 	bl	800225c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800110e:	2301      	movs	r3, #1
 8001110:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001112:	f7ff fa43 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001116:	f000 fdfb 	bl	8001d10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800111a:	f7ff fa11 	bl	8000540 <vPortEnterCritical>
 800111e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001120:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001124:	b25b      	sxtb	r3, r3
 8001126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800112a:	d103      	bne.n	8001134 <xQueueGenericReceive+0x16c>
 800112c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001136:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800113a:	b25b      	sxtb	r3, r3
 800113c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001140:	d103      	bne.n	800114a <xQueueGenericReceive+0x182>
 8001142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800114a:	f7ff fa27 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800114e:	1d3a      	adds	r2, r7, #4
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4611      	mov	r1, r2
 8001156:	4618      	mov	r0, r3
 8001158:	f001 f8a4 	bl	80022a4 <xTaskCheckForTimeOut>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d131      	bne.n	80011c6 <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001162:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001164:	f000 f924 	bl	80013b0 <prvIsQueueEmpty>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d025      	beq.n	80011ba <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800116e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d108      	bne.n	8001188 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8001176:	f7ff f9e3 	bl	8000540 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800117a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4618      	mov	r0, r3
 8001180:	f001 f9e4 	bl	800254c <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8001184:	f7ff fa0a 	bl	800059c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800118a:	3324      	adds	r3, #36	; 0x24
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f000 ffb3 	bl	80020fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001196:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001198:	f000 f8b8 	bl	800130c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800119c:	f000 fdc6 	bl	8001d2c <xTaskResumeAll>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f47f af55 	bne.w	8001052 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <xQueueGenericReceive+0x220>)
 80011aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	f3bf 8f4f 	dsb	sy
 80011b4:	f3bf 8f6f 	isb	sy
 80011b8:	e74b      	b.n	8001052 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80011ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011bc:	f000 f8a6 	bl	800130c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80011c0:	f000 fdb4 	bl	8001d2c <xTaskResumeAll>
 80011c4:	e745      	b.n	8001052 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80011c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011c8:	f000 f8a0 	bl	800130c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80011cc:	f000 fdae 	bl	8001d2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80011d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011d2:	f000 f8ed 	bl	80013b0 <prvIsQueueEmpty>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f43f af3a 	beq.w	8001052 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80011de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3738      	adds	r7, #56	; 0x38
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	e000ed04 	.word	0xe000ed04

080011ec <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001200:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	2b00      	cmp	r3, #0
 8001208:	d10d      	bne.n	8001226 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d14d      	bne.n	80012ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	4618      	mov	r0, r3
 8001218:	f001 fa0e 	bl	8002638 <xTaskPriorityDisinherit>
 800121c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2200      	movs	r2, #0
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	e043      	b.n	80012ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d119      	bne.n	8001260 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6898      	ldr	r0, [r3, #8]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	461a      	mov	r2, r3
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	f003 f9ce 	bl	80045d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	441a      	add	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	429a      	cmp	r2, r3
 8001254:	d32b      	bcc.n	80012ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	e026      	b.n	80012ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	68d8      	ldr	r0, [r3, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	461a      	mov	r2, r3
 800126a:	68b9      	ldr	r1, [r7, #8]
 800126c:	f003 f9b4 	bl	80045d8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	425b      	negs	r3, r3
 800127a:	441a      	add	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	429a      	cmp	r2, r3
 800128a:	d207      	bcs.n	800129c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	425b      	negs	r3, r3
 8001296:	441a      	add	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d105      	bne.n	80012ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d002      	beq.n	80012ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80012b6:	697b      	ldr	r3, [r7, #20]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d018      	beq.n	8001304 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68da      	ldr	r2, [r3, #12]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	441a      	add	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d303      	bcc.n	80012f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68d9      	ldr	r1, [r3, #12]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	461a      	mov	r2, r3
 80012fe:	6838      	ldr	r0, [r7, #0]
 8001300:	f003 f96a 	bl	80045d8 <memcpy>
	}
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001314:	f7ff f914 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800131e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001320:	e011      	b.n	8001346 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001326:	2b00      	cmp	r3, #0
 8001328:	d012      	beq.n	8001350 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3324      	adds	r3, #36	; 0x24
 800132e:	4618      	mov	r0, r3
 8001330:	f000 ff32 	bl	8002198 <xTaskRemoveFromEventList>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800133a:	f001 f811 	bl	8002360 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	3b01      	subs	r3, #1
 8001342:	b2db      	uxtb	r3, r3
 8001344:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134a:	2b00      	cmp	r3, #0
 800134c:	dce9      	bgt.n	8001322 <prvUnlockQueue+0x16>
 800134e:	e000      	b.n	8001352 <prvUnlockQueue+0x46>
					break;
 8001350:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	22ff      	movs	r2, #255	; 0xff
 8001356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800135a:	f7ff f91f 	bl	800059c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800135e:	f7ff f8ef 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001368:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800136a:	e011      	b.n	8001390 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d012      	beq.n	800139a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3310      	adds	r3, #16
 8001378:	4618      	mov	r0, r3
 800137a:	f000 ff0d 	bl	8002198 <xTaskRemoveFromEventList>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001384:	f000 ffec 	bl	8002360 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001388:	7bbb      	ldrb	r3, [r7, #14]
 800138a:	3b01      	subs	r3, #1
 800138c:	b2db      	uxtb	r3, r3
 800138e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001390:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001394:	2b00      	cmp	r3, #0
 8001396:	dce9      	bgt.n	800136c <prvUnlockQueue+0x60>
 8001398:	e000      	b.n	800139c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800139a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	22ff      	movs	r2, #255	; 0xff
 80013a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80013a4:	f7ff f8fa 	bl	800059c <vPortExitCritical>
}
 80013a8:	bf00      	nop
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80013b8:	f7ff f8c2 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d102      	bne.n	80013ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80013c4:	2301      	movs	r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	e001      	b.n	80013ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80013ce:	f7ff f8e5 	bl	800059c <vPortExitCritical>

	return xReturn;
 80013d2:	68fb      	ldr	r3, [r7, #12]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80013e4:	f7ff f8ac 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d102      	bne.n	80013fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80013f4:	2301      	movs	r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	e001      	b.n	80013fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80013fe:	f7ff f8cd 	bl	800059c <vPortExitCritical>

	return xReturn;
 8001402:	68fb      	ldr	r3, [r7, #12]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	e014      	b.n	8001446 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800141c:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <vQueueAddToRegistry+0x4c>)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d10b      	bne.n	8001440 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001428:	490b      	ldr	r1, [pc, #44]	; (8001458 <vQueueAddToRegistry+0x4c>)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001432:	4a09      	ldr	r2, [pc, #36]	; (8001458 <vQueueAddToRegistry+0x4c>)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	4413      	add	r3, r2
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800143e:	e005      	b.n	800144c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	3301      	adds	r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2b07      	cmp	r3, #7
 800144a:	d9e7      	bls.n	800141c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	2000ca68 	.word	0x2000ca68

0800145c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800146c:	f7ff f868 	bl	8000540 <vPortEnterCritical>
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001476:	b25b      	sxtb	r3, r3
 8001478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800147c:	d103      	bne.n	8001486 <vQueueWaitForMessageRestricted+0x2a>
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800148c:	b25b      	sxtb	r3, r3
 800148e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001492:	d103      	bne.n	800149c <vQueueWaitForMessageRestricted+0x40>
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800149c:	f7ff f87e 	bl	800059c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d106      	bne.n	80014b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	3324      	adds	r3, #36	; 0x24
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	68b9      	ldr	r1, [r7, #8]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 fe47 	bl	8002144 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80014b6:	6978      	ldr	r0, [r7, #20]
 80014b8:	f7ff ff28 	bl	800130c <prvUnlockQueue>
	}
 80014bc:	bf00      	nop
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08c      	sub	sp, #48	; 0x30
 80014c8:	af04      	add	r7, sp, #16
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	4613      	mov	r3, r2
 80014d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f941 	bl	8000760 <pvPortMalloc>
 80014de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00e      	beq.n	8001504 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80014e6:	2050      	movs	r0, #80	; 0x50
 80014e8:	f7ff f93a 	bl	8000760 <pvPortMalloc>
 80014ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	631a      	str	r2, [r3, #48]	; 0x30
 80014fa:	e005      	b.n	8001508 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80014fc:	6978      	ldr	r0, [r7, #20]
 80014fe:	f7ff f9f5 	bl	80008ec <vPortFree>
 8001502:	e001      	b.n	8001508 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d013      	beq.n	8001536 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800150e:	88fa      	ldrh	r2, [r7, #6]
 8001510:	2300      	movs	r3, #0
 8001512:	9303      	str	r3, [sp, #12]
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	9302      	str	r3, [sp, #8]
 8001518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151a:	9301      	str	r3, [sp, #4]
 800151c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	68b9      	ldr	r1, [r7, #8]
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f000 f80e 	bl	8001546 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800152a:	69f8      	ldr	r0, [r7, #28]
 800152c:	f000 f892 	bl	8001654 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001530:	2301      	movs	r3, #1
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	e002      	b.n	800153c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800153c:	69bb      	ldr	r3, [r7, #24]
	}
 800153e:	4618      	mov	r0, r3
 8001540:	3720      	adds	r7, #32
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b088      	sub	sp, #32
 800154a:	af00      	add	r7, sp, #0
 800154c:	60f8      	str	r0, [r7, #12]
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001556:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	461a      	mov	r2, r3
 800155e:	21a5      	movs	r1, #165	; 0xa5
 8001560:	f003 f845 	bl	80045ee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800156e:	3b01      	subs	r3, #1
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	f023 0307 	bic.w	r3, r3, #7
 800157c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	2b00      	cmp	r3, #0
 8001586:	d009      	beq.n	800159c <prvInitialiseNewTask+0x56>
 8001588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800158c:	f383 8811 	msr	BASEPRI, r3
 8001590:	f3bf 8f6f 	isb	sy
 8001594:	f3bf 8f4f 	dsb	sy
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	e7fe      	b.n	800159a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	e012      	b.n	80015c8 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	4413      	add	r3, r2
 80015a8:	7819      	ldrb	r1, [r3, #0]
 80015aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	4413      	add	r3, r2
 80015b0:	3334      	adds	r3, #52	; 0x34
 80015b2:	460a      	mov	r2, r1
 80015b4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	4413      	add	r3, r2
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d006      	beq.n	80015d0 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3301      	adds	r3, #1
 80015c6:	61fb      	str	r3, [r7, #28]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	2b09      	cmp	r3, #9
 80015cc:	d9e9      	bls.n	80015a2 <prvInitialiseNewTask+0x5c>
 80015ce:	e000      	b.n	80015d2 <prvInitialiseNewTask+0x8c>
		{
			break;
 80015d0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80015d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80015da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015dc:	2b09      	cmp	r3, #9
 80015de:	d901      	bls.n	80015e4 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80015e0:	2309      	movs	r3, #9
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80015e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80015ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015ee:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 80015f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015f2:	2200      	movs	r2, #0
 80015f4:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80015f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015f8:	3304      	adds	r3, #4
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe fe08 	bl	8000210 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001602:	3318      	adds	r3, #24
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe fe03 	bl	8000210 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800160a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800160c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800160e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001612:	f1c3 020a 	rsb	r2, r3, #10
 8001616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001618:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800161a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800161c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800161e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001622:	2200      	movs	r2, #0
 8001624:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001628:	2200      	movs	r2, #0
 800162a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	68f9      	ldr	r1, [r7, #12]
 8001632:	69b8      	ldr	r0, [r7, #24]
 8001634:	f7fe fe80 	bl	8000338 <pxPortInitialiseStack>
 8001638:	4602      	mov	r2, r0
 800163a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800163e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001648:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800164a:	bf00      	nop
 800164c:	3720      	adds	r7, #32
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800165c:	f7fe ff70 	bl	8000540 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001660:	4b2a      	ldr	r3, [pc, #168]	; (800170c <prvAddNewTaskToReadyList+0xb8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	3301      	adds	r3, #1
 8001666:	4a29      	ldr	r2, [pc, #164]	; (800170c <prvAddNewTaskToReadyList+0xb8>)
 8001668:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800166a:	4b29      	ldr	r3, [pc, #164]	; (8001710 <prvAddNewTaskToReadyList+0xbc>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d109      	bne.n	8001686 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001672:	4a27      	ldr	r2, [pc, #156]	; (8001710 <prvAddNewTaskToReadyList+0xbc>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001678:	4b24      	ldr	r3, [pc, #144]	; (800170c <prvAddNewTaskToReadyList+0xb8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d110      	bne.n	80016a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001680:	f000 fe94 	bl	80023ac <prvInitialiseTaskLists>
 8001684:	e00d      	b.n	80016a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001686:	4b23      	ldr	r3, [pc, #140]	; (8001714 <prvAddNewTaskToReadyList+0xc0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d109      	bne.n	80016a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <prvAddNewTaskToReadyList+0xbc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	429a      	cmp	r2, r3
 800169a:	d802      	bhi.n	80016a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800169c:	4a1c      	ldr	r2, [pc, #112]	; (8001710 <prvAddNewTaskToReadyList+0xbc>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80016a2:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <prvAddNewTaskToReadyList+0xc4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	4a1b      	ldr	r2, [pc, #108]	; (8001718 <prvAddNewTaskToReadyList+0xc4>)
 80016aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b0:	2201      	movs	r2, #1
 80016b2:	409a      	lsls	r2, r3
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <prvAddNewTaskToReadyList+0xc8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	4a18      	ldr	r2, [pc, #96]	; (800171c <prvAddNewTaskToReadyList+0xc8>)
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4a15      	ldr	r2, [pc, #84]	; (8001720 <prvAddNewTaskToReadyList+0xcc>)
 80016cc:	441a      	add	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3304      	adds	r3, #4
 80016d2:	4619      	mov	r1, r3
 80016d4:	4610      	mov	r0, r2
 80016d6:	f7fe fda8 	bl	800022a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80016da:	f7fe ff5f 	bl	800059c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <prvAddNewTaskToReadyList+0xc0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00e      	beq.n	8001704 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <prvAddNewTaskToReadyList+0xbc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d207      	bcs.n	8001704 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <prvAddNewTaskToReadyList+0xd0>)
 80016f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	f3bf 8f4f 	dsb	sy
 8001700:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	2000c9f4 	.word	0x2000c9f4
 8001710:	2000c8b8 	.word	0x2000c8b8
 8001714:	2000ca00 	.word	0x2000ca00
 8001718:	2000ca10 	.word	0x2000ca10
 800171c:	2000c9fc 	.word	0x2000c9fc
 8001720:	2000c8bc 	.word	0x2000c8bc
 8001724:	e000ed04 	.word	0xe000ed04

08001728 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001730:	f7fe ff06 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d102      	bne.n	8001740 <vTaskDelete+0x18>
 800173a:	4b38      	ldr	r3, [pc, #224]	; (800181c <vTaskDelete+0xf4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	e000      	b.n	8001742 <vTaskDelete+0x1a>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	3304      	adds	r3, #4
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fdcb 	bl	80002e4 <uxListRemove>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d115      	bne.n	8001780 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001758:	4931      	ldr	r1, [pc, #196]	; (8001820 <vTaskDelete+0xf8>)
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	440b      	add	r3, r1
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10a      	bne.n	8001780 <vTaskDelete+0x58>
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	2201      	movs	r2, #1
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43da      	mvns	r2, r3
 8001776:	4b2b      	ldr	r3, [pc, #172]	; (8001824 <vTaskDelete+0xfc>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4013      	ands	r3, r2
 800177c:	4a29      	ldr	r2, [pc, #164]	; (8001824 <vTaskDelete+0xfc>)
 800177e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001784:	2b00      	cmp	r3, #0
 8001786:	d004      	beq.n	8001792 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3318      	adds	r3, #24
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fda9 	bl	80002e4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8001792:	4b25      	ldr	r3, [pc, #148]	; (8001828 <vTaskDelete+0x100>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	3301      	adds	r3, #1
 8001798:	4a23      	ldr	r2, [pc, #140]	; (8001828 <vTaskDelete+0x100>)
 800179a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800179c:	4b1f      	ldr	r3, [pc, #124]	; (800181c <vTaskDelete+0xf4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d10b      	bne.n	80017be <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	3304      	adds	r3, #4
 80017aa:	4619      	mov	r1, r3
 80017ac:	481f      	ldr	r0, [pc, #124]	; (800182c <vTaskDelete+0x104>)
 80017ae:	f7fe fd3c 	bl	800022a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80017b2:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <vTaskDelete+0x108>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	3301      	adds	r3, #1
 80017b8:	4a1d      	ldr	r2, [pc, #116]	; (8001830 <vTaskDelete+0x108>)
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	e009      	b.n	80017d2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80017be:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <vTaskDelete+0x10c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	4a1b      	ldr	r2, [pc, #108]	; (8001834 <vTaskDelete+0x10c>)
 80017c6:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f000 fe6b 	bl	80024a4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80017ce:	f000 fe79 	bl	80024c4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80017d2:	f7fe fee3 	bl	800059c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80017d6:	4b18      	ldr	r3, [pc, #96]	; (8001838 <vTaskDelete+0x110>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d01a      	beq.n	8001814 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 80017de:	4b0f      	ldr	r3, [pc, #60]	; (800181c <vTaskDelete+0xf4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d115      	bne.n	8001814 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <vTaskDelete+0x114>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d009      	beq.n	8001804 <vTaskDelete+0xdc>
 80017f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017f4:	f383 8811 	msr	BASEPRI, r3
 80017f8:	f3bf 8f6f 	isb	sy
 80017fc:	f3bf 8f4f 	dsb	sy
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	e7fe      	b.n	8001802 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <vTaskDelete+0x118>)
 8001806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	f3bf 8f4f 	dsb	sy
 8001810:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001814:	bf00      	nop
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	2000c8b8 	.word	0x2000c8b8
 8001820:	2000c8bc 	.word	0x2000c8bc
 8001824:	2000c9fc 	.word	0x2000c9fc
 8001828:	2000ca10 	.word	0x2000ca10
 800182c:	2000c9c8 	.word	0x2000c9c8
 8001830:	2000c9dc 	.word	0x2000c9dc
 8001834:	2000c9f4 	.word	0x2000c9f4
 8001838:	2000ca00 	.word	0x2000ca00
 800183c:	2000ca1c 	.word	0x2000ca1c
 8001840:	e000ed04 	.word	0xe000ed04

08001844 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d016      	beq.n	8001884 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <vTaskDelay+0x60>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d009      	beq.n	8001872 <vTaskDelay+0x2e>
 800185e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001862:	f383 8811 	msr	BASEPRI, r3
 8001866:	f3bf 8f6f 	isb	sy
 800186a:	f3bf 8f4f 	dsb	sy
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	e7fe      	b.n	8001870 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001872:	f000 fa4d 	bl	8001d10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001876:	2100      	movs	r1, #0
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 ff75 	bl	8002768 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800187e:	f000 fa55 	bl	8001d2c <xTaskResumeAll>
 8001882:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d107      	bne.n	800189a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <vTaskDelay+0x64>)
 800188c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	f3bf 8f4f 	dsb	sy
 8001896:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000ca1c 	.word	0x2000ca1c
 80018a8:	e000ed04 	.word	0xe000ed04

080018ac <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 80018b4:	f7fe fe44 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d102      	bne.n	80018c4 <uxTaskPriorityGet+0x18>
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <uxTaskPriorityGet+0x30>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	e000      	b.n	80018c6 <uxTaskPriorityGet+0x1a>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 80018ce:	f7fe fe65 	bl	800059c <vPortExitCritical>

		return uxReturn;
 80018d2:	68bb      	ldr	r3, [r7, #8]
	}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	2000c8b8 	.word	0x2000c8b8

080018e0 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	2b09      	cmp	r3, #9
 80018f2:	d909      	bls.n	8001908 <vTaskPrioritySet+0x28>
 80018f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018f8:	f383 8811 	msr	BASEPRI, r3
 80018fc:	f3bf 8f6f 	isb	sy
 8001900:	f3bf 8f4f 	dsb	sy
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	e7fe      	b.n	8001906 <vTaskPrioritySet+0x26>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	2b09      	cmp	r3, #9
 800190c:	d901      	bls.n	8001912 <vTaskPrioritySet+0x32>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800190e:	2309      	movs	r3, #9
 8001910:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8001912:	f7fe fe15 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d102      	bne.n	8001922 <vTaskPrioritySet+0x42>
 800191c:	4b43      	ldr	r3, [pc, #268]	; (8001a2c <vTaskPrioritySet+0x14c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	e000      	b.n	8001924 <vTaskPrioritySet+0x44>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d074      	beq.n	8001a1e <vTaskPrioritySet+0x13e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	429a      	cmp	r2, r3
 800193a:	d90d      	bls.n	8001958 <vTaskPrioritySet+0x78>
				{
					if( pxTCB != pxCurrentTCB )
 800193c:	4b3b      	ldr	r3, [pc, #236]	; (8001a2c <vTaskPrioritySet+0x14c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	429a      	cmp	r2, r3
 8001944:	d00f      	beq.n	8001966 <vTaskPrioritySet+0x86>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8001946:	4b39      	ldr	r3, [pc, #228]	; (8001a2c <vTaskPrioritySet+0x14c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d809      	bhi.n	8001966 <vTaskPrioritySet+0x86>
						{
							xYieldRequired = pdTRUE;
 8001952:	2301      	movs	r3, #1
 8001954:	61fb      	str	r3, [r7, #28]
 8001956:	e006      	b.n	8001966 <vTaskPrioritySet+0x86>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8001958:	4b34      	ldr	r3, [pc, #208]	; (8001a2c <vTaskPrioritySet+0x14c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	429a      	cmp	r2, r3
 8001960:	d101      	bne.n	8001966 <vTaskPrioritySet+0x86>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8001962:	2301      	movs	r3, #1
 8001964:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196a:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001974:	429a      	cmp	r2, r3
 8001976:	d102      	bne.n	800197e <vTaskPrioritySet+0x9e>
					{
						pxTCB->uxPriority = uxNewPriority;
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	641a      	str	r2, [r3, #64]	; 0x40
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	2b00      	cmp	r3, #0
 800198a:	db04      	blt.n	8001996 <vTaskPrioritySet+0xb6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	f1c3 020a 	rsb	r2, r3, #10
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	6959      	ldr	r1, [r3, #20]
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4a22      	ldr	r2, [pc, #136]	; (8001a30 <vTaskPrioritySet+0x150>)
 80019a6:	4413      	add	r3, r2
 80019a8:	4299      	cmp	r1, r3
 80019aa:	d101      	bne.n	80019b0 <vTaskPrioritySet+0xd0>
 80019ac:	2301      	movs	r3, #1
 80019ae:	e000      	b.n	80019b2 <vTaskPrioritySet+0xd2>
 80019b0:	2300      	movs	r3, #0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d028      	beq.n	8001a08 <vTaskPrioritySet+0x128>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	3304      	adds	r3, #4
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fc92 	bl	80002e4 <uxListRemove>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d109      	bne.n	80019da <vTaskPrioritySet+0xfa>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80019c6:	2201      	movs	r2, #1
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43da      	mvns	r2, r3
 80019d0:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <vTaskPrioritySet+0x154>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4013      	ands	r3, r2
 80019d6:	4a17      	ldr	r2, [pc, #92]	; (8001a34 <vTaskPrioritySet+0x154>)
 80019d8:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	2201      	movs	r2, #1
 80019e0:	409a      	lsls	r2, r3
 80019e2:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <vTaskPrioritySet+0x154>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <vTaskPrioritySet+0x154>)
 80019ea:	6013      	str	r3, [r2, #0]
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4a0d      	ldr	r2, [pc, #52]	; (8001a30 <vTaskPrioritySet+0x150>)
 80019fa:	441a      	add	r2, r3
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	3304      	adds	r3, #4
 8001a00:	4619      	mov	r1, r3
 8001a02:	4610      	mov	r0, r2
 8001a04:	f7fe fc11 	bl	800022a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d007      	beq.n	8001a1e <vTaskPrioritySet+0x13e>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <vTaskPrioritySet+0x158>)
 8001a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	f3bf 8f4f 	dsb	sy
 8001a1a:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8001a1e:	f7fe fdbd 	bl	800059c <vPortExitCritical>
	}
 8001a22:	bf00      	nop
 8001a24:	3720      	adds	r7, #32
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	2000c8b8 	.word	0x2000c8b8
 8001a30:	2000c8bc 	.word	0x2000c8bc
 8001a34:	2000c9fc 	.word	0x2000c9fc
 8001a38:	e000ed04 	.word	0xe000ed04

08001a3c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001a44:	f7fe fd7c 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d102      	bne.n	8001a54 <vTaskSuspend+0x18>
 8001a4e:	4b37      	ldr	r3, [pc, #220]	; (8001b2c <vTaskSuspend+0xf0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	e000      	b.n	8001a56 <vTaskSuspend+0x1a>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fc41 	bl	80002e4 <uxListRemove>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d115      	bne.n	8001a94 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a6c:	4930      	ldr	r1, [pc, #192]	; (8001b30 <vTaskSuspend+0xf4>)
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	440b      	add	r3, r1
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10a      	bne.n	8001a94 <vTaskSuspend+0x58>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a82:	2201      	movs	r2, #1
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43da      	mvns	r2, r3
 8001a8a:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <vTaskSuspend+0xf8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	4a28      	ldr	r2, [pc, #160]	; (8001b34 <vTaskSuspend+0xf8>)
 8001a92:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d004      	beq.n	8001aa6 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	3318      	adds	r3, #24
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fc1f 	bl	80002e4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4822      	ldr	r0, [pc, #136]	; (8001b38 <vTaskSuspend+0xfc>)
 8001aae:	f7fe fbbc 	bl	800022a <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 8001ab2:	f7fe fd73 	bl	800059c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8001ab6:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <vTaskSuspend+0x100>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d005      	beq.n	8001aca <vTaskSuspend+0x8e>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8001abe:	f7fe fd3f 	bl	8000540 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8001ac2:	f000 fcff 	bl	80024c4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8001ac6:	f7fe fd69 	bl	800059c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8001aca:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <vTaskSuspend+0xf0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d126      	bne.n	8001b22 <vTaskSuspend+0xe6>
		{
			if( xSchedulerRunning != pdFALSE )
 8001ad4:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <vTaskSuspend+0x100>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d016      	beq.n	8001b0a <vTaskSuspend+0xce>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8001adc:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <vTaskSuspend+0x104>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d009      	beq.n	8001af8 <vTaskSuspend+0xbc>
 8001ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ae8:	f383 8811 	msr	BASEPRI, r3
 8001aec:	f3bf 8f6f 	isb	sy
 8001af0:	f3bf 8f4f 	dsb	sy
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	e7fe      	b.n	8001af6 <vTaskSuspend+0xba>
				portYIELD_WITHIN_API();
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <vTaskSuspend+0x108>)
 8001afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	f3bf 8f4f 	dsb	sy
 8001b04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001b08:	e00b      	b.n	8001b22 <vTaskSuspend+0xe6>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <vTaskSuspend+0xfc>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <vTaskSuspend+0x10c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d103      	bne.n	8001b1e <vTaskSuspend+0xe2>
					pxCurrentTCB = NULL;
 8001b16:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <vTaskSuspend+0xf0>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
	}
 8001b1c:	e001      	b.n	8001b22 <vTaskSuspend+0xe6>
					vTaskSwitchContext();
 8001b1e:	f000 fa6d 	bl	8001ffc <vTaskSwitchContext>
	}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	2000c8b8 	.word	0x2000c8b8
 8001b30:	2000c8bc 	.word	0x2000c8bc
 8001b34:	2000c9fc 	.word	0x2000c9fc
 8001b38:	2000c9e0 	.word	0x2000c9e0
 8001b3c:	2000ca00 	.word	0x2000ca00
 8001b40:	2000ca1c 	.word	0x2000ca1c
 8001b44:	e000ed04 	.word	0xe000ed04
 8001b48:	2000c9f4 	.word	0x2000c9f4

08001b4c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b087      	sub	sp, #28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d109      	bne.n	8001b76 <prvTaskIsTaskSuspended+0x2a>
 8001b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b66:	f383 8811 	msr	BASEPRI, r3
 8001b6a:	f3bf 8f6f 	isb	sy
 8001b6e:	f3bf 8f4f 	dsb	sy
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	e7fe      	b.n	8001b74 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	4a0f      	ldr	r2, [pc, #60]	; (8001bb8 <prvTaskIsTaskSuspended+0x6c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d101      	bne.n	8001b84 <prvTaskIsTaskSuspended+0x38>
 8001b80:	2301      	movs	r3, #1
 8001b82:	e000      	b.n	8001b86 <prvTaskIsTaskSuspended+0x3a>
 8001b84:	2300      	movs	r3, #0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00f      	beq.n	8001baa <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8e:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <prvTaskIsTaskSuspended+0x70>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d00a      	beq.n	8001baa <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <prvTaskIsTaskSuspended+0x54>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <prvTaskIsTaskSuspended+0x56>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001baa:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8001bac:	4618      	mov	r0, r3
 8001bae:	371c      	adds	r7, #28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	2000c9e0 	.word	0x2000c9e0
 8001bbc:	2000c9b4 	.word	0x2000c9b4

08001bc0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d109      	bne.n	8001be6 <vTaskResume+0x26>
 8001bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bd6:	f383 8811 	msr	BASEPRI, r3
 8001bda:	f3bf 8f6f 	isb	sy
 8001bde:	f3bf 8f4f 	dsb	sy
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	e7fe      	b.n	8001be4 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d039      	beq.n	8001c60 <vTaskResume+0xa0>
 8001bec:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <vTaskResume+0xa8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d034      	beq.n	8001c60 <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 8001bf6:	f7fe fca3 	bl	8000540 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f7ff ffa6 	bl	8001b4c <prvTaskIsTaskSuspended>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d02a      	beq.n	8001c5c <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fb6a 	bl	80002e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	2201      	movs	r2, #1
 8001c16:	409a      	lsls	r2, r3
 8001c18:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <vTaskResume+0xac>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	4a13      	ldr	r2, [pc, #76]	; (8001c6c <vTaskResume+0xac>)
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4a10      	ldr	r2, [pc, #64]	; (8001c70 <vTaskResume+0xb0>)
 8001c30:	441a      	add	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	3304      	adds	r3, #4
 8001c36:	4619      	mov	r1, r3
 8001c38:	4610      	mov	r0, r2
 8001c3a:	f7fe faf6 	bl	800022a <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <vTaskResume+0xa8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d307      	bcc.n	8001c5c <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <vTaskResume+0xb4>)
 8001c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	f3bf 8f4f 	dsb	sy
 8001c58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8001c5c:	f7fe fc9e 	bl	800059c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001c60:	bf00      	nop
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	2000c8b8 	.word	0x2000c8b8
 8001c6c:	2000c9fc 	.word	0x2000c9fc
 8001c70:	2000c8bc 	.word	0x2000c8bc
 8001c74:	e000ed04 	.word	0xe000ed04

08001c78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001c7e:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <vTaskStartScheduler+0x80>)
 8001c80:	9301      	str	r3, [sp, #4]
 8001c82:	2300      	movs	r3, #0
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	2300      	movs	r3, #0
 8001c88:	2282      	movs	r2, #130	; 0x82
 8001c8a:	491c      	ldr	r1, [pc, #112]	; (8001cfc <vTaskStartScheduler+0x84>)
 8001c8c:	481c      	ldr	r0, [pc, #112]	; (8001d00 <vTaskStartScheduler+0x88>)
 8001c8e:	f7ff fc19 	bl	80014c4 <xTaskCreate>
 8001c92:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d102      	bne.n	8001ca0 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8001c9a:	f000 fdcb 	bl	8002834 <xTimerCreateTimerTask>
 8001c9e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d115      	bne.n	8001cd2 <vTaskStartScheduler+0x5a>
 8001ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001caa:	f383 8811 	msr	BASEPRI, r3
 8001cae:	f3bf 8f6f 	isb	sy
 8001cb2:	f3bf 8f4f 	dsb	sy
 8001cb6:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <vTaskStartScheduler+0x8c>)
 8001cba:	f04f 32ff 	mov.w	r2, #4294967295
 8001cbe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <vTaskStartScheduler+0x90>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <vTaskStartScheduler+0x94>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001ccc:	f7fe fbac 	bl	8000428 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001cd0:	e00d      	b.n	8001cee <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd8:	d109      	bne.n	8001cee <vTaskStartScheduler+0x76>
 8001cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cde:	f383 8811 	msr	BASEPRI, r3
 8001ce2:	f3bf 8f6f 	isb	sy
 8001ce6:	f3bf 8f4f 	dsb	sy
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	e7fe      	b.n	8001cec <vTaskStartScheduler+0x74>
}
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	2000ca18 	.word	0x2000ca18
 8001cfc:	08004f70 	.word	0x08004f70
 8001d00:	08002379 	.word	0x08002379
 8001d04:	2000ca14 	.word	0x2000ca14
 8001d08:	2000ca00 	.word	0x2000ca00
 8001d0c:	2000c9f8 	.word	0x2000c9f8

08001d10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001d14:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <vTaskSuspendAll+0x18>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	4a03      	ldr	r2, [pc, #12]	; (8001d28 <vTaskSuspendAll+0x18>)
 8001d1c:	6013      	str	r3, [r2, #0]
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	2000ca1c 	.word	0x2000ca1c

08001d2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001d3a:	4b41      	ldr	r3, [pc, #260]	; (8001e40 <xTaskResumeAll+0x114>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d109      	bne.n	8001d56 <xTaskResumeAll+0x2a>
 8001d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d46:	f383 8811 	msr	BASEPRI, r3
 8001d4a:	f3bf 8f6f 	isb	sy
 8001d4e:	f3bf 8f4f 	dsb	sy
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	e7fe      	b.n	8001d54 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001d56:	f7fe fbf3 	bl	8000540 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001d5a:	4b39      	ldr	r3, [pc, #228]	; (8001e40 <xTaskResumeAll+0x114>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	4a37      	ldr	r2, [pc, #220]	; (8001e40 <xTaskResumeAll+0x114>)
 8001d62:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d64:	4b36      	ldr	r3, [pc, #216]	; (8001e40 <xTaskResumeAll+0x114>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d161      	bne.n	8001e30 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001d6c:	4b35      	ldr	r3, [pc, #212]	; (8001e44 <xTaskResumeAll+0x118>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d05d      	beq.n	8001e30 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d74:	e02e      	b.n	8001dd4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001d76:	4b34      	ldr	r3, [pc, #208]	; (8001e48 <xTaskResumeAll+0x11c>)
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	3318      	adds	r3, #24
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe faae 	bl	80002e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe faa9 	bl	80002e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d96:	2201      	movs	r2, #1
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	4b2c      	ldr	r3, [pc, #176]	; (8001e4c <xTaskResumeAll+0x120>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	4a2a      	ldr	r2, [pc, #168]	; (8001e4c <xTaskResumeAll+0x120>)
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4a27      	ldr	r2, [pc, #156]	; (8001e50 <xTaskResumeAll+0x124>)
 8001db2:	441a      	add	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	3304      	adds	r3, #4
 8001db8:	4619      	mov	r1, r3
 8001dba:	4610      	mov	r0, r2
 8001dbc:	f7fe fa35 	bl	800022a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc4:	4b23      	ldr	r3, [pc, #140]	; (8001e54 <xTaskResumeAll+0x128>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d302      	bcc.n	8001dd4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8001dce:	4b22      	ldr	r3, [pc, #136]	; (8001e58 <xTaskResumeAll+0x12c>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001dd4:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <xTaskResumeAll+0x11c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1cc      	bne.n	8001d76 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001de2:	f000 fb6f 	bl	80024c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001de6:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <xTaskResumeAll+0x130>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d010      	beq.n	8001e14 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001df2:	f000 f847 	bl	8001e84 <xTaskIncrementTick>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001dfc:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <xTaskResumeAll+0x12c>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f1      	bne.n	8001df2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8001e0e:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <xTaskResumeAll+0x130>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001e14:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <xTaskResumeAll+0x12c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d009      	beq.n	8001e30 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <xTaskResumeAll+0x134>)
 8001e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	f3bf 8f4f 	dsb	sy
 8001e2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001e30:	f7fe fbb4 	bl	800059c <vPortExitCritical>

	return xAlreadyYielded;
 8001e34:	68bb      	ldr	r3, [r7, #8]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	2000ca1c 	.word	0x2000ca1c
 8001e44:	2000c9f4 	.word	0x2000c9f4
 8001e48:	2000c9b4 	.word	0x2000c9b4
 8001e4c:	2000c9fc 	.word	0x2000c9fc
 8001e50:	2000c8bc 	.word	0x2000c8bc
 8001e54:	2000c8b8 	.word	0x2000c8b8
 8001e58:	2000ca08 	.word	0x2000ca08
 8001e5c:	2000ca04 	.word	0x2000ca04
 8001e60:	e000ed04 	.word	0xe000ed04

08001e64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001e6a:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <xTaskGetTickCount+0x1c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001e70:	687b      	ldr	r3, [r7, #4]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	2000c9f8 	.word	0x2000c9f8

08001e84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e8e:	4b50      	ldr	r3, [pc, #320]	; (8001fd0 <xTaskIncrementTick+0x14c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f040 808c 	bne.w	8001fb0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8001e98:	4b4e      	ldr	r3, [pc, #312]	; (8001fd4 <xTaskIncrementTick+0x150>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001ea0:	4a4c      	ldr	r2, [pc, #304]	; (8001fd4 <xTaskIncrementTick+0x150>)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d11f      	bne.n	8001eec <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001eac:	4b4a      	ldr	r3, [pc, #296]	; (8001fd8 <xTaskIncrementTick+0x154>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d009      	beq.n	8001eca <xTaskIncrementTick+0x46>
 8001eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eba:	f383 8811 	msr	BASEPRI, r3
 8001ebe:	f3bf 8f6f 	isb	sy
 8001ec2:	f3bf 8f4f 	dsb	sy
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	e7fe      	b.n	8001ec8 <xTaskIncrementTick+0x44>
 8001eca:	4b43      	ldr	r3, [pc, #268]	; (8001fd8 <xTaskIncrementTick+0x154>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	4b42      	ldr	r3, [pc, #264]	; (8001fdc <xTaskIncrementTick+0x158>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a40      	ldr	r2, [pc, #256]	; (8001fd8 <xTaskIncrementTick+0x154>)
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	4a40      	ldr	r2, [pc, #256]	; (8001fdc <xTaskIncrementTick+0x158>)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	4b40      	ldr	r3, [pc, #256]	; (8001fe0 <xTaskIncrementTick+0x15c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	4a3e      	ldr	r2, [pc, #248]	; (8001fe0 <xTaskIncrementTick+0x15c>)
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	f000 faec 	bl	80024c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001eec:	4b3d      	ldr	r3, [pc, #244]	; (8001fe4 <xTaskIncrementTick+0x160>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d34d      	bcc.n	8001f92 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ef6:	4b38      	ldr	r3, [pc, #224]	; (8001fd8 <xTaskIncrementTick+0x154>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <xTaskIncrementTick+0x80>
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <xTaskIncrementTick+0x82>
 8001f04:	2300      	movs	r3, #0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d004      	beq.n	8001f14 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f0a:	4b36      	ldr	r3, [pc, #216]	; (8001fe4 <xTaskIncrementTick+0x160>)
 8001f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f10:	601a      	str	r2, [r3, #0]
					break;
 8001f12:	e03e      	b.n	8001f92 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001f14:	4b30      	ldr	r3, [pc, #192]	; (8001fd8 <xTaskIncrementTick+0x154>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d203      	bcs.n	8001f34 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001f2c:	4a2d      	ldr	r2, [pc, #180]	; (8001fe4 <xTaskIncrementTick+0x160>)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6013      	str	r3, [r2, #0]
						break;
 8001f32:	e02e      	b.n	8001f92 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	3304      	adds	r3, #4
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe f9d3 	bl	80002e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d004      	beq.n	8001f50 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	3318      	adds	r3, #24
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe f9ca 	bl	80002e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f54:	2201      	movs	r2, #1
 8001f56:	409a      	lsls	r2, r3
 8001f58:	4b23      	ldr	r3, [pc, #140]	; (8001fe8 <xTaskIncrementTick+0x164>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	4a22      	ldr	r2, [pc, #136]	; (8001fe8 <xTaskIncrementTick+0x164>)
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4a1f      	ldr	r2, [pc, #124]	; (8001fec <xTaskIncrementTick+0x168>)
 8001f70:	441a      	add	r2, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	3304      	adds	r3, #4
 8001f76:	4619      	mov	r1, r3
 8001f78:	4610      	mov	r0, r2
 8001f7a:	f7fe f956 	bl	800022a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f82:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <xTaskIncrementTick+0x16c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d3b4      	bcc.n	8001ef6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f90:	e7b1      	b.n	8001ef6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001f92:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <xTaskIncrementTick+0x16c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f98:	4914      	ldr	r1, [pc, #80]	; (8001fec <xTaskIncrementTick+0x168>)
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d907      	bls.n	8001fba <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8001faa:	2301      	movs	r3, #1
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	e004      	b.n	8001fba <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001fb0:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <xTaskIncrementTick+0x170>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	4a0f      	ldr	r2, [pc, #60]	; (8001ff4 <xTaskIncrementTick+0x170>)
 8001fb8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001fba:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <xTaskIncrementTick+0x174>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001fc6:	697b      	ldr	r3, [r7, #20]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	2000ca1c 	.word	0x2000ca1c
 8001fd4:	2000c9f8 	.word	0x2000c9f8
 8001fd8:	2000c9ac 	.word	0x2000c9ac
 8001fdc:	2000c9b0 	.word	0x2000c9b0
 8001fe0:	2000ca0c 	.word	0x2000ca0c
 8001fe4:	2000ca14 	.word	0x2000ca14
 8001fe8:	2000c9fc 	.word	0x2000c9fc
 8001fec:	2000c8bc 	.word	0x2000c8bc
 8001ff0:	2000c8b8 	.word	0x2000c8b8
 8001ff4:	2000ca04 	.word	0x2000ca04
 8001ff8:	2000ca08 	.word	0x2000ca08

08001ffc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002002:	4b39      	ldr	r3, [pc, #228]	; (80020e8 <vTaskSwitchContext+0xec>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800200a:	4b38      	ldr	r3, [pc, #224]	; (80020ec <vTaskSwitchContext+0xf0>)
 800200c:	2201      	movs	r2, #1
 800200e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002010:	e065      	b.n	80020de <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8002012:	4b36      	ldr	r3, [pc, #216]	; (80020ec <vTaskSwitchContext+0xf0>)
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8002018:	4b35      	ldr	r3, [pc, #212]	; (80020f0 <vTaskSwitchContext+0xf4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	61fb      	str	r3, [r7, #28]
 8002020:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8002024:	61bb      	str	r3, [r7, #24]
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	429a      	cmp	r2, r3
 800202e:	d111      	bne.n	8002054 <vTaskSwitchContext+0x58>
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	3304      	adds	r3, #4
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	429a      	cmp	r2, r3
 800203a:	d10b      	bne.n	8002054 <vTaskSwitchContext+0x58>
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	3308      	adds	r3, #8
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	429a      	cmp	r2, r3
 8002046:	d105      	bne.n	8002054 <vTaskSwitchContext+0x58>
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	330c      	adds	r3, #12
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	429a      	cmp	r2, r3
 8002052:	d008      	beq.n	8002066 <vTaskSwitchContext+0x6a>
 8002054:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <vTaskSwitchContext+0xf4>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4b25      	ldr	r3, [pc, #148]	; (80020f0 <vTaskSwitchContext+0xf4>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	3334      	adds	r3, #52	; 0x34
 800205e:	4619      	mov	r1, r3
 8002060:	4610      	mov	r0, r2
 8002062:	f001 ff03 	bl	8003e6c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002066:	4b23      	ldr	r3, [pc, #140]	; (80020f4 <vTaskSwitchContext+0xf8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002074:	7afb      	ldrb	r3, [r7, #11]
 8002076:	f1c3 031f 	rsb	r3, r3, #31
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	491e      	ldr	r1, [pc, #120]	; (80020f8 <vTaskSwitchContext+0xfc>)
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d109      	bne.n	80020a4 <vTaskSwitchContext+0xa8>
	__asm volatile
 8002090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002094:	f383 8811 	msr	BASEPRI, r3
 8002098:	f3bf 8f6f 	isb	sy
 800209c:	f3bf 8f4f 	dsb	sy
 80020a0:	607b      	str	r3, [r7, #4]
 80020a2:	e7fe      	b.n	80020a2 <vTaskSwitchContext+0xa6>
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	4613      	mov	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4a12      	ldr	r2, [pc, #72]	; (80020f8 <vTaskSwitchContext+0xfc>)
 80020b0:	4413      	add	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	3308      	adds	r3, #8
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d104      	bne.n	80020d4 <vTaskSwitchContext+0xd8>
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	605a      	str	r2, [r3, #4]
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	4a05      	ldr	r2, [pc, #20]	; (80020f0 <vTaskSwitchContext+0xf4>)
 80020dc:	6013      	str	r3, [r2, #0]
}
 80020de:	bf00      	nop
 80020e0:	3720      	adds	r7, #32
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	2000ca1c 	.word	0x2000ca1c
 80020ec:	2000ca08 	.word	0x2000ca08
 80020f0:	2000c8b8 	.word	0x2000c8b8
 80020f4:	2000c9fc 	.word	0x2000c9fc
 80020f8:	2000c8bc 	.word	0x2000c8bc

080020fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d109      	bne.n	8002120 <vTaskPlaceOnEventList+0x24>
 800210c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002110:	f383 8811 	msr	BASEPRI, r3
 8002114:	f3bf 8f6f 	isb	sy
 8002118:	f3bf 8f4f 	dsb	sy
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	e7fe      	b.n	800211e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002120:	4b07      	ldr	r3, [pc, #28]	; (8002140 <vTaskPlaceOnEventList+0x44>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	3318      	adds	r3, #24
 8002126:	4619      	mov	r1, r3
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7fe f8a2 	bl	8000272 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800212e:	2101      	movs	r1, #1
 8002130:	6838      	ldr	r0, [r7, #0]
 8002132:	f000 fb19 	bl	8002768 <prvAddCurrentTaskToDelayedList>
}
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	2000c8b8 	.word	0x2000c8b8

08002144 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d109      	bne.n	800216a <vTaskPlaceOnEventListRestricted+0x26>
 8002156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800215a:	f383 8811 	msr	BASEPRI, r3
 800215e:	f3bf 8f6f 	isb	sy
 8002162:	f3bf 8f4f 	dsb	sy
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	e7fe      	b.n	8002168 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800216a:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <vTaskPlaceOnEventListRestricted+0x50>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	3318      	adds	r3, #24
 8002170:	4619      	mov	r1, r3
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f7fe f859 	bl	800022a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800217e:	f04f 33ff 	mov.w	r3, #4294967295
 8002182:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	68b8      	ldr	r0, [r7, #8]
 8002188:	f000 faee 	bl	8002768 <prvAddCurrentTaskToDelayedList>
	}
 800218c:	bf00      	nop
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	2000c8b8 	.word	0x2000c8b8

08002198 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d109      	bne.n	80021c2 <xTaskRemoveFromEventList+0x2a>
 80021ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b2:	f383 8811 	msr	BASEPRI, r3
 80021b6:	f3bf 8f6f 	isb	sy
 80021ba:	f3bf 8f4f 	dsb	sy
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	e7fe      	b.n	80021c0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	3318      	adds	r3, #24
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe f88c 	bl	80002e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021cc:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <xTaskRemoveFromEventList+0xac>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d11c      	bne.n	800220e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	3304      	adds	r3, #4
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe f883 	bl	80002e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e2:	2201      	movs	r2, #1
 80021e4:	409a      	lsls	r2, r3
 80021e6:	4b18      	ldr	r3, [pc, #96]	; (8002248 <xTaskRemoveFromEventList+0xb0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	4a16      	ldr	r2, [pc, #88]	; (8002248 <xTaskRemoveFromEventList+0xb0>)
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4a13      	ldr	r2, [pc, #76]	; (800224c <xTaskRemoveFromEventList+0xb4>)
 80021fe:	441a      	add	r2, r3
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	3304      	adds	r3, #4
 8002204:	4619      	mov	r1, r3
 8002206:	4610      	mov	r0, r2
 8002208:	f7fe f80f 	bl	800022a <vListInsertEnd>
 800220c:	e005      	b.n	800221a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	3318      	adds	r3, #24
 8002212:	4619      	mov	r1, r3
 8002214:	480e      	ldr	r0, [pc, #56]	; (8002250 <xTaskRemoveFromEventList+0xb8>)
 8002216:	f7fe f808 	bl	800022a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800221e:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <xTaskRemoveFromEventList+0xbc>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002224:	429a      	cmp	r2, r3
 8002226:	d905      	bls.n	8002234 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002228:	2301      	movs	r3, #1
 800222a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800222c:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <xTaskRemoveFromEventList+0xc0>)
 800222e:	2201      	movs	r2, #1
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	e001      	b.n	8002238 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002238:	697b      	ldr	r3, [r7, #20]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	2000ca1c 	.word	0x2000ca1c
 8002248:	2000c9fc 	.word	0x2000c9fc
 800224c:	2000c8bc 	.word	0x2000c8bc
 8002250:	2000c9b4 	.word	0x2000c9b4
 8002254:	2000c8b8 	.word	0x2000c8b8
 8002258:	2000ca08 	.word	0x2000ca08

0800225c <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d109      	bne.n	800227e <vTaskSetTimeOutState+0x22>
 800226a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800226e:	f383 8811 	msr	BASEPRI, r3
 8002272:	f3bf 8f6f 	isb	sy
 8002276:	f3bf 8f4f 	dsb	sy
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	e7fe      	b.n	800227c <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <vTaskSetTimeOutState+0x40>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <vTaskSetTimeOutState+0x44>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	605a      	str	r2, [r3, #4]
}
 800228e:	bf00      	nop
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	2000ca0c 	.word	0x2000ca0c
 80022a0:	2000c9f8 	.word	0x2000c9f8

080022a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d109      	bne.n	80022c8 <xTaskCheckForTimeOut+0x24>
 80022b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b8:	f383 8811 	msr	BASEPRI, r3
 80022bc:	f3bf 8f6f 	isb	sy
 80022c0:	f3bf 8f4f 	dsb	sy
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	e7fe      	b.n	80022c6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d109      	bne.n	80022e2 <xTaskCheckForTimeOut+0x3e>
 80022ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d2:	f383 8811 	msr	BASEPRI, r3
 80022d6:	f3bf 8f6f 	isb	sy
 80022da:	f3bf 8f4f 	dsb	sy
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	e7fe      	b.n	80022e0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80022e2:	f7fe f92d 	bl	8000540 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80022e6:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <xTaskCheckForTimeOut+0xb4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f4:	d102      	bne.n	80022fc <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	e026      	b.n	800234a <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b16      	ldr	r3, [pc, #88]	; (800235c <xTaskCheckForTimeOut+0xb8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d007      	beq.n	8002318 <xTaskCheckForTimeOut+0x74>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	429a      	cmp	r2, r3
 8002310:	d802      	bhi.n	8002318 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002312:	2301      	movs	r3, #1
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	e018      	b.n	800234a <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	1ad2      	subs	r2, r2, r3
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d20e      	bcs.n	8002346 <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6859      	ldr	r1, [r3, #4]
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1acb      	subs	r3, r1, r3
 8002334:	441a      	add	r2, r3
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ff8e 	bl	800225c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	e001      	b.n	800234a <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8002346:	2301      	movs	r3, #1
 8002348:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800234a:	f7fe f927 	bl	800059c <vPortExitCritical>

	return xReturn;
 800234e:	697b      	ldr	r3, [r7, #20]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	2000c9f8 	.word	0x2000c9f8
 800235c:	2000ca0c 	.word	0x2000ca0c

08002360 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <vTaskMissedYield+0x14>)
 8002366:	2201      	movs	r2, #1
 8002368:	601a      	str	r2, [r3, #0]
}
 800236a:	bf00      	nop
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	2000ca08 	.word	0x2000ca08

08002378 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002380:	f000 f854 	bl	800242c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002384:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <prvIdleTask+0x2c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d907      	bls.n	800239c <prvIdleTask+0x24>
			{
				taskYIELD();
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <prvIdleTask+0x30>)
 800238e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	f3bf 8f4f 	dsb	sy
 8002398:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800239c:	f001 fd72 	bl	8003e84 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80023a0:	e7ee      	b.n	8002380 <prvIdleTask+0x8>
 80023a2:	bf00      	nop
 80023a4:	2000c8bc 	.word	0x2000c8bc
 80023a8:	e000ed04 	.word	0xe000ed04

080023ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80023b2:	2300      	movs	r3, #0
 80023b4:	607b      	str	r3, [r7, #4]
 80023b6:	e00c      	b.n	80023d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4a12      	ldr	r2, [pc, #72]	; (800240c <prvInitialiseTaskLists+0x60>)
 80023c4:	4413      	add	r3, r2
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fd ff02 	bl	80001d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3301      	adds	r3, #1
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b09      	cmp	r3, #9
 80023d6:	d9ef      	bls.n	80023b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80023d8:	480d      	ldr	r0, [pc, #52]	; (8002410 <prvInitialiseTaskLists+0x64>)
 80023da:	f7fd fef9 	bl	80001d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80023de:	480d      	ldr	r0, [pc, #52]	; (8002414 <prvInitialiseTaskLists+0x68>)
 80023e0:	f7fd fef6 	bl	80001d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80023e4:	480c      	ldr	r0, [pc, #48]	; (8002418 <prvInitialiseTaskLists+0x6c>)
 80023e6:	f7fd fef3 	bl	80001d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80023ea:	480c      	ldr	r0, [pc, #48]	; (800241c <prvInitialiseTaskLists+0x70>)
 80023ec:	f7fd fef0 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80023f0:	480b      	ldr	r0, [pc, #44]	; (8002420 <prvInitialiseTaskLists+0x74>)
 80023f2:	f7fd feed 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80023f6:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <prvInitialiseTaskLists+0x78>)
 80023f8:	4a05      	ldr	r2, [pc, #20]	; (8002410 <prvInitialiseTaskLists+0x64>)
 80023fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80023fc:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <prvInitialiseTaskLists+0x7c>)
 80023fe:	4a05      	ldr	r2, [pc, #20]	; (8002414 <prvInitialiseTaskLists+0x68>)
 8002400:	601a      	str	r2, [r3, #0]
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	2000c8bc 	.word	0x2000c8bc
 8002410:	2000c984 	.word	0x2000c984
 8002414:	2000c998 	.word	0x2000c998
 8002418:	2000c9b4 	.word	0x2000c9b4
 800241c:	2000c9c8 	.word	0x2000c9c8
 8002420:	2000c9e0 	.word	0x2000c9e0
 8002424:	2000c9ac 	.word	0x2000c9ac
 8002428:	2000c9b0 	.word	0x2000c9b0

0800242c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002432:	e028      	b.n	8002486 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8002434:	f7ff fc6c 	bl	8001d10 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002438:	4b17      	ldr	r3, [pc, #92]	; (8002498 <prvCheckTasksWaitingTermination+0x6c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	bf0c      	ite	eq
 8002440:	2301      	moveq	r3, #1
 8002442:	2300      	movne	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8002448:	f7ff fc70 	bl	8001d2c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d119      	bne.n	8002486 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8002452:	f7fe f875 	bl	8000540 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <prvCheckTasksWaitingTermination+0x6c>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	3304      	adds	r3, #4
 8002462:	4618      	mov	r0, r3
 8002464:	f7fd ff3e 	bl	80002e4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <prvCheckTasksWaitingTermination+0x70>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	3b01      	subs	r3, #1
 800246e:	4a0b      	ldr	r2, [pc, #44]	; (800249c <prvCheckTasksWaitingTermination+0x70>)
 8002470:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002472:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <prvCheckTasksWaitingTermination+0x74>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	3b01      	subs	r3, #1
 8002478:	4a09      	ldr	r2, [pc, #36]	; (80024a0 <prvCheckTasksWaitingTermination+0x74>)
 800247a:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 800247c:	f7fe f88e 	bl	800059c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8002480:	6838      	ldr	r0, [r7, #0]
 8002482:	f000 f80f 	bl	80024a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <prvCheckTasksWaitingTermination+0x74>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1d2      	bne.n	8002434 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	2000c9c8 	.word	0x2000c9c8
 800249c:	2000c9f4 	.word	0x2000c9f4
 80024a0:	2000c9dc 	.word	0x2000c9dc

080024a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe fa1b 	bl	80008ec <vPortFree>
			vPortFree( pxTCB );
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7fe fa18 	bl	80008ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80024bc:	bf00      	nop
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024ca:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <prvResetNextTaskUnblockTime+0x44>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <prvResetNextTaskUnblockTime+0x14>
 80024d4:	2301      	movs	r3, #1
 80024d6:	e000      	b.n	80024da <prvResetNextTaskUnblockTime+0x16>
 80024d8:	2300      	movs	r3, #0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d004      	beq.n	80024e8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <prvResetNextTaskUnblockTime+0x48>)
 80024e0:	f04f 32ff 	mov.w	r2, #4294967295
 80024e4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80024e6:	e008      	b.n	80024fa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80024e8:	4b07      	ldr	r3, [pc, #28]	; (8002508 <prvResetNextTaskUnblockTime+0x44>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	4a05      	ldr	r2, [pc, #20]	; (800250c <prvResetNextTaskUnblockTime+0x48>)
 80024f8:	6013      	str	r3, [r2, #0]
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	2000c9ac 	.word	0x2000c9ac
 800250c:	2000ca14 	.word	0x2000ca14

08002510 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002516:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <xTaskGetSchedulerState+0x34>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d102      	bne.n	8002524 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800251e:	2301      	movs	r3, #1
 8002520:	607b      	str	r3, [r7, #4]
 8002522:	e008      	b.n	8002536 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002524:	4b08      	ldr	r3, [pc, #32]	; (8002548 <xTaskGetSchedulerState+0x38>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d102      	bne.n	8002532 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800252c:	2302      	movs	r3, #2
 800252e:	607b      	str	r3, [r7, #4]
 8002530:	e001      	b.n	8002536 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002532:	2300      	movs	r3, #0
 8002534:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002536:	687b      	ldr	r3, [r7, #4]
	}
 8002538:	4618      	mov	r0, r3
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	2000ca00 	.word	0x2000ca00
 8002548:	2000ca1c 	.word	0x2000ca1c

0800254c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d062      	beq.n	8002624 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002562:	4b32      	ldr	r3, [pc, #200]	; (800262c <vTaskPriorityInherit+0xe0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002568:	429a      	cmp	r2, r3
 800256a:	d25b      	bcs.n	8002624 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	2b00      	cmp	r3, #0
 8002572:	db06      	blt.n	8002582 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002574:	4b2d      	ldr	r3, [pc, #180]	; (800262c <vTaskPriorityInherit+0xe0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257a:	f1c3 020a 	rsb	r2, r3, #10
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6959      	ldr	r1, [r3, #20]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4a27      	ldr	r2, [pc, #156]	; (8002630 <vTaskPriorityInherit+0xe4>)
 8002594:	4413      	add	r3, r2
 8002596:	4299      	cmp	r1, r3
 8002598:	d101      	bne.n	800259e <vTaskPriorityInherit+0x52>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <vTaskPriorityInherit+0x54>
 800259e:	2300      	movs	r3, #0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d03a      	beq.n	800261a <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	3304      	adds	r3, #4
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fd fe9b 	bl	80002e4 <uxListRemove>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d115      	bne.n	80025e0 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b8:	491d      	ldr	r1, [pc, #116]	; (8002630 <vTaskPriorityInherit+0xe4>)
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10a      	bne.n	80025e0 <vTaskPriorityInherit+0x94>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	2201      	movs	r2, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43da      	mvns	r2, r3
 80025d6:	4b17      	ldr	r3, [pc, #92]	; (8002634 <vTaskPriorityInherit+0xe8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4013      	ands	r3, r2
 80025dc:	4a15      	ldr	r2, [pc, #84]	; (8002634 <vTaskPriorityInherit+0xe8>)
 80025de:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80025e0:	4b12      	ldr	r3, [pc, #72]	; (800262c <vTaskPriorityInherit+0xe0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ee:	2201      	movs	r2, #1
 80025f0:	409a      	lsls	r2, r3
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <vTaskPriorityInherit+0xe8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	4a0e      	ldr	r2, [pc, #56]	; (8002634 <vTaskPriorityInherit+0xe8>)
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4a09      	ldr	r2, [pc, #36]	; (8002630 <vTaskPriorityInherit+0xe4>)
 800260a:	441a      	add	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	3304      	adds	r3, #4
 8002610:	4619      	mov	r1, r3
 8002612:	4610      	mov	r0, r2
 8002614:	f7fd fe09 	bl	800022a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002618:	e004      	b.n	8002624 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800261a:	4b04      	ldr	r3, [pc, #16]	; (800262c <vTaskPriorityInherit+0xe0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8002624:	bf00      	nop
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	2000c8b8 	.word	0x2000c8b8
 8002630:	2000c8bc 	.word	0x2000c8bc
 8002634:	2000c9fc 	.word	0x2000c9fc

08002638 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d06c      	beq.n	8002728 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800264e:	4b39      	ldr	r3, [pc, #228]	; (8002734 <xTaskPriorityDisinherit+0xfc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	429a      	cmp	r2, r3
 8002656:	d009      	beq.n	800266c <xTaskPriorityDisinherit+0x34>
 8002658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265c:	f383 8811 	msr	BASEPRI, r3
 8002660:	f3bf 8f6f 	isb	sy
 8002664:	f3bf 8f4f 	dsb	sy
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	e7fe      	b.n	800266a <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002670:	2b00      	cmp	r3, #0
 8002672:	d109      	bne.n	8002688 <xTaskPriorityDisinherit+0x50>
 8002674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002678:	f383 8811 	msr	BASEPRI, r3
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	e7fe      	b.n	8002686 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268c:	1e5a      	subs	r2, r3, #1
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	429a      	cmp	r2, r3
 800269c:	d044      	beq.n	8002728 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d140      	bne.n	8002728 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	3304      	adds	r3, #4
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fd fe1a 	bl	80002e4 <uxListRemove>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d115      	bne.n	80026e2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ba:	491f      	ldr	r1, [pc, #124]	; (8002738 <xTaskPriorityDisinherit+0x100>)
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10a      	bne.n	80026e2 <xTaskPriorityDisinherit+0xaa>
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	2201      	movs	r2, #1
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43da      	mvns	r2, r3
 80026d8:	4b18      	ldr	r3, [pc, #96]	; (800273c <xTaskPriorityDisinherit+0x104>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4013      	ands	r3, r2
 80026de:	4a17      	ldr	r2, [pc, #92]	; (800273c <xTaskPriorityDisinherit+0x104>)
 80026e0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ee:	f1c3 020a 	rsb	r2, r3, #10
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fa:	2201      	movs	r2, #1
 80026fc:	409a      	lsls	r2, r3
 80026fe:	4b0f      	ldr	r3, [pc, #60]	; (800273c <xTaskPriorityDisinherit+0x104>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4313      	orrs	r3, r2
 8002704:	4a0d      	ldr	r2, [pc, #52]	; (800273c <xTaskPriorityDisinherit+0x104>)
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4a08      	ldr	r2, [pc, #32]	; (8002738 <xTaskPriorityDisinherit+0x100>)
 8002716:	441a      	add	r2, r3
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	3304      	adds	r3, #4
 800271c:	4619      	mov	r1, r3
 800271e:	4610      	mov	r0, r2
 8002720:	f7fd fd83 	bl	800022a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002724:	2301      	movs	r3, #1
 8002726:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002728:	697b      	ldr	r3, [r7, #20]
	}
 800272a:	4618      	mov	r0, r3
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	2000c8b8 	.word	0x2000c8b8
 8002738:	2000c8bc 	.word	0x2000c8bc
 800273c:	2000c9fc 	.word	0x2000c9fc

08002740 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002744:	4b07      	ldr	r3, [pc, #28]	; (8002764 <pvTaskIncrementMutexHeldCount+0x24>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d004      	beq.n	8002756 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <pvTaskIncrementMutexHeldCount+0x24>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002752:	3201      	adds	r2, #1
 8002754:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 8002756:	4b03      	ldr	r3, [pc, #12]	; (8002764 <pvTaskIncrementMutexHeldCount+0x24>)
 8002758:	681b      	ldr	r3, [r3, #0]
	}
 800275a:	4618      	mov	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	2000c8b8 	.word	0x2000c8b8

08002768 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002772:	4b29      	ldr	r3, [pc, #164]	; (8002818 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002778:	4b28      	ldr	r3, [pc, #160]	; (800281c <prvAddCurrentTaskToDelayedList+0xb4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	3304      	adds	r3, #4
 800277e:	4618      	mov	r0, r3
 8002780:	f7fd fdb0 	bl	80002e4 <uxListRemove>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10b      	bne.n	80027a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800278a:	4b24      	ldr	r3, [pc, #144]	; (800281c <prvAddCurrentTaskToDelayedList+0xb4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	2201      	movs	r2, #1
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43da      	mvns	r2, r3
 8002798:	4b21      	ldr	r3, [pc, #132]	; (8002820 <prvAddCurrentTaskToDelayedList+0xb8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4013      	ands	r3, r2
 800279e:	4a20      	ldr	r2, [pc, #128]	; (8002820 <prvAddCurrentTaskToDelayedList+0xb8>)
 80027a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a8:	d10a      	bne.n	80027c0 <prvAddCurrentTaskToDelayedList+0x58>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d007      	beq.n	80027c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027b0:	4b1a      	ldr	r3, [pc, #104]	; (800281c <prvAddCurrentTaskToDelayedList+0xb4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	3304      	adds	r3, #4
 80027b6:	4619      	mov	r1, r3
 80027b8:	481a      	ldr	r0, [pc, #104]	; (8002824 <prvAddCurrentTaskToDelayedList+0xbc>)
 80027ba:	f7fd fd36 	bl	800022a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80027be:	e026      	b.n	800280e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4413      	add	r3, r2
 80027c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80027c8:	4b14      	ldr	r3, [pc, #80]	; (800281c <prvAddCurrentTaskToDelayedList+0xb4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d209      	bcs.n	80027ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027d8:	4b13      	ldr	r3, [pc, #76]	; (8002828 <prvAddCurrentTaskToDelayedList+0xc0>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4b0f      	ldr	r3, [pc, #60]	; (800281c <prvAddCurrentTaskToDelayedList+0xb4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	3304      	adds	r3, #4
 80027e2:	4619      	mov	r1, r3
 80027e4:	4610      	mov	r0, r2
 80027e6:	f7fd fd44 	bl	8000272 <vListInsert>
}
 80027ea:	e010      	b.n	800280e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027ec:	4b0f      	ldr	r3, [pc, #60]	; (800282c <prvAddCurrentTaskToDelayedList+0xc4>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	4b0a      	ldr	r3, [pc, #40]	; (800281c <prvAddCurrentTaskToDelayedList+0xb4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	3304      	adds	r3, #4
 80027f6:	4619      	mov	r1, r3
 80027f8:	4610      	mov	r0, r2
 80027fa:	f7fd fd3a 	bl	8000272 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80027fe:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	429a      	cmp	r2, r3
 8002806:	d202      	bcs.n	800280e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002808:	4a09      	ldr	r2, [pc, #36]	; (8002830 <prvAddCurrentTaskToDelayedList+0xc8>)
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	6013      	str	r3, [r2, #0]
}
 800280e:	bf00      	nop
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	2000c9f8 	.word	0x2000c9f8
 800281c:	2000c8b8 	.word	0x2000c8b8
 8002820:	2000c9fc 	.word	0x2000c9fc
 8002824:	2000c9e0 	.word	0x2000c9e0
 8002828:	2000c9b0 	.word	0x2000c9b0
 800282c:	2000c9ac 	.word	0x2000c9ac
 8002830:	2000ca14 	.word	0x2000ca14

08002834 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800283a:	2300      	movs	r3, #0
 800283c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800283e:	f000 fa8f 	bl	8002d60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002842:	4b11      	ldr	r3, [pc, #68]	; (8002888 <xTimerCreateTimerTask+0x54>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00b      	beq.n	8002862 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800284a:	4b10      	ldr	r3, [pc, #64]	; (800288c <xTimerCreateTimerTask+0x58>)
 800284c:	9301      	str	r3, [sp, #4]
 800284e:	2304      	movs	r3, #4
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	2300      	movs	r3, #0
 8002854:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002858:	490d      	ldr	r1, [pc, #52]	; (8002890 <xTimerCreateTimerTask+0x5c>)
 800285a:	480e      	ldr	r0, [pc, #56]	; (8002894 <xTimerCreateTimerTask+0x60>)
 800285c:	f7fe fe32 	bl	80014c4 <xTaskCreate>
 8002860:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d109      	bne.n	800287c <xTimerCreateTimerTask+0x48>
 8002868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286c:	f383 8811 	msr	BASEPRI, r3
 8002870:	f3bf 8f6f 	isb	sy
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	603b      	str	r3, [r7, #0]
 800287a:	e7fe      	b.n	800287a <xTimerCreateTimerTask+0x46>
	return xReturn;
 800287c:	687b      	ldr	r3, [r7, #4]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	2000ca50 	.word	0x2000ca50
 800288c:	2000ca54 	.word	0x2000ca54
 8002890:	08004f78 	.word	0x08004f78
 8002894:	080029b1 	.word	0x080029b1

08002898 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08a      	sub	sp, #40	; 0x28
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d109      	bne.n	80028c4 <xTimerGenericCommand+0x2c>
 80028b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b4:	f383 8811 	msr	BASEPRI, r3
 80028b8:	f3bf 8f6f 	isb	sy
 80028bc:	f3bf 8f4f 	dsb	sy
 80028c0:	623b      	str	r3, [r7, #32]
 80028c2:	e7fe      	b.n	80028c2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80028c4:	4b19      	ldr	r3, [pc, #100]	; (800292c <xTimerGenericCommand+0x94>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d02a      	beq.n	8002922 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2b05      	cmp	r3, #5
 80028dc:	dc18      	bgt.n	8002910 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80028de:	f7ff fe17 	bl	8002510 <xTaskGetSchedulerState>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d109      	bne.n	80028fc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80028e8:	4b10      	ldr	r3, [pc, #64]	; (800292c <xTimerGenericCommand+0x94>)
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	f107 0114 	add.w	r1, r7, #20
 80028f0:	2300      	movs	r3, #0
 80028f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028f4:	f7fe f9da 	bl	8000cac <xQueueGenericSend>
 80028f8:	6278      	str	r0, [r7, #36]	; 0x24
 80028fa:	e012      	b.n	8002922 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80028fc:	4b0b      	ldr	r3, [pc, #44]	; (800292c <xTimerGenericCommand+0x94>)
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	f107 0114 	add.w	r1, r7, #20
 8002904:	2300      	movs	r3, #0
 8002906:	2200      	movs	r2, #0
 8002908:	f7fe f9d0 	bl	8000cac <xQueueGenericSend>
 800290c:	6278      	str	r0, [r7, #36]	; 0x24
 800290e:	e008      	b.n	8002922 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002910:	4b06      	ldr	r3, [pc, #24]	; (800292c <xTimerGenericCommand+0x94>)
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	f107 0114 	add.w	r1, r7, #20
 8002918:	2300      	movs	r3, #0
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	f7fe fac0 	bl	8000ea0 <xQueueGenericSendFromISR>
 8002920:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002924:	4618      	mov	r0, r3
 8002926:	3728      	adds	r7, #40	; 0x28
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	2000ca50 	.word	0x2000ca50

08002930 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af02      	add	r7, sp, #8
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800293a:	4b1c      	ldr	r3, [pc, #112]	; (80029ac <prvProcessExpiredTimer+0x7c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	3304      	adds	r3, #4
 8002948:	4618      	mov	r0, r3
 800294a:	f7fd fccb 	bl	80002e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d121      	bne.n	800299a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	699a      	ldr	r2, [r3, #24]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	18d1      	adds	r1, r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	6978      	ldr	r0, [r7, #20]
 8002964:	f000 f8c8 	bl	8002af8 <prvInsertTimerInActiveList>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d015      	beq.n	800299a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800296e:	2300      	movs	r3, #0
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	2300      	movs	r3, #0
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	2100      	movs	r1, #0
 8002978:	6978      	ldr	r0, [r7, #20]
 800297a:	f7ff ff8d 	bl	8002898 <xTimerGenericCommand>
 800297e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <prvProcessExpiredTimer+0x6a>
 8002986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298a:	f383 8811 	msr	BASEPRI, r3
 800298e:	f3bf 8f6f 	isb	sy
 8002992:	f3bf 8f4f 	dsb	sy
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	e7fe      	b.n	8002998 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	6978      	ldr	r0, [r7, #20]
 80029a0:	4798      	blx	r3
}
 80029a2:	bf00      	nop
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	2000ca48 	.word	0x2000ca48

080029b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80029b8:	f107 0308 	add.w	r3, r7, #8
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 f857 	bl	8002a70 <prvGetNextExpireTime>
 80029c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	4619      	mov	r1, r3
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 f803 	bl	80029d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80029ce:	f000 f8d5 	bl	8002b7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80029d2:	e7f1      	b.n	80029b8 <prvTimerTask+0x8>

080029d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80029de:	f7ff f997 	bl	8001d10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80029e2:	f107 0308 	add.w	r3, r7, #8
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 f866 	bl	8002ab8 <prvSampleTimeNow>
 80029ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d130      	bne.n	8002a56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10a      	bne.n	8002a10 <prvProcessTimerOrBlockTask+0x3c>
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d806      	bhi.n	8002a10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002a02:	f7ff f993 	bl	8001d2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002a06:	68f9      	ldr	r1, [r7, #12]
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ff91 	bl	8002930 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002a0e:	e024      	b.n	8002a5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d008      	beq.n	8002a28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002a16:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <prvProcessTimerOrBlockTask+0x90>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	bf0c      	ite	eq
 8002a20:	2301      	moveq	r3, #1
 8002a22:	2300      	movne	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002a28:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <prvProcessTimerOrBlockTask+0x94>)
 8002a2a:	6818      	ldr	r0, [r3, #0]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	4619      	mov	r1, r3
 8002a36:	f7fe fd11 	bl	800145c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002a3a:	f7ff f977 	bl	8001d2c <xTaskResumeAll>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10a      	bne.n	8002a5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <prvProcessTimerOrBlockTask+0x98>)
 8002a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	f3bf 8f6f 	isb	sy
}
 8002a54:	e001      	b.n	8002a5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002a56:	f7ff f969 	bl	8001d2c <xTaskResumeAll>
}
 8002a5a:	bf00      	nop
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	2000ca4c 	.word	0x2000ca4c
 8002a68:	2000ca50 	.word	0x2000ca50
 8002a6c:	e000ed04 	.word	0xe000ed04

08002a70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002a78:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <prvGetNextExpireTime+0x44>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	bf0c      	ite	eq
 8002a82:	2301      	moveq	r3, #1
 8002a84:	2300      	movne	r3, #0
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d105      	bne.n	8002aa2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a96:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <prvGetNextExpireTime+0x44>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	e001      	b.n	8002aa6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	2000ca48 	.word	0x2000ca48

08002ab8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002ac0:	f7ff f9d0 	bl	8001e64 <xTaskGetTickCount>
 8002ac4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002ac6:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <prvSampleTimeNow+0x3c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d205      	bcs.n	8002adc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002ad0:	f000 f8e6 	bl	8002ca0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	e002      	b.n	8002ae2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002ae2:	4a04      	ldr	r2, [pc, #16]	; (8002af4 <prvSampleTimeNow+0x3c>)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	2000ca58 	.word	0x2000ca58

08002af8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d812      	bhi.n	8002b44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	1ad2      	subs	r2, r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d302      	bcc.n	8002b32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	e01b      	b.n	8002b6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002b32:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <prvInsertTimerInActiveList+0x7c>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3304      	adds	r3, #4
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	f7fd fb98 	bl	8000272 <vListInsert>
 8002b42:	e012      	b.n	8002b6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d206      	bcs.n	8002b5a <prvInsertTimerInActiveList+0x62>
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d302      	bcc.n	8002b5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002b54:	2301      	movs	r3, #1
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	e007      	b.n	8002b6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002b5a:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <prvInsertTimerInActiveList+0x80>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	3304      	adds	r3, #4
 8002b62:	4619      	mov	r1, r3
 8002b64:	4610      	mov	r0, r2
 8002b66:	f7fd fb84 	bl	8000272 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002b6a:	697b      	ldr	r3, [r7, #20]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	2000ca4c 	.word	0x2000ca4c
 8002b78:	2000ca48 	.word	0x2000ca48

08002b7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08c      	sub	sp, #48	; 0x30
 8002b80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002b82:	e07a      	b.n	8002c7a <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	db77      	blt.n	8002c7a <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d004      	beq.n	8002ba0 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	3304      	adds	r3, #4
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fd fba2 	bl	80002e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002ba0:	1d3b      	adds	r3, r7, #4
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff ff88 	bl	8002ab8 <prvSampleTimeNow>
 8002ba8:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b09      	cmp	r3, #9
 8002bae:	d863      	bhi.n	8002c78 <prvProcessReceivedCommands+0xfc>
 8002bb0:	a201      	add	r2, pc, #4	; (adr r2, 8002bb8 <prvProcessReceivedCommands+0x3c>)
 8002bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb6:	bf00      	nop
 8002bb8:	08002be1 	.word	0x08002be1
 8002bbc:	08002be1 	.word	0x08002be1
 8002bc0:	08002be1 	.word	0x08002be1
 8002bc4:	08002c7b 	.word	0x08002c7b
 8002bc8:	08002c3b 	.word	0x08002c3b
 8002bcc:	08002c71 	.word	0x08002c71
 8002bd0:	08002be1 	.word	0x08002be1
 8002bd4:	08002be1 	.word	0x08002be1
 8002bd8:	08002c7b 	.word	0x08002c7b
 8002bdc:	08002c3b 	.word	0x08002c3b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	18d1      	adds	r1, r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a3a      	ldr	r2, [r7, #32]
 8002bec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bee:	f7ff ff83 	bl	8002af8 <prvInsertTimerInActiveList>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d040      	beq.n	8002c7a <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bfe:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d138      	bne.n	8002c7a <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	441a      	add	r2, r3
 8002c10:	2300      	movs	r3, #0
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	2300      	movs	r3, #0
 8002c16:	2100      	movs	r1, #0
 8002c18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c1a:	f7ff fe3d 	bl	8002898 <xTimerGenericCommand>
 8002c1e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d129      	bne.n	8002c7a <prvProcessReceivedCommands+0xfe>
 8002c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2a:	f383 8811 	msr	BASEPRI, r3
 8002c2e:	f3bf 8f6f 	isb	sy
 8002c32:	f3bf 8f4f 	dsb	sy
 8002c36:	61bb      	str	r3, [r7, #24]
 8002c38:	e7fe      	b.n	8002c38 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d109      	bne.n	8002c5c <prvProcessReceivedCommands+0xe0>
 8002c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4c:	f383 8811 	msr	BASEPRI, r3
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	e7fe      	b.n	8002c5a <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	699a      	ldr	r2, [r3, #24]
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	18d1      	adds	r1, r2, r3
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	6a3a      	ldr	r2, [r7, #32]
 8002c68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c6a:	f7ff ff45 	bl	8002af8 <prvInsertTimerInActiveList>
					break;
 8002c6e:	e004      	b.n	8002c7a <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8002c70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c72:	f7fd fe3b 	bl	80008ec <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002c76:	e000      	b.n	8002c7a <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
 8002c78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002c7a:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <prvProcessReceivedCommands+0x120>)
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	f107 0108 	add.w	r1, r7, #8
 8002c82:	2300      	movs	r3, #0
 8002c84:	2200      	movs	r2, #0
 8002c86:	f7fe f99f 	bl	8000fc8 <xQueueGenericReceive>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f47f af79 	bne.w	8002b84 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8002c92:	bf00      	nop
 8002c94:	3728      	adds	r7, #40	; 0x28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	2000ca50 	.word	0x2000ca50

08002ca0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002ca6:	e044      	b.n	8002d32 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002ca8:	4b2b      	ldr	r3, [pc, #172]	; (8002d58 <prvSwitchTimerLists+0xb8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002cb2:	4b29      	ldr	r3, [pc, #164]	; (8002d58 <prvSwitchTimerLists+0xb8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd fb0f 	bl	80002e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	6938      	ldr	r0, [r7, #16]
 8002ccc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d12d      	bne.n	8002d32 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	4413      	add	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d90e      	bls.n	8002d06 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002cf4:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <prvSwitchTimerLists+0xb8>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4610      	mov	r0, r2
 8002d00:	f7fd fab7 	bl	8000272 <vListInsert>
 8002d04:	e015      	b.n	8002d32 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002d06:	2300      	movs	r3, #0
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	2100      	movs	r1, #0
 8002d10:	6938      	ldr	r0, [r7, #16]
 8002d12:	f7ff fdc1 	bl	8002898 <xTimerGenericCommand>
 8002d16:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d109      	bne.n	8002d32 <prvSwitchTimerLists+0x92>
 8002d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d22:	f383 8811 	msr	BASEPRI, r3
 8002d26:	f3bf 8f6f 	isb	sy
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	e7fe      	b.n	8002d30 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002d32:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <prvSwitchTimerLists+0xb8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1b5      	bne.n	8002ca8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <prvSwitchTimerLists+0xb8>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8002d42:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <prvSwitchTimerLists+0xbc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a04      	ldr	r2, [pc, #16]	; (8002d58 <prvSwitchTimerLists+0xb8>)
 8002d48:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002d4a:	4a04      	ldr	r2, [pc, #16]	; (8002d5c <prvSwitchTimerLists+0xbc>)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6013      	str	r3, [r2, #0]
}
 8002d50:	bf00      	nop
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	2000ca48 	.word	0x2000ca48
 8002d5c:	2000ca4c 	.word	0x2000ca4c

08002d60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002d64:	f7fd fbec 	bl	8000540 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002d68:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <prvCheckForValidListAndQueue+0x54>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d11d      	bne.n	8002dac <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002d70:	4811      	ldr	r0, [pc, #68]	; (8002db8 <prvCheckForValidListAndQueue+0x58>)
 8002d72:	f7fd fa2d 	bl	80001d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002d76:	4811      	ldr	r0, [pc, #68]	; (8002dbc <prvCheckForValidListAndQueue+0x5c>)
 8002d78:	f7fd fa2a 	bl	80001d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002d7c:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <prvCheckForValidListAndQueue+0x60>)
 8002d7e:	4a0e      	ldr	r2, [pc, #56]	; (8002db8 <prvCheckForValidListAndQueue+0x58>)
 8002d80:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <prvCheckForValidListAndQueue+0x64>)
 8002d84:	4a0d      	ldr	r2, [pc, #52]	; (8002dbc <prvCheckForValidListAndQueue+0x5c>)
 8002d86:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002d88:	2200      	movs	r2, #0
 8002d8a:	210c      	movs	r1, #12
 8002d8c:	2005      	movs	r0, #5
 8002d8e:	f7fd ff35 	bl	8000bfc <xQueueGenericCreate>
 8002d92:	4602      	mov	r2, r0
 8002d94:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <prvCheckForValidListAndQueue+0x54>)
 8002d96:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002d98:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <prvCheckForValidListAndQueue+0x54>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002da0:	4b04      	ldr	r3, [pc, #16]	; (8002db4 <prvCheckForValidListAndQueue+0x54>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4908      	ldr	r1, [pc, #32]	; (8002dc8 <prvCheckForValidListAndQueue+0x68>)
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fe fb30 	bl	800140c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002dac:	f7fd fbf6 	bl	800059c <vPortExitCritical>
}
 8002db0:	bf00      	nop
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	2000ca50 	.word	0x2000ca50
 8002db8:	2000ca20 	.word	0x2000ca20
 8002dbc:	2000ca34 	.word	0x2000ca34
 8002dc0:	2000ca48 	.word	0x2000ca48
 8002dc4:	2000ca4c 	.word	0x2000ca4c
 8002dc8:	08004f80 	.word	0x08004f80

08002dcc <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8002ddc:	4b08      	ldr	r3, [pc, #32]	; (8002e00 <DAC_SetChannel1Data+0x34>)
 8002dde:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	3308      	adds	r3, #8
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	461a      	mov	r2, r3
 8002dee:	887b      	ldrh	r3, [r7, #2]
 8002df0:	6013      	str	r3, [r2, #0]
}
 8002df2:	bf00      	nop
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	40007400 	.word	0x40007400

08002e04 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4b25      	ldr	r3, [pc, #148]	; (8002eb0 <DMA_Init+0xac>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002e2e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002e3a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002e46:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002e52:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f023 0307 	bic.w	r3, r3, #7
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	691a      	ldr	r2, [r3, #16]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	60da      	str	r2, [r3, #12]
}
 8002ea2:	bf00      	nop
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	f01c803f 	.word	0xf01c803f

08002eb4 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d006      	beq.n	8002ed4 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f043 0201 	orr.w	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8002ed2:	e005      	b.n	8002ee0 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f023 0201 	bic.w	r2, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	601a      	str	r2, [r3, #0]
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
 8002f08:	e001      	b.n	8002f0e <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8002f26:	2300      	movs	r3, #0
 8002f28:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a15      	ldr	r2, [pc, #84]	; (8002f88 <DMA_GetFlagStatus+0x6c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d802      	bhi.n	8002f3c <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002f36:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <DMA_GetFlagStatus+0x70>)
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	e001      	b.n	8002f40 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002f3c:	4b14      	ldr	r3, [pc, #80]	; (8002f90 <DMA_GetFlagStatus+0x74>)
 8002f3e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	e002      	b.n	8002f58 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002f5e:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	75fb      	strb	r3, [r7, #23]
 8002f72:	e001      	b.n	8002f78 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8002f74:	2300      	movs	r3, #0
 8002f76:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	371c      	adds	r7, #28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	4002640f 	.word	0x4002640f
 8002f8c:	40026000 	.word	0x40026000
 8002f90:	40026400 	.word	0x40026400

08002f94 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a10      	ldr	r2, [pc, #64]	; (8002fe4 <DMA_ClearFlag+0x50>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d802      	bhi.n	8002fac <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <DMA_ClearFlag+0x54>)
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	e001      	b.n	8002fb0 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002fac:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <DMA_ClearFlag+0x58>)
 8002fae:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d007      	beq.n	8002fca <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002fc0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8002fc8:	e006      	b.n	8002fd8 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002fd0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	6093      	str	r3, [r2, #8]
}
 8002fd8:	bf00      	nop
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	4002640f 	.word	0x4002640f
 8002fe8:	40026000 	.word	0x40026000
 8002fec:	40026400 	.word	0x40026400

08002ff0 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	887a      	ldrh	r2, [r7, #2]
 8003000:	819a      	strh	r2, [r3, #12]
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800300e:	b480      	push	{r7}
 8003010:	b085      	sub	sp, #20
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
 8003016:	460b      	mov	r3, r1
 8003018:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800301a:	2300      	movs	r3, #0
 800301c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	891b      	ldrh	r3, [r3, #8]
 8003022:	b29a      	uxth	r2, r3
 8003024:	887b      	ldrh	r3, [r7, #2]
 8003026:	4013      	ands	r3, r2
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800302e:	2301      	movs	r3, #1
 8003030:	73fb      	strb	r3, [r7, #15]
 8003032:	e001      	b.n	8003038 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8003034:	2300      	movs	r3, #0
 8003036:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8003038:	7bfb      	ldrb	r3, [r7, #15]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 800304c:	4b38      	ldr	r3, [pc, #224]	; (8003130 <Audio_MAL_IRQHandler+0xe8>)
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	4b38      	ldr	r3, [pc, #224]	; (8003134 <Audio_MAL_IRQHandler+0xec>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4619      	mov	r1, r3
 8003056:	4610      	mov	r0, r2
 8003058:	f7ff ff60 	bl	8002f1c <DMA_GetFlagStatus>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d064      	beq.n	800312c <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8003062:	4b35      	ldr	r3, [pc, #212]	; (8003138 <Audio_MAL_IRQHandler+0xf0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d04c      	beq.n	8003104 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 800306a:	bf00      	nop
 800306c:	4b30      	ldr	r3, [pc, #192]	; (8003130 <Audio_MAL_IRQHandler+0xe8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff ff3b 	bl	8002eec <DMA_GetCmdStatus>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f7      	bne.n	800306c <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 800307c:	4b2c      	ldr	r3, [pc, #176]	; (8003130 <Audio_MAL_IRQHandler+0xe8>)
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	4b2c      	ldr	r3, [pc, #176]	; (8003134 <Audio_MAL_IRQHandler+0xec>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4619      	mov	r1, r3
 8003086:	4610      	mov	r0, r2
 8003088:	f7ff ff84 	bl	8002f94 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 800308c:	4b2b      	ldr	r3, [pc, #172]	; (800313c <Audio_MAL_IRQHandler+0xf4>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	461a      	mov	r2, r3
 8003092:	4b2b      	ldr	r3, [pc, #172]	; (8003140 <Audio_MAL_IRQHandler+0xf8>)
 8003094:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8003096:	4b28      	ldr	r3, [pc, #160]	; (8003138 <Audio_MAL_IRQHandler+0xf0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800309e:	4293      	cmp	r3, r2
 80030a0:	bf28      	it	cs
 80030a2:	4613      	movcs	r3, r2
 80030a4:	4a26      	ldr	r2, [pc, #152]	; (8003140 <Audio_MAL_IRQHandler+0xf8>)
 80030a6:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80030a8:	4b21      	ldr	r3, [pc, #132]	; (8003130 <Audio_MAL_IRQHandler+0xe8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4924      	ldr	r1, [pc, #144]	; (8003140 <Audio_MAL_IRQHandler+0xf8>)
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff fea8 	bl	8002e04 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 80030b4:	4b1e      	ldr	r3, [pc, #120]	; (8003130 <Audio_MAL_IRQHandler+0xe8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2101      	movs	r1, #1
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff fefa 	bl	8002eb4 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 80030c0:	4b1e      	ldr	r3, [pc, #120]	; (800313c <Audio_MAL_IRQHandler+0xf4>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b1c      	ldr	r3, [pc, #112]	; (8003138 <Audio_MAL_IRQHandler+0xf0>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030cc:	d203      	bcs.n	80030d6 <Audio_MAL_IRQHandler+0x8e>
 80030ce:	4b1a      	ldr	r3, [pc, #104]	; (8003138 <Audio_MAL_IRQHandler+0xf0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	e000      	b.n	80030d8 <Audio_MAL_IRQHandler+0x90>
 80030d6:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <Audio_MAL_IRQHandler+0xfc>)
 80030d8:	4413      	add	r3, r2
 80030da:	4a18      	ldr	r2, [pc, #96]	; (800313c <Audio_MAL_IRQHandler+0xf4>)
 80030dc:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80030de:	4b16      	ldr	r3, [pc, #88]	; (8003138 <Audio_MAL_IRQHandler+0xf0>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	4b15      	ldr	r3, [pc, #84]	; (8003138 <Audio_MAL_IRQHandler+0xf0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030ea:	428b      	cmp	r3, r1
 80030ec:	bf28      	it	cs
 80030ee:	460b      	movcs	r3, r1
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	4a11      	ldr	r2, [pc, #68]	; (8003138 <Audio_MAL_IRQHandler+0xf0>)
 80030f4:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80030f6:	4b0e      	ldr	r3, [pc, #56]	; (8003130 <Audio_MAL_IRQHandler+0xe8>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2101      	movs	r1, #1
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff fed9 	bl	8002eb4 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8003102:	e013      	b.n	800312c <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8003104:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <Audio_MAL_IRQHandler+0xe8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2100      	movs	r1, #0
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fed2 	bl	8002eb4 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8003110:	4b07      	ldr	r3, [pc, #28]	; (8003130 <Audio_MAL_IRQHandler+0xe8>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	4b07      	ldr	r3, [pc, #28]	; (8003134 <Audio_MAL_IRQHandler+0xec>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4619      	mov	r1, r3
 800311a:	4610      	mov	r0, r2
 800311c:	f7ff ff3a 	bl	8002f94 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8003120:	4b06      	ldr	r3, [pc, #24]	; (800313c <Audio_MAL_IRQHandler+0xf4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2100      	movs	r1, #0
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fb9a 	bl	8003860 <EVAL_AUDIO_TransferComplete_CallBack>
}
 800312c:	bf00      	nop
 800312e:	bd80      	pop	{r7, pc}
 8003130:	2000000c 	.word	0x2000000c
 8003134:	20000010 	.word	0x20000010
 8003138:	20000004 	.word	0x20000004
 800313c:	2000caa8 	.word	0x2000caa8
 8003140:	2000cae8 	.word	0x2000cae8
 8003144:	0001fffe 	.word	0x0001fffe

08003148 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 800314c:	f7ff ff7c 	bl	8003048 <Audio_MAL_IRQHandler>
}
 8003150:	bf00      	nop
 8003152:	bd80      	pop	{r7, pc}

08003154 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8003158:	f7ff ff76 	bl	8003048 <Audio_MAL_IRQHandler>
}
 800315c:	bf00      	nop
 800315e:	bd80      	pop	{r7, pc}

08003160 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8003164:	2102      	movs	r1, #2
 8003166:	480d      	ldr	r0, [pc, #52]	; (800319c <SPI3_IRQHandler+0x3c>)
 8003168:	f7ff ff51 	bl	800300e <SPI_I2S_GetFlagStatus>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d011      	beq.n	8003196 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8003172:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <SPI3_IRQHandler+0x40>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d106      	bne.n	8003188 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 800317a:	f000 fb7c 	bl	8003876 <EVAL_AUDIO_GetSampleCallBack>
 800317e:	4603      	mov	r3, r0
 8003180:	4619      	mov	r1, r3
 8003182:	2004      	movs	r0, #4
 8003184:	f7ff fe22 	bl	8002dcc <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8003188:	f000 fb75 	bl	8003876 <EVAL_AUDIO_GetSampleCallBack>
 800318c:	4603      	mov	r3, r0
 800318e:	4619      	mov	r1, r3
 8003190:	4802      	ldr	r0, [pc, #8]	; (800319c <SPI3_IRQHandler+0x3c>)
 8003192:	f7ff ff2d 	bl	8002ff0 <SPI_I2S_SendData>
  }
}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40003c00 	.word	0x40003c00
 80031a0:	20000008 	.word	0x20000008

080031a4 <DDS_Task>:
 * Implements the EDF algorithm and controls the
 * priorities of user-defined F-tasks from an actively-managed list of DD-Tasks
 *
 */

void DDS_Task(void *pvParameters) {
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]

	debugPrint("\n");
 80031ac:	200a      	movs	r0, #10
 80031ae:	f001 fa27 	bl	8004600 <putchar>
	debugPrint("Starting Scheduler:");
 80031b2:	484a      	ldr	r0, [pc, #296]	; (80032dc <DDS_Task+0x138>)
 80031b4:	f001 f9a2 	bl	80044fc <printf>
	debugPrint("\n");
 80031b8:	200a      	movs	r0, #10
 80031ba:	f001 fa21 	bl	8004600 <putchar>
	debugPrint("\n");
 80031be:	200a      	movs	r0, #10
 80031c0:	f001 fa1e 	bl	8004600 <putchar>

	DD_Message_t msg;

	pTaskHandle_t recievedTask = NULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61fb      	str	r3, [r7, #28]

	while (1) {

		if ( xQueueReceive(xDDS_Msg_Queue, (void* )&msg,
 80031c8:	4b45      	ldr	r3, [pc, #276]	; (80032e0 <DDS_Task+0x13c>)
 80031ca:	6818      	ldr	r0, [r3, #0]
 80031cc:	f107 0108 	add.w	r1, r7, #8
 80031d0:	2300      	movs	r3, #0
 80031d2:	f04f 32ff 	mov.w	r2, #4294967295
 80031d6:	f7fd fef7 	bl	8000fc8 <xQueueGenericReceive>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d1f3      	bne.n	80031c8 <DDS_Task+0x24>
				portMAX_DELAY) == pdTRUE) {

			recievedTask = (pTaskHandle_t) msg.data;
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	61fb      	str	r3, [r7, #28]

			if (recievedTask != NULL) {
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d037      	beq.n	800325a <DDS_Task+0xb6>

				// sorts the overdue nodes from active nodes
				Sort_Overdue_From_Active(&taskList_ACTIVE, &taskList_OVERDUE);
 80031ea:	493e      	ldr	r1, [pc, #248]	; (80032e4 <DDS_Task+0x140>)
 80031ec:	483e      	ldr	r0, [pc, #248]	; (80032e8 <DDS_Task+0x144>)
 80031ee:	f000 fc2f 	bl	8003a50 <Sort_Overdue_From_Active>

				if (msg.type & Msg_Create_DDT) {
 80031f2:	7a3b      	ldrb	r3, [r7, #8]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00d      	beq.n	8003218 <DDS_Task+0x74>

					recievedTask->task_state = CreateState;
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	2202      	movs	r2, #2
 8003200:	61da      	str	r2, [r3, #28]

					if (!(bool) msg.taskExists) {
 8003202:	7e3b      	ldrb	r3, [r7, #24]
 8003204:	f083 0301 	eor.w	r3, r3, #1
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d025      	beq.n	800325a <DDS_Task+0xb6>

						Insert_DDT_to_LL(recievedTask, &taskList_ACTIVE);
 800320e:	4936      	ldr	r1, [pc, #216]	; (80032e8 <DDS_Task+0x144>)
 8003210:	69f8      	ldr	r0, [r7, #28]
 8003212:	f000 fb51 	bl	80038b8 <Insert_DDT_to_LL>
 8003216:	e020      	b.n	800325a <DDS_Task+0xb6>

					}

				}

				else if (msg.type & Msg_Release_DDT) {
 8003218:	7a3b      	ldrb	r3, [r7, #8]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <DDS_Task+0x86>

					recievedTask->task_state = ActiveState;
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	2201      	movs	r2, #1
 8003226:	61da      	str	r2, [r3, #28]
 8003228:	e017      	b.n	800325a <DDS_Task+0xb6>

				}

				else if (msg.type & Msg_Delete_DDT) {
 800322a:	7a3b      	ldrb	r3, [r7, #8]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d007      	beq.n	8003244 <DDS_Task+0xa0>

					recievedTask->task_state = DeleteState;
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	2208      	movs	r2, #8
 8003238:	61da      	str	r2, [r3, #28]

					remove_DDT_From_LL(&taskList_ACTIVE, recievedTask);
 800323a:	69f9      	ldr	r1, [r7, #28]
 800323c:	482a      	ldr	r0, [pc, #168]	; (80032e8 <DDS_Task+0x144>)
 800323e:	f000 fb9b 	bl	8003978 <remove_DDT_From_LL>
 8003242:	e00a      	b.n	800325a <DDS_Task+0xb6>

				}

				else if (msg.type & Msg_Complete_DDT) {
 8003244:	7a3b      	ldrb	r3, [r7, #8]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <DDS_Task+0xb6>

					recievedTask->task_state = CompleteState;
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	2204      	movs	r2, #4
 8003252:	61da      	str	r2, [r3, #28]

					// add task to completed LL
					add_DDT_to_Completed(recievedTask);
 8003254:	69f8      	ldr	r0, [r7, #28]
 8003256:	f000 fc47 	bl	8003ae8 <add_DDT_to_Completed>

				}

			}

			if (msg.type & Msg_ActiveList) {
 800325a:	7a3b      	ldrb	r3, [r7, #8]
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00e      	beq.n	8003282 <DDS_Task+0xde>

				msg.pList = &taskList_ACTIVE;
 8003264:	4b20      	ldr	r3, [pc, #128]	; (80032e8 <DDS_Task+0x144>)
 8003266:	617b      	str	r3, [r7, #20]

				if ( xQueueSend(xMonitor_Msg_Queue, &msg,
 8003268:	4b20      	ldr	r3, [pc, #128]	; (80032ec <DDS_Task+0x148>)
 800326a:	6818      	ldr	r0, [r3, #0]
 800326c:	f107 0108 	add.w	r1, r7, #8
 8003270:	2300      	movs	r3, #0
 8003272:	f04f 32ff 	mov.w	r2, #4294967295
 8003276:	f7fd fd19 	bl	8000cac <xQueueGenericSend>
 800327a:	4603      	mov	r3, r0
 800327c:	2b01      	cmp	r3, #1
 800327e:	d0a3      	beq.n	80031c8 <DDS_Task+0x24>
						(TickType_t) portMAX_DELAY) != pdPASS) {

					break;
 8003280:	e028      	b.n	80032d4 <DDS_Task+0x130>
				}

			}

			else if (msg.type & Msg_OverDueList) {
 8003282:	7a3b      	ldrb	r3, [r7, #8]
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00e      	beq.n	80032aa <DDS_Task+0x106>

				msg.pList = &taskList_OVERDUE;
 800328c:	4b15      	ldr	r3, [pc, #84]	; (80032e4 <DDS_Task+0x140>)
 800328e:	617b      	str	r3, [r7, #20]

				if ( xQueueSend(xMonitor_Msg_Queue, &msg,
 8003290:	4b16      	ldr	r3, [pc, #88]	; (80032ec <DDS_Task+0x148>)
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	f107 0108 	add.w	r1, r7, #8
 8003298:	2300      	movs	r3, #0
 800329a:	f04f 32ff 	mov.w	r2, #4294967295
 800329e:	f7fd fd05 	bl	8000cac <xQueueGenericSend>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d08f      	beq.n	80031c8 <DDS_Task+0x24>
						(TickType_t) portMAX_DELAY) != pdPASS) {

					break;
 80032a8:	e014      	b.n	80032d4 <DDS_Task+0x130>
				}

			}

			else if (msg.type & Msg_CompleteList) {
 80032aa:	7a3b      	ldrb	r3, [r7, #8]
 80032ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d089      	beq.n	80031c8 <DDS_Task+0x24>

				msg.pList = &taskList_COMPLETED;
 80032b4:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <DDS_Task+0x14c>)
 80032b6:	617b      	str	r3, [r7, #20]

				if ( xQueueSend(xMonitor_Msg_Queue, &msg,
 80032b8:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <DDS_Task+0x148>)
 80032ba:	6818      	ldr	r0, [r3, #0]
 80032bc:	f107 0108 	add.w	r1, r7, #8
 80032c0:	2300      	movs	r3, #0
 80032c2:	f04f 32ff 	mov.w	r2, #4294967295
 80032c6:	f7fd fcf1 	bl	8000cac <xQueueGenericSend>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d100      	bne.n	80032d2 <DDS_Task+0x12e>
		if ( xQueueReceive(xDDS_Msg_Queue, (void* )&msg,
 80032d0:	e77a      	b.n	80031c8 <DDS_Task+0x24>
						(TickType_t) portMAX_DELAY) != pdPASS) {

					break;
 80032d2:	bf00      	nop
			}

		}
	}

}
 80032d4:	bf00      	nop
 80032d6:	3720      	adds	r7, #32
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	08004f88 	.word	0x08004f88
 80032e0:	2000cb4c 	.word	0x2000cb4c
 80032e4:	2000cb40 	.word	0x2000cb40
 80032e8:	2000cb2c 	.word	0x2000cb2c
 80032ec:	2000cb48 	.word	0x2000cb48
 80032f0:	2000cb34 	.word	0x2000cb34

080032f4 <task_exists_in_List>:
 *
 *
 */

pTaskHandle_t task_exists_in_List(pTaskListHandle_t taskList,
		pTaskHandle_t task) {
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]

	if (taskList == NULL || task == NULL) {
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <task_exists_in_List+0x16>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <task_exists_in_List+0x1a>

		return 0;
 800330a:	2300      	movs	r3, #0
 800330c:	e012      	b.n	8003334 <task_exists_in_List+0x40>

	}

	pTaskHandle_t LL_index = taskList->head;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	60fb      	str	r3, [r7, #12]

	while (LL_index != NULL) {
 8003314:	e00a      	b.n	800332c <task_exists_in_List+0x38>

		if (LL_index->task_handle == task->task_handle) {
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d101      	bne.n	8003326 <task_exists_in_List+0x32>

			return LL_index;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	e006      	b.n	8003334 <task_exists_in_List+0x40>
		}

		LL_index = LL_index->next;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	60fb      	str	r3, [r7, #12]
	while (LL_index != NULL) {
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f1      	bne.n	8003316 <task_exists_in_List+0x22>

	}

	return 0;
 8003332:	2300      	movs	r3, #0

}
 8003334:	4618      	mov	r0, r3
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <create_dd_task>:

uint32_t create_dd_task(pTaskHandle_t newTask) {
 8003340:	b590      	push	{r4, r7, lr}
 8003342:	b08f      	sub	sp, #60	; 0x3c
 8003344:	af02      	add	r7, sp, #8
 8003346:	6078      	str	r0, [r7, #4]

	if (newTask == NULL) {
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d104      	bne.n	8003358 <create_dd_task+0x18>

		printf(
 800334e:	4848      	ldr	r0, [pc, #288]	; (8003470 <create_dd_task+0x130>)
 8003350:	f001 f9c6 	bl	80046e0 <puts>
				"ERROR: Request to create task with null pointer to task handle\n");
		return 0;
 8003354:	2300      	movs	r3, #0
 8003356:	e087      	b.n	8003468 <create_dd_task+0x128>

	}

	// Check if DDT already exists in Active, Completed and overdue lists
	pTaskHandle_t taskExists_ACTIVE = task_exists_in_List(&taskList_ACTIVE,
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	4846      	ldr	r0, [pc, #280]	; (8003474 <create_dd_task+0x134>)
 800335c:	f7ff ffca 	bl	80032f4 <task_exists_in_List>
 8003360:	6278      	str	r0, [r7, #36]	; 0x24
			newTask);

	pTaskHandle_t taskExists_OVERDUE = task_exists_in_List(&taskList_OVERDUE,
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4844      	ldr	r0, [pc, #272]	; (8003478 <create_dd_task+0x138>)
 8003366:	f7ff ffc5 	bl	80032f4 <task_exists_in_List>
 800336a:	6238      	str	r0, [r7, #32]
			newTask);

	pTaskHandle_t taskExists_COMPLETED = task_exists_in_List(
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4843      	ldr	r0, [pc, #268]	; (800347c <create_dd_task+0x13c>)
 8003370:	f7ff ffc0 	bl	80032f4 <task_exists_in_List>
 8003374:	61f8      	str	r0, [r7, #28]
			&taskList_COMPLETED, newTask);

	pTaskHandle_t createTask = NULL;
 8003376:	2300      	movs	r3, #0
 8003378:	62fb      	str	r3, [r7, #44]	; 0x2c

	bool task_exists = false;
 800337a:	2300      	movs	r3, #0
 800337c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (taskExists_ACTIVE != NULL) {
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003382:	2b00      	cmp	r3, #0
 8003384:	d005      	beq.n	8003392 <create_dd_task+0x52>

		createTask = taskExists_ACTIVE;
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	62fb      	str	r3, [r7, #44]	; 0x2c

		task_exists = true;
 800338a:	2301      	movs	r3, #1
 800338c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003390:	e031      	b.n	80033f6 <create_dd_task+0xb6>

	}

	else if (taskExists_OVERDUE != NULL) {
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00e      	beq.n	80033b6 <create_dd_task+0x76>

		//demote_priorities(&taskList_OVERDUE);
		createTask = taskExists_OVERDUE;
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	62fb      	str	r3, [r7, #44]	; 0x2c

		// Move to active list
		Insert_DDT_to_LL(createTask, &taskList_ACTIVE);
 800339c:	4935      	ldr	r1, [pc, #212]	; (8003474 <create_dd_task+0x134>)
 800339e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033a0:	f000 fa8a 	bl	80038b8 <Insert_DDT_to_LL>

		// Remove from completed list -- free node

		remove_DDT_From_LL(&taskList_OVERDUE, createTask, true);
 80033a4:	2201      	movs	r2, #1
 80033a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033a8:	4833      	ldr	r0, [pc, #204]	; (8003478 <create_dd_task+0x138>)
 80033aa:	f000 fae5 	bl	8003978 <remove_DDT_From_LL>

		task_exists = true;
 80033ae:	2301      	movs	r3, #1
 80033b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033b4:	e01f      	b.n	80033f6 <create_dd_task+0xb6>

	}

	else if (taskExists_COMPLETED != NULL) {
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00e      	beq.n	80033da <create_dd_task+0x9a>

		createTask = taskExists_COMPLETED;
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c

		// Move to active list
		Insert_DDT_to_LL(createTask, &taskList_ACTIVE);
 80033c0:	492c      	ldr	r1, [pc, #176]	; (8003474 <create_dd_task+0x134>)
 80033c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033c4:	f000 fa78 	bl	80038b8 <Insert_DDT_to_LL>

		// Remove from completed list -- free node

		remove_DDT_From_LL(&taskList_COMPLETED, createTask, true);
 80033c8:	2201      	movs	r2, #1
 80033ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033cc:	482b      	ldr	r0, [pc, #172]	; (800347c <create_dd_task+0x13c>)
 80033ce:	f000 fad3 	bl	8003978 <remove_DDT_From_LL>

		task_exists = true;
 80033d2:	2301      	movs	r3, #1
 80033d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033d8:	e00d      	b.n	80033f6 <create_dd_task+0xb6>

	}

	else {

		createTask = newTask;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	62fb      	str	r3, [r7, #44]	; 0x2c

		xTaskCreate(createTask->task_function, createTask->task_name,
 80033de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e0:	6858      	ldr	r0, [r3, #4]
 80033e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e4:	68d9      	ldr	r1, [r3, #12]
 80033e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e8:	9301      	str	r3, [sp, #4]
 80033ea:	2300      	movs	r3, #0
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f0:	2282      	movs	r2, #130	; 0x82
 80033f2:	f7fe f867 	bl	80014c4 <xTaskCreate>
		configMINIMAL_STACK_SIZE, (void*) createTask,
		PriorityLevel_LOW, &(createTask->task_handle));

	}

	vTaskSuspend(createTask->task_handle);
 80033f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fe fb1e 	bl	8001a3c <vTaskSuspend>

	DD_Message_t create_task_msg = { Msg_Create_DDT, createTask->task_handle,
 8003400:	2301      	movs	r3, #1
 8003402:	723b      	strb	r3, [r7, #8]
 8003404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003416:	763b      	strb	r3, [r7, #24]
			createTask,
			NULL, task_exists };

	debugPrint("\n");
 8003418:	200a      	movs	r0, #10
 800341a:	f001 f8f1 	bl	8004600 <putchar>

	debugPrint("[%s] Released | Time [%u]", createTask->task_name,
 800341e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003420:	68dc      	ldr	r4, [r3, #12]
 8003422:	f7fe fd1f 	bl	8001e64 <xTaskGetTickCount>
 8003426:	4603      	mov	r3, r0
 8003428:	461a      	mov	r2, r3
 800342a:	4621      	mov	r1, r4
 800342c:	4814      	ldr	r0, [pc, #80]	; (8003480 <create_dd_task+0x140>)
 800342e:	f001 f865 	bl	80044fc <printf>
			xTaskGetTickCount());

	debugPrint("\n");
 8003432:	200a      	movs	r0, #10
 8003434:	f001 f8e4 	bl	8004600 <putchar>

	if ( xQueueSend(xDDS_Msg_Queue, &create_task_msg,
 8003438:	4b12      	ldr	r3, [pc, #72]	; (8003484 <create_dd_task+0x144>)
 800343a:	6818      	ldr	r0, [r3, #0]
 800343c:	f107 0108 	add.w	r1, r7, #8
 8003440:	2300      	movs	r3, #0
 8003442:	f04f 32ff 	mov.w	r2, #4294967295
 8003446:	f7fd fc31 	bl	8000cac <xQueueGenericSend>
 800344a:	4603      	mov	r3, r0
 800344c:	2b01      	cmp	r3, #1
 800344e:	d007      	beq.n	8003460 <create_dd_task+0x120>
			portMAX_DELAY) != pdPASS) // ensure the message was sent
	{
		printf(
 8003450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4619      	mov	r1, r3
 8003456:	480c      	ldr	r0, [pc, #48]	; (8003488 <create_dd_task+0x148>)
 8003458:	f001 f850 	bl	80044fc <printf>
				"\nTask [%s]  Unable to Release \n unable to send New Task Message sent to DDS Queue \n",
				createTask->task_name);
		return 0;
 800345c:	2300      	movs	r3, #0
 800345e:	e003      	b.n	8003468 <create_dd_task+0x128>
	}

	release_dd_task(createTask);
 8003460:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003462:	f000 f813 	bl	800348c <release_dd_task>

	return 1;
 8003466:	2301      	movs	r3, #1

}
 8003468:	4618      	mov	r0, r3
 800346a:	3734      	adds	r7, #52	; 0x34
 800346c:	46bd      	mov	sp, r7
 800346e:	bd90      	pop	{r4, r7, pc}
 8003470:	08004f9c 	.word	0x08004f9c
 8003474:	2000cb2c 	.word	0x2000cb2c
 8003478:	2000cb40 	.word	0x2000cb40
 800347c:	2000cb34 	.word	0x2000cb34
 8003480:	08004fdc 	.word	0x08004fdc
 8003484:	2000cb4c 	.word	0x2000cb4c
 8003488:	08004ff8 	.word	0x08004ff8

0800348c <release_dd_task>:

uint32_t release_dd_task(pTaskHandle_t pTask) {
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]

	if (pTask == NULL) {
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d104      	bne.n	80034a4 <release_dd_task+0x18>

		printf(
 800349a:	4818      	ldr	r0, [pc, #96]	; (80034fc <release_dd_task+0x70>)
 800349c:	f001 f920 	bl	80046e0 <puts>
				"ERROR: Request to create task with null pointer to task handle\n");
		return 0;
 80034a0:	2300      	movs	r3, #0
 80034a2:	e027      	b.n	80034f4 <release_dd_task+0x68>

	}

	DD_Message_t release_task_msg = { Msg_Release_DDT, pTask->task_handle,
 80034a4:	f107 030c 	add.w	r3, r7, #12
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	60da      	str	r2, [r3, #12]
 80034b2:	611a      	str	r2, [r3, #16]
 80034b4:	2302      	movs	r3, #2
 80034b6:	733b      	strb	r3, [r7, #12]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	613b      	str	r3, [r7, #16]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	617b      	str	r3, [r7, #20]
			pTask,
			NULL };

	if ( xQueueSend(xDDS_Msg_Queue, &release_task_msg,
 80034c2:	4b0f      	ldr	r3, [pc, #60]	; (8003500 <release_dd_task+0x74>)
 80034c4:	6818      	ldr	r0, [r3, #0]
 80034c6:	f107 010c 	add.w	r1, r7, #12
 80034ca:	2300      	movs	r3, #0
 80034cc:	f04f 32ff 	mov.w	r2, #4294967295
 80034d0:	f7fd fbec 	bl	8000cac <xQueueGenericSend>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d007      	beq.n	80034ea <release_dd_task+0x5e>
			portMAX_DELAY) != pdPASS) // ensure the message was sent
	{
		printf(
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	4619      	mov	r1, r3
 80034e0:	4808      	ldr	r0, [pc, #32]	; (8003504 <release_dd_task+0x78>)
 80034e2:	f001 f80b 	bl	80044fc <printf>
				"\nTask [%s]  Unable to Release \n unable to send New Task Message sent to DDS Queue \n",
				pTask->task_name);
		return 0;
 80034e6:	2300      	movs	r3, #0
 80034e8:	e004      	b.n	80034f4 <release_dd_task+0x68>
	}

	vTaskResume(pTask->task_handle);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fe fb66 	bl	8001bc0 <vTaskResume>

}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3720      	adds	r7, #32
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	08004f9c 	.word	0x08004f9c
 8003500:	2000cb4c 	.word	0x2000cb4c
 8003504:	08004ff8 	.word	0x08004ff8

08003508 <complete_dd_task>:

uint32_t complete_dd_task(pTaskHandle_t pTask) {
 8003508:	b590      	push	{r4, r7, lr}
 800350a:	b089      	sub	sp, #36	; 0x24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]

	if (pTask == NULL) {
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d104      	bne.n	8003520 <complete_dd_task+0x18>

		printf(
 8003516:	481d      	ldr	r0, [pc, #116]	; (800358c <complete_dd_task+0x84>)
 8003518:	f001 f8e2 	bl	80046e0 <puts>
				"ERROR: Request to create task with null pointer to task handle\n");
		return 0;
 800351c:	2300      	movs	r3, #0
 800351e:	e031      	b.n	8003584 <complete_dd_task+0x7c>

	}

	DD_Message_t msg_Complete_Task = { Msg_Complete_DDT, pTask->task_handle,
 8003520:	2308      	movs	r3, #8
 8003522:	733b      	strb	r3, [r7, #12]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	613b      	str	r3, [r7, #16]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	2300      	movs	r3, #0
 8003530:	61bb      	str	r3, [r7, #24]
 8003532:	2300      	movs	r3, #0
 8003534:	773b      	strb	r3, [r7, #28]
			pTask,
			NULL,
			NULL };

	debugPrint("\n");
 8003536:	200a      	movs	r0, #10
 8003538:	f001 f862 	bl	8004600 <putchar>

	debugPrint("[%s] Completed | Time [%u]", pTask->task_name,
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68dc      	ldr	r4, [r3, #12]
			(unsigned int) xTaskGetTickCount());
 8003540:	f7fe fc90 	bl	8001e64 <xTaskGetTickCount>
 8003544:	4603      	mov	r3, r0
	debugPrint("[%s] Completed | Time [%u]", pTask->task_name,
 8003546:	461a      	mov	r2, r3
 8003548:	4621      	mov	r1, r4
 800354a:	4811      	ldr	r0, [pc, #68]	; (8003590 <complete_dd_task+0x88>)
 800354c:	f000 ffd6 	bl	80044fc <printf>

	debugPrint("\n");
 8003550:	200a      	movs	r0, #10
 8003552:	f001 f855 	bl	8004600 <putchar>

	vTaskSuspend(pTask->task_handle);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7fe fa6e 	bl	8001a3c <vTaskSuspend>

	if ( xQueueSend(xDDS_Msg_Queue, &msg_Complete_Task,portMAX_DELAY) != pdPASS) {
 8003560:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <complete_dd_task+0x8c>)
 8003562:	6818      	ldr	r0, [r3, #0]
 8003564:	f107 010c 	add.w	r1, r7, #12
 8003568:	2300      	movs	r3, #0
 800356a:	f04f 32ff 	mov.w	r2, #4294967295
 800356e:	f7fd fb9d 	bl	8000cac <xQueueGenericSend>
 8003572:	4603      	mov	r3, r0
 8003574:	2b01      	cmp	r3, #1
 8003576:	d004      	beq.n	8003582 <complete_dd_task+0x7a>
		printf(
 8003578:	4807      	ldr	r0, [pc, #28]	; (8003598 <complete_dd_task+0x90>)
 800357a:	f001 f8b1 	bl	80046e0 <puts>
				" ERROR While Sending Delete Msg to DDS Queue:  See DDS.c, Line 172 \n");
		return 0;
 800357e:	2300      	movs	r3, #0
 8003580:	e000      	b.n	8003584 <complete_dd_task+0x7c>
	}

	return 1;
 8003582:	2301      	movs	r3, #1

}
 8003584:	4618      	mov	r0, r3
 8003586:	3724      	adds	r7, #36	; 0x24
 8003588:	46bd      	mov	sp, r7
 800358a:	bd90      	pop	{r4, r7, pc}
 800358c:	08004f9c 	.word	0x08004f9c
 8003590:	0800504c 	.word	0x0800504c
 8003594:	2000cb4c 	.word	0x2000cb4c
 8003598:	08005068 	.word	0x08005068

0800359c <delete_dd_task>:

uint32_t delete_dd_task(pTaskHandle_t pTaskToDelete) {
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]

	DD_Message_t msg_Delete_Task = { Msg_Delete_DDT, pTaskToDelete->task_handle,
 80035a4:	2304      	movs	r3, #4
 80035a6:	733b      	strb	r3, [r7, #12]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	2300      	movs	r3, #0
 80035b4:	61bb      	str	r3, [r7, #24]
 80035b6:	2300      	movs	r3, #0
 80035b8:	773b      	strb	r3, [r7, #28]
			pTaskToDelete,
			NULL,
			NULL };

	if ( xQueueSend(xDDS_Msg_Queue, &msg_Delete_Task,portMAX_DELAY) != pdPASS) {
 80035ba:	4b0d      	ldr	r3, [pc, #52]	; (80035f0 <delete_dd_task+0x54>)
 80035bc:	6818      	ldr	r0, [r3, #0]
 80035be:	f107 010c 	add.w	r1, r7, #12
 80035c2:	2300      	movs	r3, #0
 80035c4:	f04f 32ff 	mov.w	r2, #4294967295
 80035c8:	f7fd fb70 	bl	8000cac <xQueueGenericSend>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d004      	beq.n	80035dc <delete_dd_task+0x40>
		printf(
 80035d2:	4808      	ldr	r0, [pc, #32]	; (80035f4 <delete_dd_task+0x58>)
 80035d4:	f001 f884 	bl	80046e0 <puts>
				" ERROR While Sending Delete Msg to DDS Queue:  See DDS.c, Line 172 \n");
		return 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	e005      	b.n	80035e8 <delete_dd_task+0x4c>
	}

	vTaskDelete(pTaskToDelete->task_handle);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fe f8a1 	bl	8001728 <vTaskDelete>

	return 1;
 80035e6:	2301      	movs	r3, #1

}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3720      	adds	r7, #32
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	2000cb4c 	.word	0x2000cb4c
 80035f4:	08005068 	.word	0x08005068

080035f8 <DDS_Init>:

void DDS_Init(void) {
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af02      	add	r7, sp, #8

	debugPrint("Init Task lists:");
 80035fe:	4813      	ldr	r0, [pc, #76]	; (800364c <DDS_Init+0x54>)
 8003600:	f000 ff7c 	bl	80044fc <printf>

	debugPrint("\n");
 8003604:	200a      	movs	r0, #10
 8003606:	f000 fffb 	bl	8004600 <putchar>

	Init_DD_TaskList(&taskList_ACTIVE);
 800360a:	4811      	ldr	r0, [pc, #68]	; (8003650 <DDS_Init+0x58>)
 800360c:	f000 f93c 	bl	8003888 <Init_DD_TaskList>
	Init_DD_TaskList(&taskList_OVERDUE);
 8003610:	4810      	ldr	r0, [pc, #64]	; (8003654 <DDS_Init+0x5c>)
 8003612:	f000 f939 	bl	8003888 <Init_DD_TaskList>
	Init_DD_TaskList(&taskList_COMPLETED);
 8003616:	4810      	ldr	r0, [pc, #64]	; (8003658 <DDS_Init+0x60>)
 8003618:	f000 f936 	bl	8003888 <Init_DD_TaskList>

	// create tasks for DDS and Monitor Functionality

# if MONITOR_MODE == 1

	xTaskCreate(Monitor_Task, "Monitor Task", configMINIMAL_STACK_SIZE, NULL,
 800361c:	2300      	movs	r3, #0
 800361e:	9301      	str	r3, [sp, #4]
 8003620:	2309      	movs	r3, #9
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	2300      	movs	r3, #0
 8003626:	2282      	movs	r2, #130	; 0x82
 8003628:	490c      	ldr	r1, [pc, #48]	; (800365c <DDS_Init+0x64>)
 800362a:	480d      	ldr	r0, [pc, #52]	; (8003660 <DDS_Init+0x68>)
 800362c:	f7fd ff4a 	bl	80014c4 <xTaskCreate>
	PriorityLevel_MONITOR, NULL);

#endif

	xTaskCreate(DDS_Task, "DDS Task", configMINIMAL_STACK_SIZE, NULL,
 8003630:	2300      	movs	r3, #0
 8003632:	9301      	str	r3, [sp, #4]
 8003634:	230a      	movs	r3, #10
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	2300      	movs	r3, #0
 800363a:	2282      	movs	r2, #130	; 0x82
 800363c:	4909      	ldr	r1, [pc, #36]	; (8003664 <DDS_Init+0x6c>)
 800363e:	480a      	ldr	r0, [pc, #40]	; (8003668 <DDS_Init+0x70>)
 8003640:	f7fd ff40 	bl	80014c4 <xTaskCreate>
	PriorityLevel_SCHEDULER, NULL);

}
 8003644:	bf00      	nop
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	080050ac 	.word	0x080050ac
 8003650:	2000cb2c 	.word	0x2000cb2c
 8003654:	2000cb40 	.word	0x2000cb40
 8003658:	2000cb34 	.word	0x2000cb34
 800365c:	080050c0 	.word	0x080050c0
 8003660:	0800366d 	.word	0x0800366d
 8003664:	080050d0 	.word	0x080050d0
 8003668:	080031a5 	.word	0x080031a5

0800366c <Monitor_Task>:
 *
 * F-Task to extract information from the DDS and report scheduling information.
 *
 */

void Monitor_Task(void *pvParameters) {
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]

	while (1) {

		debugPrint("\nMONITOR TASK:\n");
 8003674:	4806      	ldr	r0, [pc, #24]	; (8003690 <Monitor_Task+0x24>)
 8003676:	f001 f833 	bl	80046e0 <puts>
		get_active_dd_task_list();
 800367a:	f000 f837 	bl	80036ec <get_active_dd_task_list>
		get_completed_dd_task_list();
 800367e:	f000 f873 	bl	8003768 <get_completed_dd_task_list>
		get_overdue_dd_task_list();
 8003682:	f000 f8af 	bl	80037e4 <get_overdue_dd_task_list>

		vTaskDelay(100);
 8003686:	2064      	movs	r0, #100	; 0x64
 8003688:	f7fe f8dc 	bl	8001844 <vTaskDelay>
		debugPrint("\nMONITOR TASK:\n");
 800368c:	e7f2      	b.n	8003674 <Monitor_Task+0x8>
 800368e:	bf00      	nop
 8003690:	080050dc 	.word	0x080050dc

08003694 <print_LL_Nodes>:
 * Input: pointer to linked list of task handles
 *
 *
 */

void print_LL_Nodes(pTaskListHandle_t LinkedList) {
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]

	if (LinkedList->head == NULL && LinkedList->tail == NULL) {
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d107      	bne.n	80036b4 <print_LL_Nodes+0x20>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d103      	bne.n	80036b4 <print_LL_Nodes+0x20>

		printf("\nNo Task In list!\n");
 80036ac:	480d      	ldr	r0, [pc, #52]	; (80036e4 <print_LL_Nodes+0x50>)
 80036ae:	f001 f817 	bl	80046e0 <puts>

		return;
 80036b2:	e013      	b.n	80036dc <print_LL_Nodes+0x48>

	}

	pTaskHandle_t LL_index = LinkedList->head;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	60fb      	str	r3, [r7, #12]

	while (LL_index != NULL) {
 80036ba:	e00b      	b.n	80036d4 <print_LL_Nodes+0x40>

		printf("Task: [%s]", LL_index->task_name);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	4619      	mov	r1, r3
 80036c2:	4809      	ldr	r0, [pc, #36]	; (80036e8 <print_LL_Nodes+0x54>)
 80036c4:	f000 ff1a 	bl	80044fc <printf>

		printf("\n");
 80036c8:	200a      	movs	r0, #10
 80036ca:	f000 ff99 	bl	8004600 <putchar>
		LL_index = LL_index->next;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	60fb      	str	r3, [r7, #12]
	while (LL_index != NULL) {
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f0      	bne.n	80036bc <print_LL_Nodes+0x28>

	}
	return;
 80036da:	bf00      	nop

}
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	080050ec 	.word	0x080050ec
 80036e8:	08005100 	.word	0x08005100

080036ec <get_active_dd_task_list>:
 *
 * This function sends a message to a queue requesting the Active Task List from the DDS.
 * Once a response is received from the DDS, the function returns the list.
 */

uint32_t get_active_dd_task_list(void) {
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0

	DD_Message_t msg_activeList = { Msg_ActiveList, NULL, NULL, NULL, NULL };
 80036f2:	2310      	movs	r3, #16
 80036f4:	713b      	strb	r3, [r7, #4]
 80036f6:	2300      	movs	r3, #0
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	2300      	movs	r3, #0
 8003700:	613b      	str	r3, [r7, #16]
 8003702:	2300      	movs	r3, #0
 8003704:	753b      	strb	r3, [r7, #20]

	if ( xQueueSend(xDDS_Msg_Queue, &msg_activeList,portMAX_DELAY) != pdPASS) // ensure the message was sent
 8003706:	4b14      	ldr	r3, [pc, #80]	; (8003758 <get_active_dd_task_list+0x6c>)
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	1d39      	adds	r1, r7, #4
 800370c:	2300      	movs	r3, #0
 800370e:	f04f 32ff 	mov.w	r2, #4294967295
 8003712:	f7fd facb 	bl	8000cac <xQueueGenericSend>
 8003716:	4603      	mov	r3, r0
 8003718:	2b01      	cmp	r3, #1
 800371a:	d004      	beq.n	8003726 <get_active_dd_task_list+0x3a>
	{

		printf(
 800371c:	480f      	ldr	r0, [pc, #60]	; (800375c <get_active_dd_task_list+0x70>)
 800371e:	f000 ffdf 	bl	80046e0 <puts>
				"\nERROR:Unable to send ACTIVE LIST message to DDS Msg Queue!\n");
		return 0;
 8003722:	2300      	movs	r3, #0
 8003724:	e014      	b.n	8003750 <get_active_dd_task_list+0x64>
	}

	if ( xQueueReceive(xMonitor_Msg_Queue,&msg_activeList,
 8003726:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <get_active_dd_task_list+0x74>)
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	1d39      	adds	r1, r7, #4
 800372c:	2300      	movs	r3, #0
 800372e:	f04f 32ff 	mov.w	r2, #4294967295
 8003732:	f7fd fc49 	bl	8000fc8 <xQueueGenericReceive>
 8003736:	4603      	mov	r3, r0
 8003738:	2b01      	cmp	r3, #1
 800373a:	d108      	bne.n	800374e <get_active_dd_task_list+0x62>
			portMAX_DELAY) == pdTRUE) {

		debugPrint("ACTIVE TASKS:\n");
 800373c:	4809      	ldr	r0, [pc, #36]	; (8003764 <get_active_dd_task_list+0x78>)
 800373e:	f000 ffcf 	bl	80046e0 <puts>

		print_LL_Nodes(msg_activeList.pList);
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff ffa5 	bl	8003694 <print_LL_Nodes>

		msg_activeList.pList = NULL;
 800374a:	2300      	movs	r3, #0
 800374c:	613b      	str	r3, [r7, #16]
	}
	return 1;
 800374e:	2301      	movs	r3, #1

}
 8003750:	4618      	mov	r0, r3
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	2000cb4c 	.word	0x2000cb4c
 800375c:	0800510c 	.word	0x0800510c
 8003760:	2000cb48 	.word	0x2000cb48
 8003764:	08005148 	.word	0x08005148

08003768 <get_completed_dd_task_list>:
 *  Once a response is received from the DDS, the function returns the list.
 *
 *
 */

uint32_t get_completed_dd_task_list(void) {
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0

	DD_Message_t msg_completedList =
 800376e:	2340      	movs	r3, #64	; 0x40
 8003770:	713b      	strb	r3, [r7, #4]
 8003772:	2300      	movs	r3, #0
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	2300      	movs	r3, #0
 800377c:	613b      	str	r3, [r7, #16]
 800377e:	2300      	movs	r3, #0
 8003780:	753b      	strb	r3, [r7, #20]
			{ Msg_CompleteList, NULL, NULL, NULL, NULL };

	if ( xQueueSend(xDDS_Msg_Queue, &msg_completedList,
 8003782:	4b14      	ldr	r3, [pc, #80]	; (80037d4 <get_completed_dd_task_list+0x6c>)
 8003784:	6818      	ldr	r0, [r3, #0]
 8003786:	1d39      	adds	r1, r7, #4
 8003788:	2300      	movs	r3, #0
 800378a:	f04f 32ff 	mov.w	r2, #4294967295
 800378e:	f7fd fa8d 	bl	8000cac <xQueueGenericSend>
 8003792:	4603      	mov	r3, r0
 8003794:	2b01      	cmp	r3, #1
 8003796:	d004      	beq.n	80037a2 <get_completed_dd_task_list+0x3a>
			portMAX_DELAY) != pdPASS) // ensure the message was sent
	{

		printf(
 8003798:	480f      	ldr	r0, [pc, #60]	; (80037d8 <get_completed_dd_task_list+0x70>)
 800379a:	f000 ffa1 	bl	80046e0 <puts>
				"\nERROR:Unable to send COMPLETED LIST message to DDS Msg Queue!\n");
		return 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	e014      	b.n	80037cc <get_completed_dd_task_list+0x64>
	}
	if ( xQueueReceive(xMonitor_Msg_Queue, &msg_completedList,
 80037a2:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <get_completed_dd_task_list+0x74>)
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	1d39      	adds	r1, r7, #4
 80037a8:	2300      	movs	r3, #0
 80037aa:	f04f 32ff 	mov.w	r2, #4294967295
 80037ae:	f7fd fc0b 	bl	8000fc8 <xQueueGenericReceive>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d108      	bne.n	80037ca <get_completed_dd_task_list+0x62>
			portMAX_DELAY) == pdTRUE) {

		debugPrint("COMPLETED TASKS:\n");
 80037b8:	4809      	ldr	r0, [pc, #36]	; (80037e0 <get_completed_dd_task_list+0x78>)
 80037ba:	f000 ff91 	bl	80046e0 <puts>

		print_LL_Nodes(msg_completedList.pList);
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff ff67 	bl	8003694 <print_LL_Nodes>

		msg_completedList.pList = NULL;
 80037c6:	2300      	movs	r3, #0
 80037c8:	613b      	str	r3, [r7, #16]
	}

	return 1;
 80037ca:	2301      	movs	r3, #1

}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	2000cb4c 	.word	0x2000cb4c
 80037d8:	08005158 	.word	0x08005158
 80037dc:	2000cb48 	.word	0x2000cb48
 80037e0:	08005198 	.word	0x08005198

080037e4 <get_overdue_dd_task_list>:
 * This function sends a message to a queue requesting the Overdue Task List from the DDS.
 *  Once a response is received from the DDS, the function returns the list.
 *
 */

uint32_t get_overdue_dd_task_list(void) {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0

	DD_Message_t msg_overdueList = { Msg_OverDueList, NULL, NULL, NULL, NULL };
 80037ea:	2320      	movs	r3, #32
 80037ec:	713b      	strb	r3, [r7, #4]
 80037ee:	2300      	movs	r3, #0
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	2300      	movs	r3, #0
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	2300      	movs	r3, #0
 80037fc:	753b      	strb	r3, [r7, #20]
//
	if ( xQueueSend(xDDS_Msg_Queue, &msg_overdueList,
 80037fe:	4b14      	ldr	r3, [pc, #80]	; (8003850 <get_overdue_dd_task_list+0x6c>)
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	1d39      	adds	r1, r7, #4
 8003804:	2300      	movs	r3, #0
 8003806:	f04f 32ff 	mov.w	r2, #4294967295
 800380a:	f7fd fa4f 	bl	8000cac <xQueueGenericSend>
 800380e:	4603      	mov	r3, r0
 8003810:	2b01      	cmp	r3, #1
 8003812:	d004      	beq.n	800381e <get_overdue_dd_task_list+0x3a>
			portMAX_DELAY) != pdPASS) // ensure the message was sent
	{

		printf(
 8003814:	480f      	ldr	r0, [pc, #60]	; (8003854 <get_overdue_dd_task_list+0x70>)
 8003816:	f000 ff63 	bl	80046e0 <puts>
				"\nERROR:Unable to send OVERDUE LIST message to DDS Msg Queue!\n");

		return 0;
 800381a:	2300      	movs	r3, #0
 800381c:	e014      	b.n	8003848 <get_overdue_dd_task_list+0x64>
	}

	if ( xQueueReceive(xMonitor_Msg_Queue, &msg_overdueList,
 800381e:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <get_overdue_dd_task_list+0x74>)
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	1d39      	adds	r1, r7, #4
 8003824:	2300      	movs	r3, #0
 8003826:	f04f 32ff 	mov.w	r2, #4294967295
 800382a:	f7fd fbcd 	bl	8000fc8 <xQueueGenericReceive>
 800382e:	4603      	mov	r3, r0
 8003830:	2b01      	cmp	r3, #1
 8003832:	d108      	bne.n	8003846 <get_overdue_dd_task_list+0x62>
			portMAX_DELAY) == pdTRUE) {

		debugPrint("OVERDUE TASKS:\n");
 8003834:	4809      	ldr	r0, [pc, #36]	; (800385c <get_overdue_dd_task_list+0x78>)
 8003836:	f000 ff53 	bl	80046e0 <puts>
		print_LL_Nodes(msg_overdueList.pList);
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff ff29 	bl	8003694 <print_LL_Nodes>

		msg_overdueList.pList = NULL;
 8003842:	2300      	movs	r3, #0
 8003844:	613b      	str	r3, [r7, #16]
	}
	return 1;
 8003846:	2301      	movs	r3, #1

}
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	2000cb4c 	.word	0x2000cb4c
 8003854:	080051ac 	.word	0x080051ac
 8003858:	2000cb48 	.word	0x2000cb48
 800385c:	080051ec 	.word	0x080051ec

08003860 <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 800386a:	bf00      	nop
}
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 8003876:	b480      	push	{r7}
 8003878:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return 0;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
	...

08003888 <Init_DD_TaskList>:
#include "STM_GPIO_CONFIG.h"
#include "MonitorTask.h"



void Init_DD_TaskList(pTaskListHandle_t DDT_List) {
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
	// Check input parameters are not NULL

	if (DDT_List != NULL) {
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d006      	beq.n	80038a4 <Init_DD_TaskList+0x1c>

		DDT_List->head = NULL;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
		DDT_List->tail = NULL;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	605a      	str	r2, [r3, #4]

		printf("ERROR! NULL Task List. Unable to instantiate linked list!");

	}

}
 80038a2:	e002      	b.n	80038aa <Init_DD_TaskList+0x22>
		printf("ERROR! NULL Task List. Unable to instantiate linked list!");
 80038a4:	4803      	ldr	r0, [pc, #12]	; (80038b4 <Init_DD_TaskList+0x2c>)
 80038a6:	f000 fe29 	bl	80044fc <printf>
}
 80038aa:	bf00      	nop
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	080051fc 	.word	0x080051fc

080038b8 <Insert_DDT_to_LL>:

// Insert task by deadline

void Insert_DDT_to_LL(pTaskHandle_t task, pTaskListHandle_t taskList) {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]

	pTaskHandle_t LL_index = taskList->head;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	60fb      	str	r3, [r7, #12]

	if ((taskList->head == NULL) && (taskList->tail == NULL)) {
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d137      	bne.n	8003940 <Insert_DDT_to_LL+0x88>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d133      	bne.n	8003940 <Insert_DDT_to_LL+0x88>
		taskList->head = task;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	601a      	str	r2, [r3, #0]
		taskList->tail = task;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	605a      	str	r2, [r3, #4]
 80038e4:	e02f      	b.n	8003946 <Insert_DDT_to_LL+0x8e>
	} else {
		while (LL_index != NULL) {

			// Check if deadline of new task is less than that of the current head of list
			if (task->absolute_deadline < LL_index->absolute_deadline) {
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d212      	bcs.n	8003918 <Insert_DDT_to_LL+0x60>

				// check if Linked list index is the head
				if (LL_index == taskList->head) {
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d102      	bne.n	8003902 <Insert_DDT_to_LL+0x4a>
					taskList->head = task; // If so, make the head of the list now the new task
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	601a      	str	r2, [r3, #0]
				}

				task->next = LL_index;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	621a      	str	r2, [r3, #32]
				task->previous = LL_index->previous;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	625a      	str	r2, [r3, #36]	; 0x24
				LL_index->previous = task;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 8003916:	e016      	b.n	8003946 <Insert_DDT_to_LL+0x8e>

			} else {

				if (LL_index->next == NULL) { // reached end of list
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10c      	bne.n	800393a <Insert_DDT_to_LL+0x82>
					task->next = NULL;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	621a      	str	r2, [r3, #32]
					task->previous = LL_index;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	625a      	str	r2, [r3, #36]	; 0x24
					LL_index->next = task;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	621a      	str	r2, [r3, #32]
					taskList->tail = task;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	605a      	str	r2, [r3, #4]
					break;
 8003938:	e005      	b.n	8003946 <Insert_DDT_to_LL+0x8e>
				}

				LL_index = LL_index->next;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	60fb      	str	r3, [r7, #12]
		while (LL_index != NULL) {
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1cf      	bne.n	80038e6 <Insert_DDT_to_LL+0x2e>
			}
		}
	}

	uint32_t priority_index = PriorityLevel_MAXT;
 8003946:	2307      	movs	r3, #7
 8003948:	60bb      	str	r3, [r7, #8]

	LL_index = taskList->head;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60fb      	str	r3, [r7, #12]


	//debugPrint("\n");

	while (LL_index != NULL) {
 8003950:	e00b      	b.n	800396a <Insert_DDT_to_LL+0xb2>

		//debugPrint("[%s-%u]", LL_index->task_name, priority_index);

		vTaskPrioritySet(LL_index->task_handle, priority_index);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68b9      	ldr	r1, [r7, #8]
 8003958:	4618      	mov	r0, r3
 800395a:	f7fd ffc1 	bl	80018e0 <vTaskPrioritySet>

		LL_index = LL_index->next;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	60fb      	str	r3, [r7, #12]

		priority_index--;
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	3b01      	subs	r3, #1
 8003968:	60bb      	str	r3, [r7, #8]
	while (LL_index != NULL) {
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1f0      	bne.n	8003952 <Insert_DDT_to_LL+0x9a>

	}

	//debugPrint("\n");

}
 8003970:	bf00      	nop
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <remove_DDT_From_LL>:
 *
 *
 *
 */

void remove_DDT_From_LL(pTaskListHandle_t linkedList, pTaskHandle_t taskToRemove) {
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]

	if (linkedList == NULL) {
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d103      	bne.n	8003990 <remove_DDT_From_LL+0x18>

		printf("error... Attempting to mutate values from a null Linked list");
 8003988:	482f      	ldr	r0, [pc, #188]	; (8003a48 <remove_DDT_From_LL+0xd0>)
 800398a:	f000 fdb7 	bl	80044fc <printf>

		return;
 800398e:	e057      	b.n	8003a40 <remove_DDT_From_LL+0xc8>

	}

	pTaskHandle_t LL_index = linkedList->head;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	60fb      	str	r3, [r7, #12]

	if (LL_index == NULL) {
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d14e      	bne.n	8003a3a <remove_DDT_From_LL+0xc2>

		debugPrint("Unable to locate head of list\n");
 800399c:	482b      	ldr	r0, [pc, #172]	; (8003a4c <remove_DDT_From_LL+0xd4>)
 800399e:	f000 fe9f 	bl	80046e0 <puts>

		return;
 80039a2:	e04d      	b.n	8003a40 <remove_DDT_From_LL+0xc8>

	}

	while (LL_index != NULL) {

		if (LL_index->task_handle == taskToRemove->task_handle) {
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d141      	bne.n	8003a34 <remove_DDT_From_LL+0xbc>

			// Insert Task to completed List

			if (linkedList->head->task_handle
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
					== linkedList->tail->task_handle) { // if head TH == tail TH, only one element in LL
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
			if (linkedList->head->task_handle
 80039bc:	429a      	cmp	r2, r3
 80039be:	d106      	bne.n	80039ce <remove_DDT_From_LL+0x56>

				linkedList->head = NULL;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]
				linkedList->tail = NULL;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	605a      	str	r2, [r3, #4]
 80039cc:	e02b      	b.n	8003a26 <remove_DDT_From_LL+0xae>
			}

			else if (taskToRemove->task_handle == linkedList->head->task_handle) { // check if attempting to remove head
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d108      	bne.n	80039ee <remove_DDT_From_LL+0x76>

				linkedList->head = LL_index->next;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a1a      	ldr	r2, [r3, #32]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	601a      	str	r2, [r3, #0]

				LL_index->next->previous = NULL;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	2200      	movs	r2, #0
 80039ea:	625a      	str	r2, [r3, #36]	; 0x24
 80039ec:	e01b      	b.n	8003a26 <remove_DDT_From_LL+0xae>

			} else if (taskToRemove->task_handle = linkedList->tail->task_handle) { // Check if we are attempting to remove tail of list
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d008      	beq.n	8003a12 <remove_DDT_From_LL+0x9a>

				linkedList->head = LL_index->previous;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	601a      	str	r2, [r3, #0]

				LL_index->previous->next = NULL;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	621a      	str	r2, [r3, #32]
 8003a10:	e009      	b.n	8003a26 <remove_DDT_From_LL+0xae>

			}

			else { // Removing somewhere in the middle of the list

				LL_index->previous->next = LL_index->next;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	6a12      	ldr	r2, [r2, #32]
 8003a1a:	621a      	str	r2, [r3, #32]

				LL_index->next->previous = LL_index->previous;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a24:	625a      	str	r2, [r3, #36]	; 0x24

			}

			LL_index->previous = NULL;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	625a      	str	r2, [r3, #36]	; 0x24

			LL_index->next = NULL;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	621a      	str	r2, [r3, #32]

			return;
 8003a32:	e005      	b.n	8003a40 <remove_DDT_From_LL+0xc8>

		}

		LL_index = LL_index->next;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	60fb      	str	r3, [r7, #12]
	while (LL_index != NULL) {
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1b1      	bne.n	80039a4 <remove_DDT_From_LL+0x2c>

	}

}
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	08005238 	.word	0x08005238
 8003a4c:	08005278 	.word	0x08005278

08003a50 <Sort_Overdue_From_Active>:

void Sort_Overdue_From_Active(pTaskListHandle_t Active_TaskList, pTaskListHandle_t Overdue_TaskList) {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]

	// Check input parameters are not NULL

	if ((Active_TaskList == NULL) || (Overdue_TaskList == NULL)) {
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <Sort_Overdue_From_Active+0x16>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d103      	bne.n	8003a6e <Sort_Overdue_From_Active+0x1e>
		printf(
 8003a66:	481e      	ldr	r0, [pc, #120]	; (8003ae0 <Sort_Overdue_From_Active+0x90>)
 8003a68:	f000 fe3a 	bl	80046e0 <puts>
				"ERROR(DD_TaskList_Transfer_Overdue): one of the parameters passed was NULL.\n");
		return;
 8003a6c:	e035      	b.n	8003ada <Sort_Overdue_From_Active+0x8a>
	}

	pTaskHandle_t LL_index = Active_TaskList->head;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	617b      	str	r3, [r7, #20]

	pTaskHandle_t tempNode;

	while (LL_index != NULL) {
 8003a74:	e02c      	b.n	8003ad0 <Sort_Overdue_From_Active+0x80>

		TickType_t currentTime = xTaskGetTickCount();
 8003a76:	f7fe f9f5 	bl	8001e64 <xTaskGetTickCount>
 8003a7a:	6138      	str	r0, [r7, #16]

		if (LL_index->absolute_deadline < currentTime) { // Deadline has passed
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	699a      	ldr	r2, [r3, #24]
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d228      	bcs.n	8003ad8 <Sort_Overdue_From_Active+0x88>

			LL_index->task_state = OverdueState;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2216      	movs	r2, #22
 8003a8a:	61da      	str	r2, [r3, #28]

			if ((Overdue_TaskList->head == NULL)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10a      	bne.n	8003aaa <Sort_Overdue_From_Active+0x5a>
					&& (Overdue_TaskList->tail == NULL)) { // Check if no items are in list
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d106      	bne.n	8003aaa <Sort_Overdue_From_Active+0x5a>

				Overdue_TaskList->head = LL_index;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	601a      	str	r2, [r3, #0]
				Overdue_TaskList->tail = LL_index;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	605a      	str	r2, [r3, #4]
 8003aa8:	e00b      	b.n	8003ac2 <Sort_Overdue_From_Active+0x72>
			}

			else {

				tempNode = Overdue_TaskList->tail;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	60fb      	str	r3, [r7, #12]
				Overdue_TaskList->tail = LL_index;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	605a      	str	r2, [r3, #4]
				tempNode->next = LL_index;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	621a      	str	r2, [r3, #32]
				LL_index->previous = tempNode;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	625a      	str	r2, [r3, #36]	; 0x24

			}

			// Remove Node From Ative List

			remove_DDT_From_LL(&taskList_ACTIVE, LL_index);
 8003ac2:	6979      	ldr	r1, [r7, #20]
 8003ac4:	4807      	ldr	r0, [pc, #28]	; (8003ae4 <Sort_Overdue_From_Active+0x94>)
 8003ac6:	f7ff ff57 	bl	8003978 <remove_DDT_From_LL>
		} else {

			return;
		}

		LL_index = LL_index->next;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	617b      	str	r3, [r7, #20]
	while (LL_index != NULL) {
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1cf      	bne.n	8003a76 <Sort_Overdue_From_Active+0x26>
 8003ad6:	e000      	b.n	8003ada <Sort_Overdue_From_Active+0x8a>
			return;
 8003ad8:	bf00      	nop

	}

}
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	08005298 	.word	0x08005298
 8003ae4:	2000cb2c 	.word	0x2000cb2c

08003ae8 <add_DDT_to_Completed>:

void add_DDT_to_Completed(pTaskHandle_t pTask) {
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]

	if (pTask == NULL) {
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d043      	beq.n	8003b7e <add_DDT_to_Completed+0x96>

	}

	// Remove pTask from active list -- Dont delete the node

	pTaskListHandle_t completedList = &taskList_COMPLETED;
 8003af6:	4b24      	ldr	r3, [pc, #144]	; (8003b88 <add_DDT_to_Completed+0xa0>)
 8003af8:	613b      	str	r3, [r7, #16]

	pTaskHandle_t iterator = completedList->head;
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	617b      	str	r3, [r7, #20]

	if (iterator == NULL) {
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d11b      	bne.n	8003b3e <add_DDT_to_Completed+0x56>

		completedList->head = pTask;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	601a      	str	r2, [r3, #0]
		completedList->tail = NULL;
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	605a      	str	r2, [r3, #4]
 8003b12:	e017      	b.n	8003b44 <add_DDT_to_Completed+0x5c>

	} else {

		while (iterator != NULL) {

			if (iterator == completedList->head) {
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d102      	bne.n	8003b24 <add_DDT_to_Completed+0x3c>

				completedList->head = pTask;
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	601a      	str	r2, [r3, #0]
			}

			pTask->next = iterator;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	621a      	str	r2, [r3, #32]
			pTask->previous = iterator->previous;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	625a      	str	r2, [r3, #36]	; 0x24
			iterator->previous = pTask;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	625a      	str	r2, [r3, #36]	; 0x24

			iterator = iterator->next;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	617b      	str	r3, [r7, #20]
		while (iterator != NULL) {
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1e7      	bne.n	8003b14 <add_DDT_to_Completed+0x2c>
	}

	// remove task from Active or overdue list


	pTaskHandle_t taskExists_ACTIVE = task_exists_in_List(&taskList_ACTIVE,
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	4811      	ldr	r0, [pc, #68]	; (8003b8c <add_DDT_to_Completed+0xa4>)
 8003b48:	f7ff fbd4 	bl	80032f4 <task_exists_in_List>
 8003b4c:	60f8      	str	r0, [r7, #12]
			pTask);

	pTaskHandle_t taskExists_OVERDUE = task_exists_in_List(&taskList_OVERDUE,
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	480f      	ldr	r0, [pc, #60]	; (8003b90 <add_DDT_to_Completed+0xa8>)
 8003b52:	f7ff fbcf 	bl	80032f4 <task_exists_in_List>
 8003b56:	4603      	mov	r3, r0
 8003b58:	60bb      	str	r3, [r7, #8]
			pTask);

	if (taskExists_ACTIVE != NULL) {
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d004      	beq.n	8003b6a <add_DDT_to_Completed+0x82>
		remove_DDT_From_LL(&taskList_ACTIVE, pTask);
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	480a      	ldr	r0, [pc, #40]	; (8003b8c <add_DDT_to_Completed+0xa4>)
 8003b64:	f7ff ff08 	bl	8003978 <remove_DDT_From_LL>
 8003b68:	e00a      	b.n	8003b80 <add_DDT_to_Completed+0x98>

	}

	else if (taskExists_OVERDUE != NULL) {
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d007      	beq.n	8003b80 <add_DDT_to_Completed+0x98>

		remove_DDT_From_LL(&taskExists_OVERDUE, pTask);
 8003b70:	f107 0308 	add.w	r3, r7, #8
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff fefe 	bl	8003978 <remove_DDT_From_LL>
 8003b7c:	e000      	b.n	8003b80 <add_DDT_to_Completed+0x98>
		return ;
 8003b7e:	bf00      	nop

	}

}
 8003b80:	3718      	adds	r7, #24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	2000cb34 	.word	0x2000cb34
 8003b8c:	2000cb2c 	.word	0x2000cb2c
 8003b90:	2000cb40 	.word	0x2000cb40

08003b94 <Create_DD_Task_Node>:
 *  	1	                       100                          	500
 *  	2	                       200                              500
 *  	3	                       200                              500
 */

pTaskHandle_t Create_DD_Task_Node(void) {
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
	pTaskHandle_t taskNode = (pTaskHandle_t) pvPortMalloc(sizeof(dd_task_t));
 8003b9a:	2028      	movs	r0, #40	; 0x28
 8003b9c:	f7fc fde0 	bl	8000760 <pvPortMalloc>
 8003ba0:	6078      	str	r0, [r7, #4]

	taskNode->task_handle = NULL;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]
	taskNode->task_function = NULL;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	605a      	str	r2, [r3, #4]
	taskNode->task_name = "";
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a0c      	ldr	r2, [pc, #48]	; (8003be4 <Create_DD_Task_Node+0x50>)
 8003bb2:	60da      	str	r2, [r3, #12]
	taskNode->task_type = DD_PERIODIC;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	721a      	strb	r2, [r3, #8]
	taskNode->release_time = 0;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	611a      	str	r2, [r3, #16]
	taskNode->absolute_deadline = 0;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	619a      	str	r2, [r3, #24]
	taskNode->task_state = 0;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	61da      	str	r2, [r3, #28]
	taskNode->next = NULL;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	621a      	str	r2, [r3, #32]
	taskNode->previous = NULL;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	625a      	str	r2, [r3, #36]	; 0x24

	return taskNode;
 8003bd8:	687b      	ldr	r3, [r7, #4]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	080052e4 	.word	0x080052e4

08003be8 <Periodic_Task_Routine>:
 *
 *

 */

void Periodic_Task_Routine(void *pvParameters) {
 8003be8:	b590      	push	{r4, r7, lr}
 8003bea:	b089      	sub	sp, #36	; 0x24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]

	pTaskHandle_t taskNode = (pTaskHandle_t) pvParameters;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	613b      	str	r3, [r7, #16]

	TickType_t currentTime = 0;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61fb      	str	r3, [r7, #28]
	TickType_t lastTick = 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	61bb      	str	r3, [r7, #24]
	TickType_t relativeDeadline = 0;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60fb      	str	r3, [r7, #12]
	TickType_t absDeadline = 0;
 8003c00:	2300      	movs	r3, #0
 8003c02:	60bb      	str	r3, [r7, #8]

	uint32_t tickCounter = 0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]

	while (1) {

		if (taskNode->task_state == ActiveState) {
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d12f      	bne.n	8003c70 <Periodic_Task_Routine+0x88>

			currentTime = xTaskGetTickCount();
 8003c10:	f7fe f928 	bl	8001e64 <xTaskGetTickCount>
 8003c14:	61f8      	str	r0, [r7, #28]

			absDeadline = taskNode->absolute_deadline;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	60bb      	str	r3, [r7, #8]

			debugPrint(
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	68dc      	ldr	r4, [r3, #12]
					"\nExecuting [%s] | Time: %u | Prior: %u \n",
					taskNode->task_name, (unsigned int) currentTime,
					(unsigned int) uxTaskPriorityGet( taskNode->task_handle));
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7fd fe41 	bl	80018ac <uxTaskPriorityGet>
 8003c2a:	4603      	mov	r3, r0
			debugPrint(
 8003c2c:	69fa      	ldr	r2, [r7, #28]
 8003c2e:	4621      	mov	r1, r4
 8003c30:	4814      	ldr	r0, [pc, #80]	; (8003c84 <Periodic_Task_Routine+0x9c>)
 8003c32:	f000 fc63 	bl	80044fc <printf>

			lastTick = currentTime;
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	61bb      	str	r3, [r7, #24]

			tickCounter = 0;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	617b      	str	r3, [r7, #20]

			// Simulating execution time.
			while (tickCounter < taskNode->execution_time) {
 8003c3e:	e00b      	b.n	8003c58 <Periodic_Task_Routine+0x70>

				currentTime = xTaskGetTickCount();
 8003c40:	f7fe f910 	bl	8001e64 <xTaskGetTickCount>
 8003c44:	61f8      	str	r0, [r7, #28]

				if (currentTime != lastTick) {
 8003c46:	69fa      	ldr	r2, [r7, #28]
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d002      	beq.n	8003c54 <Periodic_Task_Routine+0x6c>

					tickCounter++;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	3301      	adds	r3, #1
 8003c52:	617b      	str	r3, [r7, #20]

				}

				lastTick = currentTime;
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	61bb      	str	r3, [r7, #24]
			while (tickCounter < taskNode->execution_time) {
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	695a      	ldr	r2, [r3, #20]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d8ee      	bhi.n	8003c40 <Periodic_Task_Routine+0x58>
			}

			relativeDeadline = absDeadline - currentTime;
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	60fb      	str	r3, [r7, #12]

			complete_dd_task(taskNode);
 8003c6a:	6938      	ldr	r0, [r7, #16]
 8003c6c:	f7ff fc4c 	bl	8003508 <complete_dd_task>
		}

		if (taskNode->task_type == DD_APERIODIC) {
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	7a1b      	ldrb	r3, [r3, #8]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d1c7      	bne.n	8003c08 <Periodic_Task_Routine+0x20>
			delete_dd_task(taskNode->task_handle);
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff fc8d 	bl	800359c <delete_dd_task>
		if (taskNode->task_state == ActiveState) {
 8003c82:	e7c1      	b.n	8003c08 <Periodic_Task_Routine+0x20>
 8003c84:	080052e8 	.word	0x080052e8

08003c88 <Task1_Generator>:
 *
 *
 *
 */

void Task1_Generator(void *pvParameters) {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]

	pTaskHandle_t newTask = Create_DD_Task_Node();
 8003c90:	f7ff ff80 	bl	8003b94 <Create_DD_Task_Node>
 8003c94:	6178      	str	r0, [r7, #20]

	TickType_t deadline = task1_PERIOD;
 8003c96:	23fa      	movs	r3, #250	; 0xfa
 8003c98:	613b      	str	r3, [r7, #16]

	newTask->task_function = Periodic_Task_Routine;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	4a0e      	ldr	r2, [pc, #56]	; (8003cd8 <Task1_Generator+0x50>)
 8003c9e:	605a      	str	r2, [r3, #4]
	newTask->task_name = "Task1";
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	4a0e      	ldr	r2, [pc, #56]	; (8003cdc <Task1_Generator+0x54>)
 8003ca4:	60da      	str	r2, [r3, #12]
	newTask->task_type = DD_PERIODIC;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	721a      	strb	r2, [r3, #8]
	newTask->execution_time = task1_ET;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	225f      	movs	r2, #95	; 0x5f
 8003cb0:	615a      	str	r2, [r3, #20]

	TickType_t currentTime = xTaskGetTickCount();
 8003cb2:	f7fe f8d7 	bl	8001e64 <xTaskGetTickCount>
 8003cb6:	60f8      	str	r0, [r7, #12]
	newTask->release_time = currentTime;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	611a      	str	r2, [r3, #16]
	newTask->absolute_deadline = currentTime + deadline;
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	441a      	add	r2, r3
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	619a      	str	r2, [r3, #24]

	while (1) {

		create_dd_task(newTask);
 8003cc8:	6978      	ldr	r0, [r7, #20]
 8003cca:	f7ff fb39 	bl	8003340 <create_dd_task>

		vTaskDelay(deadline);
 8003cce:	6938      	ldr	r0, [r7, #16]
 8003cd0:	f7fd fdb8 	bl	8001844 <vTaskDelay>
		create_dd_task(newTask);
 8003cd4:	e7f8      	b.n	8003cc8 <Task1_Generator+0x40>
 8003cd6:	bf00      	nop
 8003cd8:	08003be9 	.word	0x08003be9
 8003cdc:	08005314 	.word	0x08005314

08003ce0 <Task2_Generator>:

	}
}

void Task2_Generator(void *pvParameters) {
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]

	TickType_t deadline = task2_PERIOD;
 8003ce8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003cec:	617b      	str	r3, [r7, #20]
	pTaskHandle_t newTask = Create_DD_Task_Node();
 8003cee:	f7ff ff51 	bl	8003b94 <Create_DD_Task_Node>
 8003cf2:	6138      	str	r0, [r7, #16]

	newTask->task_function = Periodic_Task_Routine;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	4a0e      	ldr	r2, [pc, #56]	; (8003d30 <Task2_Generator+0x50>)
 8003cf8:	605a      	str	r2, [r3, #4]
	newTask->task_name = "Task2";
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	4a0d      	ldr	r2, [pc, #52]	; (8003d34 <Task2_Generator+0x54>)
 8003cfe:	60da      	str	r2, [r3, #12]
	newTask->task_type = DD_PERIODIC;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	2200      	movs	r2, #0
 8003d04:	721a      	strb	r2, [r3, #8]
	newTask->execution_time = task2_ET;
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	2296      	movs	r2, #150	; 0x96
 8003d0a:	615a      	str	r2, [r3, #20]

	TickType_t currentTime = xTaskGetTickCount();
 8003d0c:	f7fe f8aa 	bl	8001e64 <xTaskGetTickCount>
 8003d10:	60f8      	str	r0, [r7, #12]
	newTask->release_time = currentTime;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	611a      	str	r2, [r3, #16]
	newTask->absolute_deadline = currentTime + deadline;
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	441a      	add	r2, r3
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	619a      	str	r2, [r3, #24]

	while (1) {

		create_dd_task(newTask);
 8003d22:	6938      	ldr	r0, [r7, #16]
 8003d24:	f7ff fb0c 	bl	8003340 <create_dd_task>

		vTaskDelay(deadline);
 8003d28:	6978      	ldr	r0, [r7, #20]
 8003d2a:	f7fd fd8b 	bl	8001844 <vTaskDelay>
		create_dd_task(newTask);
 8003d2e:	e7f8      	b.n	8003d22 <Task2_Generator+0x42>
 8003d30:	08003be9 	.word	0x08003be9
 8003d34:	0800531c 	.word	0x0800531c

08003d38 <Task3_Generator>:

	}
}

void Task3_Generator(void *pvParameters) {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
	TickType_t deadline = task3_PERIOD;
 8003d40:	f240 23ee 	movw	r3, #750	; 0x2ee
 8003d44:	617b      	str	r3, [r7, #20]
	pTaskHandle_t newTask = Create_DD_Task_Node();
 8003d46:	f7ff ff25 	bl	8003b94 <Create_DD_Task_Node>
 8003d4a:	6138      	str	r0, [r7, #16]

	newTask->task_function = Periodic_Task_Routine;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	4a0e      	ldr	r2, [pc, #56]	; (8003d88 <Task3_Generator+0x50>)
 8003d50:	605a      	str	r2, [r3, #4]
	newTask->task_name = "Task3";
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	4a0d      	ldr	r2, [pc, #52]	; (8003d8c <Task3_Generator+0x54>)
 8003d56:	60da      	str	r2, [r3, #12]
	newTask->task_type = DD_PERIODIC;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	721a      	strb	r2, [r3, #8]
	newTask->execution_time = task3_ET;
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	22fa      	movs	r2, #250	; 0xfa
 8003d62:	615a      	str	r2, [r3, #20]

	TickType_t currentTime = xTaskGetTickCount();
 8003d64:	f7fe f87e 	bl	8001e64 <xTaskGetTickCount>
 8003d68:	60f8      	str	r0, [r7, #12]
	newTask->release_time = currentTime;
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	611a      	str	r2, [r3, #16]
	newTask->absolute_deadline = currentTime + deadline;
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	441a      	add	r2, r3
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	619a      	str	r2, [r3, #24]

	while (1) {

		create_dd_task(newTask);
 8003d7a:	6938      	ldr	r0, [r7, #16]
 8003d7c:	f7ff fae0 	bl	8003340 <create_dd_task>

		vTaskDelay(deadline);
 8003d80:	6978      	ldr	r0, [r7, #20]
 8003d82:	f7fd fd5f 	bl	8001844 <vTaskDelay>
		create_dd_task(newTask);
 8003d86:	e7f8      	b.n	8003d7a <Task3_Generator+0x42>
 8003d88:	08003be9 	.word	0x08003be9
 8003d8c:	08005324 	.word	0x08005324

08003d90 <Read_User_Defined_Tasks>:

xQueueHandle xDDS_Msg_Queue;
xQueueHandle xMonitor_Msg_Queue;


void Read_User_Defined_Tasks(void){
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af02      	add	r7, sp, #8

	xTaskCreate(Task1_Generator,"_Task_1", configMINIMAL_STACK_SIZE, NULL, PriorityLevel_UTIL, &taskHandle1);
 8003d96:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <Read_User_Defined_Tasks+0x48>)
 8003d98:	9301      	str	r3, [sp, #4]
 8003d9a:	2308      	movs	r3, #8
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	2282      	movs	r2, #130	; 0x82
 8003da2:	490e      	ldr	r1, [pc, #56]	; (8003ddc <Read_User_Defined_Tasks+0x4c>)
 8003da4:	480e      	ldr	r0, [pc, #56]	; (8003de0 <Read_User_Defined_Tasks+0x50>)
 8003da6:	f7fd fb8d 	bl	80014c4 <xTaskCreate>
	xTaskCreate(Task2_Generator,"_Task_2", configMINIMAL_STACK_SIZE, NULL, PriorityLevel_UTIL, &taskHandle2);
 8003daa:	4b0e      	ldr	r3, [pc, #56]	; (8003de4 <Read_User_Defined_Tasks+0x54>)
 8003dac:	9301      	str	r3, [sp, #4]
 8003dae:	2308      	movs	r3, #8
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	2300      	movs	r3, #0
 8003db4:	2282      	movs	r2, #130	; 0x82
 8003db6:	490c      	ldr	r1, [pc, #48]	; (8003de8 <Read_User_Defined_Tasks+0x58>)
 8003db8:	480c      	ldr	r0, [pc, #48]	; (8003dec <Read_User_Defined_Tasks+0x5c>)
 8003dba:	f7fd fb83 	bl	80014c4 <xTaskCreate>
	xTaskCreate(Task3_Generator,"_Task_3", configMINIMAL_STACK_SIZE, NULL, PriorityLevel_UTIL, &taskHandle3);
 8003dbe:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <Read_User_Defined_Tasks+0x60>)
 8003dc0:	9301      	str	r3, [sp, #4]
 8003dc2:	2308      	movs	r3, #8
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	2282      	movs	r2, #130	; 0x82
 8003dca:	490a      	ldr	r1, [pc, #40]	; (8003df4 <Read_User_Defined_Tasks+0x64>)
 8003dcc:	480a      	ldr	r0, [pc, #40]	; (8003df8 <Read_User_Defined_Tasks+0x68>)
 8003dce:	f7fd fb79 	bl	80014c4 <xTaskCreate>

}
 8003dd2:	bf00      	nop
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	2000cb3c 	.word	0x2000cb3c
 8003ddc:	0800532c 	.word	0x0800532c
 8003de0:	08003c89 	.word	0x08003c89
 8003de4:	2000cb28 	.word	0x2000cb28
 8003de8:	08005334 	.word	0x08005334
 8003dec:	08003ce1 	.word	0x08003ce1
 8003df0:	2000cb24 	.word	0x2000cb24
 8003df4:	0800533c 	.word	0x0800533c
 8003df8:	08003d39 	.word	0x08003d39

08003dfc <main>:



int main(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0

	// Crate Queue for DDS Communication
	xDDS_Msg_Queue = xQueueCreate(MAX_NUM_DDS_MSGS, sizeof(DD_Message_t));
 8003e00:	2200      	movs	r2, #0
 8003e02:	2114      	movs	r1, #20
 8003e04:	2005      	movs	r0, #5
 8003e06:	f7fc fef9 	bl	8000bfc <xQueueGenericCreate>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	4b0f      	ldr	r3, [pc, #60]	; (8003e4c <main+0x50>)
 8003e0e:	601a      	str	r2, [r3, #0]

	vQueueAddToRegistry(xDDS_Msg_Queue, "DDS Queue");
 8003e10:	4b0e      	ldr	r3, [pc, #56]	; (8003e4c <main+0x50>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	490e      	ldr	r1, [pc, #56]	; (8003e50 <main+0x54>)
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fd faf8 	bl	800140c <vQueueAddToRegistry>

	//Create  Queue for Monitor Messages
	xMonitor_Msg_Queue = xQueueCreate(MAX_NUM_MONITOR_MSGS,
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2114      	movs	r1, #20
 8003e20:	2002      	movs	r0, #2
 8003e22:	f7fc feeb 	bl	8000bfc <xQueueGenericCreate>
 8003e26:	4602      	mov	r2, r0
 8003e28:	4b0a      	ldr	r3, [pc, #40]	; (8003e54 <main+0x58>)
 8003e2a:	601a      	str	r2, [r3, #0]
	sizeof(DD_Message_t)); // Should only ever have 2 requests on the queue.


	vQueueAddToRegistry(xMonitor_Msg_Queue, "Monitor Queue");
 8003e2c:	4b09      	ldr	r3, [pc, #36]	; (8003e54 <main+0x58>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4909      	ldr	r1, [pc, #36]	; (8003e58 <main+0x5c>)
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fd faea 	bl	800140c <vQueueAddToRegistry>


	DDS_Init(); //Initalize DDS
 8003e38:	f7ff fbde 	bl	80035f8 <DDS_Init>
	Read_User_Defined_Tasks(); // Read User defined task
 8003e3c:	f7ff ffa8 	bl	8003d90 <Read_User_Defined_Tasks>
    vTaskStartScheduler(); // Start Scheduler
 8003e40:	f7fd ff1a 	bl	8001c78 <vTaskStartScheduler>
 8003e44:	2300      	movs	r3, #0

}
 8003e46:	4618      	mov	r0, r3
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	2000cb4c 	.word	0x2000cb4c
 8003e50:	08005344 	.word	0x08005344
 8003e54:	2000cb48 	.word	0x2000cb48
 8003e58:	08005350 	.word	0x08005350

08003e5c <vApplicationMallocFailedHook>:




void vApplicationMallocFailedHook( void )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software 
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

	printf("MALLOC FAILED DIPSHIT\n");
 8003e60:	4801      	ldr	r0, [pc, #4]	; (8003e68 <vApplicationMallocFailedHook+0xc>)
 8003e62:	f000 fc3d 	bl	80046e0 <puts>
	for( ;; );
 8003e66:	e7fe      	b.n	8003e66 <vApplicationMallocFailedHook+0xa>
 8003e68:	08005360 	.word	0x08005360

08003e6c <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected.  pxCurrentTCB can be
	inspected in the debugger if the task name passed into this function is
	corrupt. */

	printf("STATIC STACK OVERFLOW DIPSHIT!\n");
 8003e76:	4802      	ldr	r0, [pc, #8]	; (8003e80 <vApplicationStackOverflowHook+0x14>)
 8003e78:	f000 fc32 	bl	80046e0 <puts>
	for( ;; );
 8003e7c:	e7fe      	b.n	8003e7c <vApplicationStackOverflowHook+0x10>
 8003e7e:	bf00      	nop
 8003e80:	08005378 	.word	0x08005378

08003e84 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
	FreeRTOSConfig.h.

	This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amount of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 8003e8a:	f7fc fd87 	bl	800099c <xPortGetFreeHeapSize>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 8003e92:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 8003e94:	bf00      	nop
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003e9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003e9e:	e003      	b.n	8003ea8 <LoopCopyDataInit>

08003ea0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8003ea2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ea4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003ea6:	3104      	adds	r1, #4

08003ea8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ea8:	480a      	ldr	r0, [pc, #40]	; (8003ed4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8003eaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8003eac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003eae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003eb0:	d3f6      	bcc.n	8003ea0 <CopyDataInit>
  ldr  r2, =_sbss
 8003eb2:	4a0a      	ldr	r2, [pc, #40]	; (8003edc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8003eb4:	e002      	b.n	8003ebc <LoopFillZerobss>

08003eb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003eb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003eb8:	f842 3b04 	str.w	r3, [r2], #4

08003ebc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003ebc:	4b08      	ldr	r3, [pc, #32]	; (8003ee0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8003ebe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003ec0:	d3f9      	bcc.n	8003eb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003ec2:	f000 f8f3 	bl	80040ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ec6:	f000 fb63 	bl	8004590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003eca:	f7ff ff97 	bl	8003dfc <main>
  bx  lr    
 8003ece:	4770      	bx	lr
  ldr  r3, =_sidata
 8003ed0:	0800541c 	.word	0x0800541c
  ldr  r0, =_sdata
 8003ed4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003ed8:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8003edc:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8003ee0:	2000cb54 	.word	0x2000cb54

08003ee4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ee4:	e7fe      	b.n	8003ee4 <ADC_IRQHandler>

08003ee6 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	af00      	add	r7, sp, #0
}
 8003eea:	bf00      	nop
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003ef8:	e7fe      	b.n	8003ef8 <HardFault_Handler+0x4>

08003efa <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003efa:	b480      	push	{r7}
 8003efc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003efe:	e7fe      	b.n	8003efe <MemManage_Handler+0x4>

08003f00 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003f04:	e7fe      	b.n	8003f04 <BusFault_Handler+0x4>

08003f06 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003f06:	b480      	push	{r7}
 8003f08:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003f0a:	e7fe      	b.n	8003f0a <UsageFault_Handler+0x4>

08003f0c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
}
 8003f10:	bf00      	nop
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
	...

08003f1c <ITM_SendChar>:

    \param [in]     ch  Character to transmit
    \return             Character to transmit
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8003f24:	4b13      	ldr	r3, [pc, #76]	; (8003f74 <ITM_SendChar+0x58>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01a      	beq.n	8003f66 <ITM_SendChar+0x4a>
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8003f30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003f34:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003f38:	f003 0301 	and.w	r3, r3, #1
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d012      	beq.n	8003f66 <ITM_SendChar+0x4a>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 8003f40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003f44:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003f48:	f003 0301 	and.w	r3, r3, #1
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <ITM_SendChar+0x4a>
  {
    while (ITM->PORT[0].u32 == 0);
 8003f50:	bf00      	nop
 8003f52:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0fa      	beq.n	8003f52 <ITM_SendChar+0x36>
    ITM->PORT[0].u8 = (uint8_t) ch;
 8003f5c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003f66:	687b      	ldr	r3, [r7, #4]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	e000edf0 	.word	0xe000edf0

08003f78 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int file, char *ptr, int len)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
 /* Implement your write code here, this is used by
puts and printf for example */
 int i=0;
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]
 for(i=0 ; i<len ; i++)
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	e009      	b.n	8003fa2 <_write+0x2a>
	 ITM_SendChar((*ptr++));
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	60ba      	str	r2, [r7, #8]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff ffc0 	bl	8003f1c <ITM_SendChar>
 for(i=0 ; i<len ; i++)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	dbf1      	blt.n	8003f8e <_write+0x16>
 return len;
 8003faa:	687b      	ldr	r3, [r7, #4]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <_sbrk>:


void * _sbrk(int32_t incr)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <_sbrk+0x38>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d102      	bne.n	8003fca <_sbrk+0x16>
		heap_end = & end;
 8003fc4:	4b09      	ldr	r3, [pc, #36]	; (8003fec <_sbrk+0x38>)
 8003fc6:	4a0a      	ldr	r2, [pc, #40]	; (8003ff0 <_sbrk+0x3c>)
 8003fc8:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8003fca:	4b08      	ldr	r3, [pc, #32]	; (8003fec <_sbrk+0x38>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8003fd0:	4b06      	ldr	r3, [pc, #24]	; (8003fec <_sbrk+0x38>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	4a04      	ldr	r2, [pc, #16]	; (8003fec <_sbrk+0x38>)
 8003fda:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	2000ca5c 	.word	0x2000ca5c
 8003ff0:	2000cb54 	.word	0x2000cb54

08003ff4 <_close>:

int _close(int32_t file)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <_close+0x20>)
 8003ffe:	2258      	movs	r2, #88	; 0x58
 8004000:	601a      	str	r2, [r3, #0]
	return -1;
 8004002:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004006:	4618      	mov	r0, r3
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	2000cb50 	.word	0x2000cb50

08004018 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 8004022:	4b05      	ldr	r3, [pc, #20]	; (8004038 <_fstat+0x20>)
 8004024:	2258      	movs	r2, #88	; 0x58
 8004026:	601a      	str	r2, [r3, #0]
	return -1;
 8004028:	f04f 33ff 	mov.w	r3, #4294967295
}
 800402c:	4618      	mov	r0, r3
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	2000cb50 	.word	0x2000cb50

0800403c <_isatty>:

int _isatty(int32_t file)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8004044:	4b04      	ldr	r3, [pc, #16]	; (8004058 <_isatty+0x1c>)
 8004046:	2258      	movs	r2, #88	; 0x58
 8004048:	601a      	str	r2, [r3, #0]
	return 0;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	2000cb50 	.word	0x2000cb50

0800405c <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8004068:	4b05      	ldr	r3, [pc, #20]	; (8004080 <_lseek+0x24>)
 800406a:	2258      	movs	r2, #88	; 0x58
 800406c:	601a      	str	r2, [r3, #0]
	return -1;
 800406e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004072:	4618      	mov	r0, r3
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	2000cb50 	.word	0x2000cb50

08004084 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8004090:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <_read+0x24>)
 8004092:	2258      	movs	r2, #88	; 0x58
 8004094:	601a      	str	r2, [r3, #0]
	return -1;
 8004096:	f04f 33ff 	mov.w	r3, #4294967295
}
 800409a:	4618      	mov	r0, r3
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	2000cb50 	.word	0x2000cb50

080040ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040b0:	4a16      	ldr	r2, [pc, #88]	; (800410c <SystemInit+0x60>)
 80040b2:	4b16      	ldr	r3, [pc, #88]	; (800410c <SystemInit+0x60>)
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80040c0:	4a13      	ldr	r2, [pc, #76]	; (8004110 <SystemInit+0x64>)
 80040c2:	4b13      	ldr	r3, [pc, #76]	; (8004110 <SystemInit+0x64>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80040cc:	4b10      	ldr	r3, [pc, #64]	; (8004110 <SystemInit+0x64>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80040d2:	4a0f      	ldr	r2, [pc, #60]	; (8004110 <SystemInit+0x64>)
 80040d4:	4b0e      	ldr	r3, [pc, #56]	; (8004110 <SystemInit+0x64>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80040dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80040e2:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <SystemInit+0x64>)
 80040e4:	4a0b      	ldr	r2, [pc, #44]	; (8004114 <SystemInit+0x68>)
 80040e6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80040e8:	4a09      	ldr	r2, [pc, #36]	; (8004110 <SystemInit+0x64>)
 80040ea:	4b09      	ldr	r3, [pc, #36]	; (8004110 <SystemInit+0x64>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80040f4:	4b06      	ldr	r3, [pc, #24]	; (8004110 <SystemInit+0x64>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80040fa:	f000 f80d 	bl	8004118 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80040fe:	4b03      	ldr	r3, [pc, #12]	; (800410c <SystemInit+0x60>)
 8004100:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004104:	609a      	str	r2, [r3, #8]
#endif
}
 8004106:	bf00      	nop
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	e000ed00 	.word	0xe000ed00
 8004110:	40023800 	.word	0x40023800
 8004114:	24003010 	.word	0x24003010

08004118 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800411e:	2300      	movs	r3, #0
 8004120:	607b      	str	r3, [r7, #4]
 8004122:	2300      	movs	r3, #0
 8004124:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8004126:	4a36      	ldr	r2, [pc, #216]	; (8004200 <SetSysClock+0xe8>)
 8004128:	4b35      	ldr	r3, [pc, #212]	; (8004200 <SetSysClock+0xe8>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004130:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004132:	4b33      	ldr	r3, [pc, #204]	; (8004200 <SetSysClock+0xe8>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3301      	adds	r3, #1
 8004140:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d103      	bne.n	8004150 <SetSysClock+0x38>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800414e:	d1f0      	bne.n	8004132 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004150:	4b2b      	ldr	r3, [pc, #172]	; (8004200 <SetSysClock+0xe8>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800415c:	2301      	movs	r3, #1
 800415e:	603b      	str	r3, [r7, #0]
 8004160:	e001      	b.n	8004166 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8004162:	2300      	movs	r3, #0
 8004164:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d142      	bne.n	80041f2 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800416c:	4a24      	ldr	r2, [pc, #144]	; (8004200 <SetSysClock+0xe8>)
 800416e:	4b24      	ldr	r3, [pc, #144]	; (8004200 <SetSysClock+0xe8>)
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004176:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8004178:	4a22      	ldr	r2, [pc, #136]	; (8004204 <SetSysClock+0xec>)
 800417a:	4b22      	ldr	r3, [pc, #136]	; (8004204 <SetSysClock+0xec>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004182:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8004184:	4a1e      	ldr	r2, [pc, #120]	; (8004200 <SetSysClock+0xe8>)
 8004186:	4b1e      	ldr	r3, [pc, #120]	; (8004200 <SetSysClock+0xe8>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800418c:	4a1c      	ldr	r2, [pc, #112]	; (8004200 <SetSysClock+0xe8>)
 800418e:	4b1c      	ldr	r3, [pc, #112]	; (8004200 <SetSysClock+0xe8>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004196:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004198:	4a19      	ldr	r2, [pc, #100]	; (8004200 <SetSysClock+0xe8>)
 800419a:	4b19      	ldr	r3, [pc, #100]	; (8004200 <SetSysClock+0xe8>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80041a2:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80041a4:	4b16      	ldr	r3, [pc, #88]	; (8004200 <SetSysClock+0xe8>)
 80041a6:	4a18      	ldr	r2, [pc, #96]	; (8004208 <SetSysClock+0xf0>)
 80041a8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80041aa:	4a15      	ldr	r2, [pc, #84]	; (8004200 <SetSysClock+0xe8>)
 80041ac:	4b14      	ldr	r3, [pc, #80]	; (8004200 <SetSysClock+0xe8>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041b4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80041b6:	bf00      	nop
 80041b8:	4b11      	ldr	r3, [pc, #68]	; (8004200 <SetSysClock+0xe8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0f9      	beq.n	80041b8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80041c4:	4b11      	ldr	r3, [pc, #68]	; (800420c <SetSysClock+0xf4>)
 80041c6:	f240 6205 	movw	r2, #1541	; 0x605
 80041ca:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80041cc:	4a0c      	ldr	r2, [pc, #48]	; (8004200 <SetSysClock+0xe8>)
 80041ce:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <SetSysClock+0xe8>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f023 0303 	bic.w	r3, r3, #3
 80041d6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80041d8:	4a09      	ldr	r2, [pc, #36]	; (8004200 <SetSysClock+0xe8>)
 80041da:	4b09      	ldr	r3, [pc, #36]	; (8004200 <SetSysClock+0xe8>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f043 0302 	orr.w	r3, r3, #2
 80041e2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 80041e4:	bf00      	nop
 80041e6:	4b06      	ldr	r3, [pc, #24]	; (8004200 <SetSysClock+0xe8>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 030c 	and.w	r3, r3, #12
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d1f9      	bne.n	80041e6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	40023800 	.word	0x40023800
 8004204:	40007000 	.word	0x40007000
 8004208:	07405408 	.word	0x07405408
 800420c:	40023c00 	.word	0x40023c00

08004210 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
	int div = 1;
 800421c:	2301      	movs	r3, #1
 800421e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8004220:	e004      	b.n	800422c <ts_itoa+0x1c>
		div *= base;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	fb02 f303 	mul.w	r3, r2, r3
 800422a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	fbb2 f2f3 	udiv	r2, r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	429a      	cmp	r2, r3
 8004238:	d2f3      	bcs.n	8004222 <ts_itoa+0x12>

	while (div != 0)
 800423a:	e029      	b.n	8004290 <ts_itoa+0x80>
	{
		int num = d/div;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	fbb2 f3f3 	udiv	r3, r2, r3
 8004244:	613b      	str	r3, [r7, #16]
		d = d%div;
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	fbb3 f1f2 	udiv	r1, r3, r2
 800424e:	fb02 f201 	mul.w	r2, r2, r1
 8004252:	1a9b      	subs	r3, r3, r2
 8004254:	60bb      	str	r3, [r7, #8]
		div /= base;
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	fb92 f3f3 	sdiv	r3, r2, r3
 800425e:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	2b09      	cmp	r3, #9
 8004264:	dd0a      	ble.n	800427c <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	1c59      	adds	r1, r3, #1
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	6011      	str	r1, [r2, #0]
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	3237      	adds	r2, #55	; 0x37
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]
 800427a:	e009      	b.n	8004290 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	1c59      	adds	r1, r3, #1
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	6011      	str	r1, [r2, #0]
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	b2d2      	uxtb	r2, r2
 800428a:	3230      	adds	r2, #48	; 0x30
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1d2      	bne.n	800423c <ts_itoa+0x2c>
	}
}
 8004296:	bf00      	nop
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b088      	sub	sp, #32
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80042b2:	e07d      	b.n	80043b0 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b25      	cmp	r3, #37	; 0x25
 80042ba:	d171      	bne.n	80043a0 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	3301      	adds	r3, #1
 80042c0:	60bb      	str	r3, [r7, #8]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b64      	cmp	r3, #100	; 0x64
 80042c8:	d01e      	beq.n	8004308 <ts_formatstring+0x66>
 80042ca:	2b64      	cmp	r3, #100	; 0x64
 80042cc:	dc06      	bgt.n	80042dc <ts_formatstring+0x3a>
 80042ce:	2b58      	cmp	r3, #88	; 0x58
 80042d0:	d050      	beq.n	8004374 <ts_formatstring+0xd2>
 80042d2:	2b63      	cmp	r3, #99	; 0x63
 80042d4:	d00e      	beq.n	80042f4 <ts_formatstring+0x52>
 80042d6:	2b25      	cmp	r3, #37	; 0x25
 80042d8:	d058      	beq.n	800438c <ts_formatstring+0xea>
 80042da:	e05d      	b.n	8004398 <ts_formatstring+0xf6>
 80042dc:	2b73      	cmp	r3, #115	; 0x73
 80042de:	d02b      	beq.n	8004338 <ts_formatstring+0x96>
 80042e0:	2b73      	cmp	r3, #115	; 0x73
 80042e2:	dc02      	bgt.n	80042ea <ts_formatstring+0x48>
 80042e4:	2b69      	cmp	r3, #105	; 0x69
 80042e6:	d00f      	beq.n	8004308 <ts_formatstring+0x66>
 80042e8:	e056      	b.n	8004398 <ts_formatstring+0xf6>
 80042ea:	2b75      	cmp	r3, #117	; 0x75
 80042ec:	d037      	beq.n	800435e <ts_formatstring+0xbc>
 80042ee:	2b78      	cmp	r3, #120	; 0x78
 80042f0:	d040      	beq.n	8004374 <ts_formatstring+0xd2>
 80042f2:	e051      	b.n	8004398 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	1c5a      	adds	r2, r3, #1
 80042f8:	60fa      	str	r2, [r7, #12]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	1d11      	adds	r1, r2, #4
 80042fe:	6079      	str	r1, [r7, #4]
 8004300:	6812      	ldr	r2, [r2, #0]
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	701a      	strb	r2, [r3, #0]
				break;
 8004306:	e047      	b.n	8004398 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	1d1a      	adds	r2, r3, #4
 800430c:	607a      	str	r2, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	2b00      	cmp	r3, #0
 8004316:	da07      	bge.n	8004328 <ts_formatstring+0x86>
					{
						val *= -1;
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	425b      	negs	r3, r3
 800431c:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	60fa      	str	r2, [r7, #12]
 8004324:	222d      	movs	r2, #45	; 0x2d
 8004326:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8004328:	69f9      	ldr	r1, [r7, #28]
 800432a:	f107 030c 	add.w	r3, r7, #12
 800432e:	220a      	movs	r2, #10
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff ff6d 	bl	8004210 <ts_itoa>
				}
				break;
 8004336:	e02f      	b.n	8004398 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	1d1a      	adds	r2, r3, #4
 800433c:	607a      	str	r2, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8004342:	e007      	b.n	8004354 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	60fa      	str	r2, [r7, #12]
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	1c51      	adds	r1, r2, #1
 800434e:	61b9      	str	r1, [r7, #24]
 8004350:	7812      	ldrb	r2, [r2, #0]
 8004352:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1f3      	bne.n	8004344 <ts_formatstring+0xa2>
					}
				}
				break;
 800435c:	e01c      	b.n	8004398 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	1d1a      	adds	r2, r3, #4
 8004362:	607a      	str	r2, [r7, #4]
 8004364:	6819      	ldr	r1, [r3, #0]
 8004366:	f107 030c 	add.w	r3, r7, #12
 800436a:	220a      	movs	r2, #10
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff ff4f 	bl	8004210 <ts_itoa>
				break;
 8004372:	e011      	b.n	8004398 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	1d1a      	adds	r2, r3, #4
 8004378:	607a      	str	r2, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4619      	mov	r1, r3
 800437e:	f107 030c 	add.w	r3, r7, #12
 8004382:	2210      	movs	r2, #16
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff ff43 	bl	8004210 <ts_itoa>
				break;
 800438a:	e005      	b.n	8004398 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	60fa      	str	r2, [r7, #12]
 8004392:	2225      	movs	r2, #37	; 0x25
 8004394:	701a      	strb	r2, [r3, #0]
				  break;
 8004396:	bf00      	nop
			}
			fmt++;
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	3301      	adds	r3, #1
 800439c:	60bb      	str	r3, [r7, #8]
 800439e:	e007      	b.n	80043b0 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	60fa      	str	r2, [r7, #12]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	1c51      	adds	r1, r2, #1
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	7812      	ldrb	r2, [r2, #0]
 80043ae:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f47f af7d 	bne.w	80042b4 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	461a      	mov	r2, r3
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	1ad3      	subs	r3, r2, r3
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3720      	adds	r7, #32
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
	int length = 0;
 80043da:	2300      	movs	r3, #0
 80043dc:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 80043de:	e081      	b.n	80044e4 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b25      	cmp	r3, #37	; 0x25
 80043e6:	d177      	bne.n	80044d8 <ts_formatlength+0x108>
		{
			++fmt;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3301      	adds	r3, #1
 80043ec:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	3b58      	subs	r3, #88	; 0x58
 80043f4:	2b20      	cmp	r3, #32
 80043f6:	d86a      	bhi.n	80044ce <ts_formatlength+0xfe>
 80043f8:	a201      	add	r2, pc, #4	; (adr r2, 8004400 <ts_formatlength+0x30>)
 80043fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fe:	bf00      	nop
 8004400:	080044c1 	.word	0x080044c1
 8004404:	080044cf 	.word	0x080044cf
 8004408:	080044cf 	.word	0x080044cf
 800440c:	080044cf 	.word	0x080044cf
 8004410:	080044cf 	.word	0x080044cf
 8004414:	080044cf 	.word	0x080044cf
 8004418:	080044cf 	.word	0x080044cf
 800441c:	080044cf 	.word	0x080044cf
 8004420:	080044cf 	.word	0x080044cf
 8004424:	080044cf 	.word	0x080044cf
 8004428:	080044cf 	.word	0x080044cf
 800442c:	08004485 	.word	0x08004485
 8004430:	08004493 	.word	0x08004493
 8004434:	080044cf 	.word	0x080044cf
 8004438:	080044cf 	.word	0x080044cf
 800443c:	080044cf 	.word	0x080044cf
 8004440:	080044cf 	.word	0x080044cf
 8004444:	08004493 	.word	0x08004493
 8004448:	080044cf 	.word	0x080044cf
 800444c:	080044cf 	.word	0x080044cf
 8004450:	080044cf 	.word	0x080044cf
 8004454:	080044cf 	.word	0x080044cf
 8004458:	080044cf 	.word	0x080044cf
 800445c:	080044cf 	.word	0x080044cf
 8004460:	080044cf 	.word	0x080044cf
 8004464:	080044cf 	.word	0x080044cf
 8004468:	080044cf 	.word	0x080044cf
 800446c:	080044a1 	.word	0x080044a1
 8004470:	080044cf 	.word	0x080044cf
 8004474:	08004493 	.word	0x08004493
 8004478:	080044cf 	.word	0x080044cf
 800447c:	080044cf 	.word	0x080044cf
 8004480:	080044c1 	.word	0x080044c1
			{
			  case 'c':
		  		  va_arg(va, int);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	3304      	adds	r3, #4
 8004488:	603b      	str	r3, [r7, #0]
				  ++length;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	3301      	adds	r3, #1
 800448e:	60fb      	str	r3, [r7, #12]
				  break;
 8004490:	e025      	b.n	80044de <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	330b      	adds	r3, #11
 8004496:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	3304      	adds	r3, #4
 800449c:	603b      	str	r3, [r7, #0]
				  break;
 800449e:	e01e      	b.n	80044de <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	1d1a      	adds	r2, r3, #4
 80044a4:	603a      	str	r2, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 80044aa:	e002      	b.n	80044b2 <ts_formatlength+0xe2>
			  			  ++length;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3301      	adds	r3, #1
 80044b0:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	60ba      	str	r2, [r7, #8]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f6      	bne.n	80044ac <ts_formatlength+0xdc>
			  	  }
				  break;
 80044be:	e00e      	b.n	80044de <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	3308      	adds	r3, #8
 80044c4:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	3304      	adds	r3, #4
 80044ca:	603b      	str	r3, [r7, #0]
				  break;
 80044cc:	e007      	b.n	80044de <ts_formatlength+0x10e>
			  default:
				  ++length;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	3301      	adds	r3, #1
 80044d2:	60fb      	str	r3, [r7, #12]
				  break;
 80044d4:	bf00      	nop
 80044d6:	e002      	b.n	80044de <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	3301      	adds	r3, #1
 80044dc:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3301      	adds	r3, #1
 80044e2:	607b      	str	r3, [r7, #4]
	while (*fmt)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f47f af79 	bne.w	80043e0 <ts_formatlength+0x10>
	}
	return length;
 80044ee:	68fb      	ldr	r3, [r7, #12]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <printf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int printf(const char *fmt, ...)
{
 80044fc:	b40f      	push	{r0, r1, r2, r3}
 80044fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
	int length = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 800450a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800450e:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8004510:	6839      	ldr	r1, [r7, #0]
 8004512:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004514:	f7ff ff5c 	bl	80043d0 <ts_formatlength>
 8004518:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 800451a:	466b      	mov	r3, sp
 800451c:	461e      	mov	r6, r3
		char buf[length];
 800451e:	68f9      	ldr	r1, [r7, #12]
 8004520:	1e4b      	subs	r3, r1, #1
 8004522:	60bb      	str	r3, [r7, #8]
 8004524:	460b      	mov	r3, r1
 8004526:	461a      	mov	r2, r3
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8004530:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8004534:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8004538:	460b      	mov	r3, r1
 800453a:	461a      	mov	r2, r3
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	00dd      	lsls	r5, r3, #3
 8004542:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004546:	00d4      	lsls	r4, r2, #3
 8004548:	460b      	mov	r3, r1
 800454a:	3307      	adds	r3, #7
 800454c:	08db      	lsrs	r3, r3, #3
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	ebad 0d03 	sub.w	sp, sp, r3
 8004554:	466b      	mov	r3, sp
 8004556:	3300      	adds	r3, #0
 8004558:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 800455a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800455e:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff fe9b 	bl	80042a2 <ts_formatstring>
 800456c:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4619      	mov	r1, r3
 8004574:	2001      	movs	r0, #1
 8004576:	f7ff fcff 	bl	8003f78 <_write>
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 800457e:	68fb      	ldr	r3, [r7, #12]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800458a:	b004      	add	sp, #16
 800458c:	4770      	bx	lr
	...

08004590 <__libc_init_array>:
 8004590:	b570      	push	{r4, r5, r6, lr}
 8004592:	4e0d      	ldr	r6, [pc, #52]	; (80045c8 <__libc_init_array+0x38>)
 8004594:	4c0d      	ldr	r4, [pc, #52]	; (80045cc <__libc_init_array+0x3c>)
 8004596:	1ba4      	subs	r4, r4, r6
 8004598:	10a4      	asrs	r4, r4, #2
 800459a:	2500      	movs	r5, #0
 800459c:	42a5      	cmp	r5, r4
 800459e:	d109      	bne.n	80045b4 <__libc_init_array+0x24>
 80045a0:	4e0b      	ldr	r6, [pc, #44]	; (80045d0 <__libc_init_array+0x40>)
 80045a2:	4c0c      	ldr	r4, [pc, #48]	; (80045d4 <__libc_init_array+0x44>)
 80045a4:	f000 ff2a 	bl	80053fc <_init>
 80045a8:	1ba4      	subs	r4, r4, r6
 80045aa:	10a4      	asrs	r4, r4, #2
 80045ac:	2500      	movs	r5, #0
 80045ae:	42a5      	cmp	r5, r4
 80045b0:	d105      	bne.n	80045be <__libc_init_array+0x2e>
 80045b2:	bd70      	pop	{r4, r5, r6, pc}
 80045b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045b8:	4798      	blx	r3
 80045ba:	3501      	adds	r5, #1
 80045bc:	e7ee      	b.n	800459c <__libc_init_array+0xc>
 80045be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045c2:	4798      	blx	r3
 80045c4:	3501      	adds	r5, #1
 80045c6:	e7f2      	b.n	80045ae <__libc_init_array+0x1e>
 80045c8:	08005414 	.word	0x08005414
 80045cc:	08005414 	.word	0x08005414
 80045d0:	08005414 	.word	0x08005414
 80045d4:	08005418 	.word	0x08005418

080045d8 <memcpy>:
 80045d8:	b510      	push	{r4, lr}
 80045da:	1e43      	subs	r3, r0, #1
 80045dc:	440a      	add	r2, r1
 80045de:	4291      	cmp	r1, r2
 80045e0:	d100      	bne.n	80045e4 <memcpy+0xc>
 80045e2:	bd10      	pop	{r4, pc}
 80045e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045ec:	e7f7      	b.n	80045de <memcpy+0x6>

080045ee <memset>:
 80045ee:	4402      	add	r2, r0
 80045f0:	4603      	mov	r3, r0
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d100      	bne.n	80045f8 <memset+0xa>
 80045f6:	4770      	bx	lr
 80045f8:	f803 1b01 	strb.w	r1, [r3], #1
 80045fc:	e7f9      	b.n	80045f2 <memset+0x4>
	...

08004600 <putchar>:
 8004600:	b538      	push	{r3, r4, r5, lr}
 8004602:	4b08      	ldr	r3, [pc, #32]	; (8004624 <putchar+0x24>)
 8004604:	681c      	ldr	r4, [r3, #0]
 8004606:	4605      	mov	r5, r0
 8004608:	b124      	cbz	r4, 8004614 <putchar+0x14>
 800460a:	69a3      	ldr	r3, [r4, #24]
 800460c:	b913      	cbnz	r3, 8004614 <putchar+0x14>
 800460e:	4620      	mov	r0, r4
 8004610:	f000 fa20 	bl	8004a54 <__sinit>
 8004614:	68a2      	ldr	r2, [r4, #8]
 8004616:	4629      	mov	r1, r5
 8004618:	4620      	mov	r0, r4
 800461a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800461e:	f000 bbb3 	b.w	8004d88 <_putc_r>
 8004622:	bf00      	nop
 8004624:	20000018 	.word	0x20000018

08004628 <_puts_r>:
 8004628:	b570      	push	{r4, r5, r6, lr}
 800462a:	460e      	mov	r6, r1
 800462c:	4605      	mov	r5, r0
 800462e:	b118      	cbz	r0, 8004638 <_puts_r+0x10>
 8004630:	6983      	ldr	r3, [r0, #24]
 8004632:	b90b      	cbnz	r3, 8004638 <_puts_r+0x10>
 8004634:	f000 fa0e 	bl	8004a54 <__sinit>
 8004638:	69ab      	ldr	r3, [r5, #24]
 800463a:	68ac      	ldr	r4, [r5, #8]
 800463c:	b913      	cbnz	r3, 8004644 <_puts_r+0x1c>
 800463e:	4628      	mov	r0, r5
 8004640:	f000 fa08 	bl	8004a54 <__sinit>
 8004644:	4b23      	ldr	r3, [pc, #140]	; (80046d4 <_puts_r+0xac>)
 8004646:	429c      	cmp	r4, r3
 8004648:	d117      	bne.n	800467a <_puts_r+0x52>
 800464a:	686c      	ldr	r4, [r5, #4]
 800464c:	89a3      	ldrh	r3, [r4, #12]
 800464e:	071b      	lsls	r3, r3, #28
 8004650:	d51d      	bpl.n	800468e <_puts_r+0x66>
 8004652:	6923      	ldr	r3, [r4, #16]
 8004654:	b1db      	cbz	r3, 800468e <_puts_r+0x66>
 8004656:	3e01      	subs	r6, #1
 8004658:	68a3      	ldr	r3, [r4, #8]
 800465a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800465e:	3b01      	subs	r3, #1
 8004660:	60a3      	str	r3, [r4, #8]
 8004662:	b9e9      	cbnz	r1, 80046a0 <_puts_r+0x78>
 8004664:	2b00      	cmp	r3, #0
 8004666:	da2e      	bge.n	80046c6 <_puts_r+0x9e>
 8004668:	4622      	mov	r2, r4
 800466a:	210a      	movs	r1, #10
 800466c:	4628      	mov	r0, r5
 800466e:	f000 f83f 	bl	80046f0 <__swbuf_r>
 8004672:	3001      	adds	r0, #1
 8004674:	d011      	beq.n	800469a <_puts_r+0x72>
 8004676:	200a      	movs	r0, #10
 8004678:	bd70      	pop	{r4, r5, r6, pc}
 800467a:	4b17      	ldr	r3, [pc, #92]	; (80046d8 <_puts_r+0xb0>)
 800467c:	429c      	cmp	r4, r3
 800467e:	d101      	bne.n	8004684 <_puts_r+0x5c>
 8004680:	68ac      	ldr	r4, [r5, #8]
 8004682:	e7e3      	b.n	800464c <_puts_r+0x24>
 8004684:	4b15      	ldr	r3, [pc, #84]	; (80046dc <_puts_r+0xb4>)
 8004686:	429c      	cmp	r4, r3
 8004688:	bf08      	it	eq
 800468a:	68ec      	ldreq	r4, [r5, #12]
 800468c:	e7de      	b.n	800464c <_puts_r+0x24>
 800468e:	4621      	mov	r1, r4
 8004690:	4628      	mov	r0, r5
 8004692:	f000 f87f 	bl	8004794 <__swsetup_r>
 8004696:	2800      	cmp	r0, #0
 8004698:	d0dd      	beq.n	8004656 <_puts_r+0x2e>
 800469a:	f04f 30ff 	mov.w	r0, #4294967295
 800469e:	bd70      	pop	{r4, r5, r6, pc}
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	da04      	bge.n	80046ae <_puts_r+0x86>
 80046a4:	69a2      	ldr	r2, [r4, #24]
 80046a6:	4293      	cmp	r3, r2
 80046a8:	db06      	blt.n	80046b8 <_puts_r+0x90>
 80046aa:	290a      	cmp	r1, #10
 80046ac:	d004      	beq.n	80046b8 <_puts_r+0x90>
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	6022      	str	r2, [r4, #0]
 80046b4:	7019      	strb	r1, [r3, #0]
 80046b6:	e7cf      	b.n	8004658 <_puts_r+0x30>
 80046b8:	4622      	mov	r2, r4
 80046ba:	4628      	mov	r0, r5
 80046bc:	f000 f818 	bl	80046f0 <__swbuf_r>
 80046c0:	3001      	adds	r0, #1
 80046c2:	d1c9      	bne.n	8004658 <_puts_r+0x30>
 80046c4:	e7e9      	b.n	800469a <_puts_r+0x72>
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	200a      	movs	r0, #10
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	6022      	str	r2, [r4, #0]
 80046ce:	7018      	strb	r0, [r3, #0]
 80046d0:	bd70      	pop	{r4, r5, r6, pc}
 80046d2:	bf00      	nop
 80046d4:	080053b8 	.word	0x080053b8
 80046d8:	080053d8 	.word	0x080053d8
 80046dc:	08005398 	.word	0x08005398

080046e0 <puts>:
 80046e0:	4b02      	ldr	r3, [pc, #8]	; (80046ec <puts+0xc>)
 80046e2:	4601      	mov	r1, r0
 80046e4:	6818      	ldr	r0, [r3, #0]
 80046e6:	f7ff bf9f 	b.w	8004628 <_puts_r>
 80046ea:	bf00      	nop
 80046ec:	20000018 	.word	0x20000018

080046f0 <__swbuf_r>:
 80046f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f2:	460e      	mov	r6, r1
 80046f4:	4614      	mov	r4, r2
 80046f6:	4605      	mov	r5, r0
 80046f8:	b118      	cbz	r0, 8004702 <__swbuf_r+0x12>
 80046fa:	6983      	ldr	r3, [r0, #24]
 80046fc:	b90b      	cbnz	r3, 8004702 <__swbuf_r+0x12>
 80046fe:	f000 f9a9 	bl	8004a54 <__sinit>
 8004702:	4b21      	ldr	r3, [pc, #132]	; (8004788 <__swbuf_r+0x98>)
 8004704:	429c      	cmp	r4, r3
 8004706:	d12a      	bne.n	800475e <__swbuf_r+0x6e>
 8004708:	686c      	ldr	r4, [r5, #4]
 800470a:	69a3      	ldr	r3, [r4, #24]
 800470c:	60a3      	str	r3, [r4, #8]
 800470e:	89a3      	ldrh	r3, [r4, #12]
 8004710:	071a      	lsls	r2, r3, #28
 8004712:	d52e      	bpl.n	8004772 <__swbuf_r+0x82>
 8004714:	6923      	ldr	r3, [r4, #16]
 8004716:	b363      	cbz	r3, 8004772 <__swbuf_r+0x82>
 8004718:	6923      	ldr	r3, [r4, #16]
 800471a:	6820      	ldr	r0, [r4, #0]
 800471c:	1ac0      	subs	r0, r0, r3
 800471e:	6963      	ldr	r3, [r4, #20]
 8004720:	b2f6      	uxtb	r6, r6
 8004722:	4298      	cmp	r0, r3
 8004724:	4637      	mov	r7, r6
 8004726:	db04      	blt.n	8004732 <__swbuf_r+0x42>
 8004728:	4621      	mov	r1, r4
 800472a:	4628      	mov	r0, r5
 800472c:	f000 f928 	bl	8004980 <_fflush_r>
 8004730:	bb28      	cbnz	r0, 800477e <__swbuf_r+0x8e>
 8004732:	68a3      	ldr	r3, [r4, #8]
 8004734:	3b01      	subs	r3, #1
 8004736:	60a3      	str	r3, [r4, #8]
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	6022      	str	r2, [r4, #0]
 800473e:	701e      	strb	r6, [r3, #0]
 8004740:	6963      	ldr	r3, [r4, #20]
 8004742:	3001      	adds	r0, #1
 8004744:	4298      	cmp	r0, r3
 8004746:	d004      	beq.n	8004752 <__swbuf_r+0x62>
 8004748:	89a3      	ldrh	r3, [r4, #12]
 800474a:	07db      	lsls	r3, r3, #31
 800474c:	d519      	bpl.n	8004782 <__swbuf_r+0x92>
 800474e:	2e0a      	cmp	r6, #10
 8004750:	d117      	bne.n	8004782 <__swbuf_r+0x92>
 8004752:	4621      	mov	r1, r4
 8004754:	4628      	mov	r0, r5
 8004756:	f000 f913 	bl	8004980 <_fflush_r>
 800475a:	b190      	cbz	r0, 8004782 <__swbuf_r+0x92>
 800475c:	e00f      	b.n	800477e <__swbuf_r+0x8e>
 800475e:	4b0b      	ldr	r3, [pc, #44]	; (800478c <__swbuf_r+0x9c>)
 8004760:	429c      	cmp	r4, r3
 8004762:	d101      	bne.n	8004768 <__swbuf_r+0x78>
 8004764:	68ac      	ldr	r4, [r5, #8]
 8004766:	e7d0      	b.n	800470a <__swbuf_r+0x1a>
 8004768:	4b09      	ldr	r3, [pc, #36]	; (8004790 <__swbuf_r+0xa0>)
 800476a:	429c      	cmp	r4, r3
 800476c:	bf08      	it	eq
 800476e:	68ec      	ldreq	r4, [r5, #12]
 8004770:	e7cb      	b.n	800470a <__swbuf_r+0x1a>
 8004772:	4621      	mov	r1, r4
 8004774:	4628      	mov	r0, r5
 8004776:	f000 f80d 	bl	8004794 <__swsetup_r>
 800477a:	2800      	cmp	r0, #0
 800477c:	d0cc      	beq.n	8004718 <__swbuf_r+0x28>
 800477e:	f04f 37ff 	mov.w	r7, #4294967295
 8004782:	4638      	mov	r0, r7
 8004784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004786:	bf00      	nop
 8004788:	080053b8 	.word	0x080053b8
 800478c:	080053d8 	.word	0x080053d8
 8004790:	08005398 	.word	0x08005398

08004794 <__swsetup_r>:
 8004794:	4b32      	ldr	r3, [pc, #200]	; (8004860 <__swsetup_r+0xcc>)
 8004796:	b570      	push	{r4, r5, r6, lr}
 8004798:	681d      	ldr	r5, [r3, #0]
 800479a:	4606      	mov	r6, r0
 800479c:	460c      	mov	r4, r1
 800479e:	b125      	cbz	r5, 80047aa <__swsetup_r+0x16>
 80047a0:	69ab      	ldr	r3, [r5, #24]
 80047a2:	b913      	cbnz	r3, 80047aa <__swsetup_r+0x16>
 80047a4:	4628      	mov	r0, r5
 80047a6:	f000 f955 	bl	8004a54 <__sinit>
 80047aa:	4b2e      	ldr	r3, [pc, #184]	; (8004864 <__swsetup_r+0xd0>)
 80047ac:	429c      	cmp	r4, r3
 80047ae:	d10f      	bne.n	80047d0 <__swsetup_r+0x3c>
 80047b0:	686c      	ldr	r4, [r5, #4]
 80047b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	0715      	lsls	r5, r2, #28
 80047ba:	d42c      	bmi.n	8004816 <__swsetup_r+0x82>
 80047bc:	06d0      	lsls	r0, r2, #27
 80047be:	d411      	bmi.n	80047e4 <__swsetup_r+0x50>
 80047c0:	2209      	movs	r2, #9
 80047c2:	6032      	str	r2, [r6, #0]
 80047c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047c8:	81a3      	strh	r3, [r4, #12]
 80047ca:	f04f 30ff 	mov.w	r0, #4294967295
 80047ce:	bd70      	pop	{r4, r5, r6, pc}
 80047d0:	4b25      	ldr	r3, [pc, #148]	; (8004868 <__swsetup_r+0xd4>)
 80047d2:	429c      	cmp	r4, r3
 80047d4:	d101      	bne.n	80047da <__swsetup_r+0x46>
 80047d6:	68ac      	ldr	r4, [r5, #8]
 80047d8:	e7eb      	b.n	80047b2 <__swsetup_r+0x1e>
 80047da:	4b24      	ldr	r3, [pc, #144]	; (800486c <__swsetup_r+0xd8>)
 80047dc:	429c      	cmp	r4, r3
 80047de:	bf08      	it	eq
 80047e0:	68ec      	ldreq	r4, [r5, #12]
 80047e2:	e7e6      	b.n	80047b2 <__swsetup_r+0x1e>
 80047e4:	0751      	lsls	r1, r2, #29
 80047e6:	d512      	bpl.n	800480e <__swsetup_r+0x7a>
 80047e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047ea:	b141      	cbz	r1, 80047fe <__swsetup_r+0x6a>
 80047ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047f0:	4299      	cmp	r1, r3
 80047f2:	d002      	beq.n	80047fa <__swsetup_r+0x66>
 80047f4:	4630      	mov	r0, r6
 80047f6:	f000 fa1b 	bl	8004c30 <_free_r>
 80047fa:	2300      	movs	r3, #0
 80047fc:	6363      	str	r3, [r4, #52]	; 0x34
 80047fe:	89a3      	ldrh	r3, [r4, #12]
 8004800:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004804:	81a3      	strh	r3, [r4, #12]
 8004806:	2300      	movs	r3, #0
 8004808:	6063      	str	r3, [r4, #4]
 800480a:	6923      	ldr	r3, [r4, #16]
 800480c:	6023      	str	r3, [r4, #0]
 800480e:	89a3      	ldrh	r3, [r4, #12]
 8004810:	f043 0308 	orr.w	r3, r3, #8
 8004814:	81a3      	strh	r3, [r4, #12]
 8004816:	6923      	ldr	r3, [r4, #16]
 8004818:	b94b      	cbnz	r3, 800482e <__swsetup_r+0x9a>
 800481a:	89a3      	ldrh	r3, [r4, #12]
 800481c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004824:	d003      	beq.n	800482e <__swsetup_r+0x9a>
 8004826:	4621      	mov	r1, r4
 8004828:	4630      	mov	r0, r6
 800482a:	f000 f9c1 	bl	8004bb0 <__smakebuf_r>
 800482e:	89a2      	ldrh	r2, [r4, #12]
 8004830:	f012 0301 	ands.w	r3, r2, #1
 8004834:	d00c      	beq.n	8004850 <__swsetup_r+0xbc>
 8004836:	2300      	movs	r3, #0
 8004838:	60a3      	str	r3, [r4, #8]
 800483a:	6963      	ldr	r3, [r4, #20]
 800483c:	425b      	negs	r3, r3
 800483e:	61a3      	str	r3, [r4, #24]
 8004840:	6923      	ldr	r3, [r4, #16]
 8004842:	b953      	cbnz	r3, 800485a <__swsetup_r+0xc6>
 8004844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004848:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800484c:	d1ba      	bne.n	80047c4 <__swsetup_r+0x30>
 800484e:	bd70      	pop	{r4, r5, r6, pc}
 8004850:	0792      	lsls	r2, r2, #30
 8004852:	bf58      	it	pl
 8004854:	6963      	ldrpl	r3, [r4, #20]
 8004856:	60a3      	str	r3, [r4, #8]
 8004858:	e7f2      	b.n	8004840 <__swsetup_r+0xac>
 800485a:	2000      	movs	r0, #0
 800485c:	e7f7      	b.n	800484e <__swsetup_r+0xba>
 800485e:	bf00      	nop
 8004860:	20000018 	.word	0x20000018
 8004864:	080053b8 	.word	0x080053b8
 8004868:	080053d8 	.word	0x080053d8
 800486c:	08005398 	.word	0x08005398

08004870 <__sflush_r>:
 8004870:	898a      	ldrh	r2, [r1, #12]
 8004872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004876:	4605      	mov	r5, r0
 8004878:	0710      	lsls	r0, r2, #28
 800487a:	460c      	mov	r4, r1
 800487c:	d45a      	bmi.n	8004934 <__sflush_r+0xc4>
 800487e:	684b      	ldr	r3, [r1, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	dc05      	bgt.n	8004890 <__sflush_r+0x20>
 8004884:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004886:	2b00      	cmp	r3, #0
 8004888:	dc02      	bgt.n	8004890 <__sflush_r+0x20>
 800488a:	2000      	movs	r0, #0
 800488c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004890:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004892:	2e00      	cmp	r6, #0
 8004894:	d0f9      	beq.n	800488a <__sflush_r+0x1a>
 8004896:	2300      	movs	r3, #0
 8004898:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800489c:	682f      	ldr	r7, [r5, #0]
 800489e:	602b      	str	r3, [r5, #0]
 80048a0:	d033      	beq.n	800490a <__sflush_r+0x9a>
 80048a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048a4:	89a3      	ldrh	r3, [r4, #12]
 80048a6:	075a      	lsls	r2, r3, #29
 80048a8:	d505      	bpl.n	80048b6 <__sflush_r+0x46>
 80048aa:	6863      	ldr	r3, [r4, #4]
 80048ac:	1ac0      	subs	r0, r0, r3
 80048ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048b0:	b10b      	cbz	r3, 80048b6 <__sflush_r+0x46>
 80048b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048b4:	1ac0      	subs	r0, r0, r3
 80048b6:	2300      	movs	r3, #0
 80048b8:	4602      	mov	r2, r0
 80048ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048bc:	6a21      	ldr	r1, [r4, #32]
 80048be:	4628      	mov	r0, r5
 80048c0:	47b0      	blx	r6
 80048c2:	1c43      	adds	r3, r0, #1
 80048c4:	89a3      	ldrh	r3, [r4, #12]
 80048c6:	d106      	bne.n	80048d6 <__sflush_r+0x66>
 80048c8:	6829      	ldr	r1, [r5, #0]
 80048ca:	291d      	cmp	r1, #29
 80048cc:	d84b      	bhi.n	8004966 <__sflush_r+0xf6>
 80048ce:	4a2b      	ldr	r2, [pc, #172]	; (800497c <__sflush_r+0x10c>)
 80048d0:	40ca      	lsrs	r2, r1
 80048d2:	07d6      	lsls	r6, r2, #31
 80048d4:	d547      	bpl.n	8004966 <__sflush_r+0xf6>
 80048d6:	2200      	movs	r2, #0
 80048d8:	6062      	str	r2, [r4, #4]
 80048da:	04d9      	lsls	r1, r3, #19
 80048dc:	6922      	ldr	r2, [r4, #16]
 80048de:	6022      	str	r2, [r4, #0]
 80048e0:	d504      	bpl.n	80048ec <__sflush_r+0x7c>
 80048e2:	1c42      	adds	r2, r0, #1
 80048e4:	d101      	bne.n	80048ea <__sflush_r+0x7a>
 80048e6:	682b      	ldr	r3, [r5, #0]
 80048e8:	b903      	cbnz	r3, 80048ec <__sflush_r+0x7c>
 80048ea:	6560      	str	r0, [r4, #84]	; 0x54
 80048ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048ee:	602f      	str	r7, [r5, #0]
 80048f0:	2900      	cmp	r1, #0
 80048f2:	d0ca      	beq.n	800488a <__sflush_r+0x1a>
 80048f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048f8:	4299      	cmp	r1, r3
 80048fa:	d002      	beq.n	8004902 <__sflush_r+0x92>
 80048fc:	4628      	mov	r0, r5
 80048fe:	f000 f997 	bl	8004c30 <_free_r>
 8004902:	2000      	movs	r0, #0
 8004904:	6360      	str	r0, [r4, #52]	; 0x34
 8004906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800490a:	6a21      	ldr	r1, [r4, #32]
 800490c:	2301      	movs	r3, #1
 800490e:	4628      	mov	r0, r5
 8004910:	47b0      	blx	r6
 8004912:	1c41      	adds	r1, r0, #1
 8004914:	d1c6      	bne.n	80048a4 <__sflush_r+0x34>
 8004916:	682b      	ldr	r3, [r5, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0c3      	beq.n	80048a4 <__sflush_r+0x34>
 800491c:	2b1d      	cmp	r3, #29
 800491e:	d001      	beq.n	8004924 <__sflush_r+0xb4>
 8004920:	2b16      	cmp	r3, #22
 8004922:	d101      	bne.n	8004928 <__sflush_r+0xb8>
 8004924:	602f      	str	r7, [r5, #0]
 8004926:	e7b0      	b.n	800488a <__sflush_r+0x1a>
 8004928:	89a3      	ldrh	r3, [r4, #12]
 800492a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800492e:	81a3      	strh	r3, [r4, #12]
 8004930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004934:	690f      	ldr	r7, [r1, #16]
 8004936:	2f00      	cmp	r7, #0
 8004938:	d0a7      	beq.n	800488a <__sflush_r+0x1a>
 800493a:	0793      	lsls	r3, r2, #30
 800493c:	680e      	ldr	r6, [r1, #0]
 800493e:	bf08      	it	eq
 8004940:	694b      	ldreq	r3, [r1, #20]
 8004942:	600f      	str	r7, [r1, #0]
 8004944:	bf18      	it	ne
 8004946:	2300      	movne	r3, #0
 8004948:	eba6 0807 	sub.w	r8, r6, r7
 800494c:	608b      	str	r3, [r1, #8]
 800494e:	f1b8 0f00 	cmp.w	r8, #0
 8004952:	dd9a      	ble.n	800488a <__sflush_r+0x1a>
 8004954:	4643      	mov	r3, r8
 8004956:	463a      	mov	r2, r7
 8004958:	6a21      	ldr	r1, [r4, #32]
 800495a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800495c:	4628      	mov	r0, r5
 800495e:	47b0      	blx	r6
 8004960:	2800      	cmp	r0, #0
 8004962:	dc07      	bgt.n	8004974 <__sflush_r+0x104>
 8004964:	89a3      	ldrh	r3, [r4, #12]
 8004966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800496a:	81a3      	strh	r3, [r4, #12]
 800496c:	f04f 30ff 	mov.w	r0, #4294967295
 8004970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004974:	4407      	add	r7, r0
 8004976:	eba8 0800 	sub.w	r8, r8, r0
 800497a:	e7e8      	b.n	800494e <__sflush_r+0xde>
 800497c:	20400001 	.word	0x20400001

08004980 <_fflush_r>:
 8004980:	b538      	push	{r3, r4, r5, lr}
 8004982:	690b      	ldr	r3, [r1, #16]
 8004984:	4605      	mov	r5, r0
 8004986:	460c      	mov	r4, r1
 8004988:	b1db      	cbz	r3, 80049c2 <_fflush_r+0x42>
 800498a:	b118      	cbz	r0, 8004994 <_fflush_r+0x14>
 800498c:	6983      	ldr	r3, [r0, #24]
 800498e:	b90b      	cbnz	r3, 8004994 <_fflush_r+0x14>
 8004990:	f000 f860 	bl	8004a54 <__sinit>
 8004994:	4b0c      	ldr	r3, [pc, #48]	; (80049c8 <_fflush_r+0x48>)
 8004996:	429c      	cmp	r4, r3
 8004998:	d109      	bne.n	80049ae <_fflush_r+0x2e>
 800499a:	686c      	ldr	r4, [r5, #4]
 800499c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049a0:	b17b      	cbz	r3, 80049c2 <_fflush_r+0x42>
 80049a2:	4621      	mov	r1, r4
 80049a4:	4628      	mov	r0, r5
 80049a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049aa:	f7ff bf61 	b.w	8004870 <__sflush_r>
 80049ae:	4b07      	ldr	r3, [pc, #28]	; (80049cc <_fflush_r+0x4c>)
 80049b0:	429c      	cmp	r4, r3
 80049b2:	d101      	bne.n	80049b8 <_fflush_r+0x38>
 80049b4:	68ac      	ldr	r4, [r5, #8]
 80049b6:	e7f1      	b.n	800499c <_fflush_r+0x1c>
 80049b8:	4b05      	ldr	r3, [pc, #20]	; (80049d0 <_fflush_r+0x50>)
 80049ba:	429c      	cmp	r4, r3
 80049bc:	bf08      	it	eq
 80049be:	68ec      	ldreq	r4, [r5, #12]
 80049c0:	e7ec      	b.n	800499c <_fflush_r+0x1c>
 80049c2:	2000      	movs	r0, #0
 80049c4:	bd38      	pop	{r3, r4, r5, pc}
 80049c6:	bf00      	nop
 80049c8:	080053b8 	.word	0x080053b8
 80049cc:	080053d8 	.word	0x080053d8
 80049d0:	08005398 	.word	0x08005398

080049d4 <_cleanup_r>:
 80049d4:	4901      	ldr	r1, [pc, #4]	; (80049dc <_cleanup_r+0x8>)
 80049d6:	f000 b8a9 	b.w	8004b2c <_fwalk_reent>
 80049da:	bf00      	nop
 80049dc:	08004981 	.word	0x08004981

080049e0 <std.isra.0>:
 80049e0:	2300      	movs	r3, #0
 80049e2:	b510      	push	{r4, lr}
 80049e4:	4604      	mov	r4, r0
 80049e6:	6003      	str	r3, [r0, #0]
 80049e8:	6043      	str	r3, [r0, #4]
 80049ea:	6083      	str	r3, [r0, #8]
 80049ec:	8181      	strh	r1, [r0, #12]
 80049ee:	6643      	str	r3, [r0, #100]	; 0x64
 80049f0:	81c2      	strh	r2, [r0, #14]
 80049f2:	6103      	str	r3, [r0, #16]
 80049f4:	6143      	str	r3, [r0, #20]
 80049f6:	6183      	str	r3, [r0, #24]
 80049f8:	4619      	mov	r1, r3
 80049fa:	2208      	movs	r2, #8
 80049fc:	305c      	adds	r0, #92	; 0x5c
 80049fe:	f7ff fdf6 	bl	80045ee <memset>
 8004a02:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <std.isra.0+0x38>)
 8004a04:	6263      	str	r3, [r4, #36]	; 0x24
 8004a06:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <std.isra.0+0x3c>)
 8004a08:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a0a:	4b05      	ldr	r3, [pc, #20]	; (8004a20 <std.isra.0+0x40>)
 8004a0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a0e:	4b05      	ldr	r3, [pc, #20]	; (8004a24 <std.isra.0+0x44>)
 8004a10:	6224      	str	r4, [r4, #32]
 8004a12:	6323      	str	r3, [r4, #48]	; 0x30
 8004a14:	bd10      	pop	{r4, pc}
 8004a16:	bf00      	nop
 8004a18:	08004e15 	.word	0x08004e15
 8004a1c:	08004e37 	.word	0x08004e37
 8004a20:	08004e6f 	.word	0x08004e6f
 8004a24:	08004e93 	.word	0x08004e93

08004a28 <__sfmoreglue>:
 8004a28:	b570      	push	{r4, r5, r6, lr}
 8004a2a:	1e4a      	subs	r2, r1, #1
 8004a2c:	2568      	movs	r5, #104	; 0x68
 8004a2e:	4355      	muls	r5, r2
 8004a30:	460e      	mov	r6, r1
 8004a32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a36:	f000 f949 	bl	8004ccc <_malloc_r>
 8004a3a:	4604      	mov	r4, r0
 8004a3c:	b140      	cbz	r0, 8004a50 <__sfmoreglue+0x28>
 8004a3e:	2100      	movs	r1, #0
 8004a40:	e880 0042 	stmia.w	r0, {r1, r6}
 8004a44:	300c      	adds	r0, #12
 8004a46:	60a0      	str	r0, [r4, #8]
 8004a48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a4c:	f7ff fdcf 	bl	80045ee <memset>
 8004a50:	4620      	mov	r0, r4
 8004a52:	bd70      	pop	{r4, r5, r6, pc}

08004a54 <__sinit>:
 8004a54:	6983      	ldr	r3, [r0, #24]
 8004a56:	b510      	push	{r4, lr}
 8004a58:	4604      	mov	r4, r0
 8004a5a:	bb33      	cbnz	r3, 8004aaa <__sinit+0x56>
 8004a5c:	6483      	str	r3, [r0, #72]	; 0x48
 8004a5e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004a60:	6503      	str	r3, [r0, #80]	; 0x50
 8004a62:	4b12      	ldr	r3, [pc, #72]	; (8004aac <__sinit+0x58>)
 8004a64:	4a12      	ldr	r2, [pc, #72]	; (8004ab0 <__sinit+0x5c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6282      	str	r2, [r0, #40]	; 0x28
 8004a6a:	4298      	cmp	r0, r3
 8004a6c:	bf04      	itt	eq
 8004a6e:	2301      	moveq	r3, #1
 8004a70:	6183      	streq	r3, [r0, #24]
 8004a72:	f000 f81f 	bl	8004ab4 <__sfp>
 8004a76:	6060      	str	r0, [r4, #4]
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f000 f81b 	bl	8004ab4 <__sfp>
 8004a7e:	60a0      	str	r0, [r4, #8]
 8004a80:	4620      	mov	r0, r4
 8004a82:	f000 f817 	bl	8004ab4 <__sfp>
 8004a86:	2200      	movs	r2, #0
 8004a88:	60e0      	str	r0, [r4, #12]
 8004a8a:	2104      	movs	r1, #4
 8004a8c:	6860      	ldr	r0, [r4, #4]
 8004a8e:	f7ff ffa7 	bl	80049e0 <std.isra.0>
 8004a92:	2201      	movs	r2, #1
 8004a94:	2109      	movs	r1, #9
 8004a96:	68a0      	ldr	r0, [r4, #8]
 8004a98:	f7ff ffa2 	bl	80049e0 <std.isra.0>
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	2112      	movs	r1, #18
 8004aa0:	68e0      	ldr	r0, [r4, #12]
 8004aa2:	f7ff ff9d 	bl	80049e0 <std.isra.0>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	61a3      	str	r3, [r4, #24]
 8004aaa:	bd10      	pop	{r4, pc}
 8004aac:	080053f8 	.word	0x080053f8
 8004ab0:	080049d5 	.word	0x080049d5

08004ab4 <__sfp>:
 8004ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab6:	4b1c      	ldr	r3, [pc, #112]	; (8004b28 <__sfp+0x74>)
 8004ab8:	681e      	ldr	r6, [r3, #0]
 8004aba:	69b3      	ldr	r3, [r6, #24]
 8004abc:	4607      	mov	r7, r0
 8004abe:	b913      	cbnz	r3, 8004ac6 <__sfp+0x12>
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	f7ff ffc7 	bl	8004a54 <__sinit>
 8004ac6:	3648      	adds	r6, #72	; 0x48
 8004ac8:	68b4      	ldr	r4, [r6, #8]
 8004aca:	6873      	ldr	r3, [r6, #4]
 8004acc:	3b01      	subs	r3, #1
 8004ace:	d503      	bpl.n	8004ad8 <__sfp+0x24>
 8004ad0:	6833      	ldr	r3, [r6, #0]
 8004ad2:	b133      	cbz	r3, 8004ae2 <__sfp+0x2e>
 8004ad4:	6836      	ldr	r6, [r6, #0]
 8004ad6:	e7f7      	b.n	8004ac8 <__sfp+0x14>
 8004ad8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004adc:	b16d      	cbz	r5, 8004afa <__sfp+0x46>
 8004ade:	3468      	adds	r4, #104	; 0x68
 8004ae0:	e7f4      	b.n	8004acc <__sfp+0x18>
 8004ae2:	2104      	movs	r1, #4
 8004ae4:	4638      	mov	r0, r7
 8004ae6:	f7ff ff9f 	bl	8004a28 <__sfmoreglue>
 8004aea:	6030      	str	r0, [r6, #0]
 8004aec:	2800      	cmp	r0, #0
 8004aee:	d1f1      	bne.n	8004ad4 <__sfp+0x20>
 8004af0:	230c      	movs	r3, #12
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	4604      	mov	r4, r0
 8004af6:	4620      	mov	r0, r4
 8004af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004afa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004afe:	81e3      	strh	r3, [r4, #14]
 8004b00:	2301      	movs	r3, #1
 8004b02:	81a3      	strh	r3, [r4, #12]
 8004b04:	6665      	str	r5, [r4, #100]	; 0x64
 8004b06:	6025      	str	r5, [r4, #0]
 8004b08:	60a5      	str	r5, [r4, #8]
 8004b0a:	6065      	str	r5, [r4, #4]
 8004b0c:	6125      	str	r5, [r4, #16]
 8004b0e:	6165      	str	r5, [r4, #20]
 8004b10:	61a5      	str	r5, [r4, #24]
 8004b12:	2208      	movs	r2, #8
 8004b14:	4629      	mov	r1, r5
 8004b16:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b1a:	f7ff fd68 	bl	80045ee <memset>
 8004b1e:	6365      	str	r5, [r4, #52]	; 0x34
 8004b20:	63a5      	str	r5, [r4, #56]	; 0x38
 8004b22:	64a5      	str	r5, [r4, #72]	; 0x48
 8004b24:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004b26:	e7e6      	b.n	8004af6 <__sfp+0x42>
 8004b28:	080053f8 	.word	0x080053f8

08004b2c <_fwalk_reent>:
 8004b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b30:	4680      	mov	r8, r0
 8004b32:	4689      	mov	r9, r1
 8004b34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b38:	2600      	movs	r6, #0
 8004b3a:	b914      	cbnz	r4, 8004b42 <_fwalk_reent+0x16>
 8004b3c:	4630      	mov	r0, r6
 8004b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b42:	68a5      	ldr	r5, [r4, #8]
 8004b44:	6867      	ldr	r7, [r4, #4]
 8004b46:	3f01      	subs	r7, #1
 8004b48:	d501      	bpl.n	8004b4e <_fwalk_reent+0x22>
 8004b4a:	6824      	ldr	r4, [r4, #0]
 8004b4c:	e7f5      	b.n	8004b3a <_fwalk_reent+0xe>
 8004b4e:	89ab      	ldrh	r3, [r5, #12]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d907      	bls.n	8004b64 <_fwalk_reent+0x38>
 8004b54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	d003      	beq.n	8004b64 <_fwalk_reent+0x38>
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	4640      	mov	r0, r8
 8004b60:	47c8      	blx	r9
 8004b62:	4306      	orrs	r6, r0
 8004b64:	3568      	adds	r5, #104	; 0x68
 8004b66:	e7ee      	b.n	8004b46 <_fwalk_reent+0x1a>

08004b68 <__swhatbuf_r>:
 8004b68:	b570      	push	{r4, r5, r6, lr}
 8004b6a:	460e      	mov	r6, r1
 8004b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b70:	2900      	cmp	r1, #0
 8004b72:	b090      	sub	sp, #64	; 0x40
 8004b74:	4614      	mov	r4, r2
 8004b76:	461d      	mov	r5, r3
 8004b78:	da07      	bge.n	8004b8a <__swhatbuf_r+0x22>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	602b      	str	r3, [r5, #0]
 8004b7e:	89b3      	ldrh	r3, [r6, #12]
 8004b80:	061a      	lsls	r2, r3, #24
 8004b82:	d410      	bmi.n	8004ba6 <__swhatbuf_r+0x3e>
 8004b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b88:	e00e      	b.n	8004ba8 <__swhatbuf_r+0x40>
 8004b8a:	aa01      	add	r2, sp, #4
 8004b8c:	f000 f9a8 	bl	8004ee0 <_fstat_r>
 8004b90:	2800      	cmp	r0, #0
 8004b92:	dbf2      	blt.n	8004b7a <__swhatbuf_r+0x12>
 8004b94:	9a02      	ldr	r2, [sp, #8]
 8004b96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b9e:	425a      	negs	r2, r3
 8004ba0:	415a      	adcs	r2, r3
 8004ba2:	602a      	str	r2, [r5, #0]
 8004ba4:	e7ee      	b.n	8004b84 <__swhatbuf_r+0x1c>
 8004ba6:	2340      	movs	r3, #64	; 0x40
 8004ba8:	2000      	movs	r0, #0
 8004baa:	6023      	str	r3, [r4, #0]
 8004bac:	b010      	add	sp, #64	; 0x40
 8004bae:	bd70      	pop	{r4, r5, r6, pc}

08004bb0 <__smakebuf_r>:
 8004bb0:	898b      	ldrh	r3, [r1, #12]
 8004bb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004bb4:	079d      	lsls	r5, r3, #30
 8004bb6:	4606      	mov	r6, r0
 8004bb8:	460c      	mov	r4, r1
 8004bba:	d507      	bpl.n	8004bcc <__smakebuf_r+0x1c>
 8004bbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004bc0:	6023      	str	r3, [r4, #0]
 8004bc2:	6123      	str	r3, [r4, #16]
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	6163      	str	r3, [r4, #20]
 8004bc8:	b002      	add	sp, #8
 8004bca:	bd70      	pop	{r4, r5, r6, pc}
 8004bcc:	ab01      	add	r3, sp, #4
 8004bce:	466a      	mov	r2, sp
 8004bd0:	f7ff ffca 	bl	8004b68 <__swhatbuf_r>
 8004bd4:	9900      	ldr	r1, [sp, #0]
 8004bd6:	4605      	mov	r5, r0
 8004bd8:	4630      	mov	r0, r6
 8004bda:	f000 f877 	bl	8004ccc <_malloc_r>
 8004bde:	b948      	cbnz	r0, 8004bf4 <__smakebuf_r+0x44>
 8004be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004be4:	059a      	lsls	r2, r3, #22
 8004be6:	d4ef      	bmi.n	8004bc8 <__smakebuf_r+0x18>
 8004be8:	f023 0303 	bic.w	r3, r3, #3
 8004bec:	f043 0302 	orr.w	r3, r3, #2
 8004bf0:	81a3      	strh	r3, [r4, #12]
 8004bf2:	e7e3      	b.n	8004bbc <__smakebuf_r+0xc>
 8004bf4:	4b0d      	ldr	r3, [pc, #52]	; (8004c2c <__smakebuf_r+0x7c>)
 8004bf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8004bf8:	89a3      	ldrh	r3, [r4, #12]
 8004bfa:	6020      	str	r0, [r4, #0]
 8004bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c00:	81a3      	strh	r3, [r4, #12]
 8004c02:	9b00      	ldr	r3, [sp, #0]
 8004c04:	6163      	str	r3, [r4, #20]
 8004c06:	9b01      	ldr	r3, [sp, #4]
 8004c08:	6120      	str	r0, [r4, #16]
 8004c0a:	b15b      	cbz	r3, 8004c24 <__smakebuf_r+0x74>
 8004c0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c10:	4630      	mov	r0, r6
 8004c12:	f000 f977 	bl	8004f04 <_isatty_r>
 8004c16:	b128      	cbz	r0, 8004c24 <__smakebuf_r+0x74>
 8004c18:	89a3      	ldrh	r3, [r4, #12]
 8004c1a:	f023 0303 	bic.w	r3, r3, #3
 8004c1e:	f043 0301 	orr.w	r3, r3, #1
 8004c22:	81a3      	strh	r3, [r4, #12]
 8004c24:	89a3      	ldrh	r3, [r4, #12]
 8004c26:	431d      	orrs	r5, r3
 8004c28:	81a5      	strh	r5, [r4, #12]
 8004c2a:	e7cd      	b.n	8004bc8 <__smakebuf_r+0x18>
 8004c2c:	080049d5 	.word	0x080049d5

08004c30 <_free_r>:
 8004c30:	b538      	push	{r3, r4, r5, lr}
 8004c32:	4605      	mov	r5, r0
 8004c34:	2900      	cmp	r1, #0
 8004c36:	d045      	beq.n	8004cc4 <_free_r+0x94>
 8004c38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c3c:	1f0c      	subs	r4, r1, #4
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	bfb8      	it	lt
 8004c42:	18e4      	addlt	r4, r4, r3
 8004c44:	f000 f980 	bl	8004f48 <__malloc_lock>
 8004c48:	4a1f      	ldr	r2, [pc, #124]	; (8004cc8 <_free_r+0x98>)
 8004c4a:	6813      	ldr	r3, [r2, #0]
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	b933      	cbnz	r3, 8004c5e <_free_r+0x2e>
 8004c50:	6063      	str	r3, [r4, #4]
 8004c52:	6014      	str	r4, [r2, #0]
 8004c54:	4628      	mov	r0, r5
 8004c56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c5a:	f000 b976 	b.w	8004f4a <__malloc_unlock>
 8004c5e:	42a3      	cmp	r3, r4
 8004c60:	d90c      	bls.n	8004c7c <_free_r+0x4c>
 8004c62:	6821      	ldr	r1, [r4, #0]
 8004c64:	1862      	adds	r2, r4, r1
 8004c66:	4293      	cmp	r3, r2
 8004c68:	bf04      	itt	eq
 8004c6a:	681a      	ldreq	r2, [r3, #0]
 8004c6c:	685b      	ldreq	r3, [r3, #4]
 8004c6e:	6063      	str	r3, [r4, #4]
 8004c70:	bf04      	itt	eq
 8004c72:	1852      	addeq	r2, r2, r1
 8004c74:	6022      	streq	r2, [r4, #0]
 8004c76:	6004      	str	r4, [r0, #0]
 8004c78:	e7ec      	b.n	8004c54 <_free_r+0x24>
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	b10a      	cbz	r2, 8004c84 <_free_r+0x54>
 8004c80:	42a2      	cmp	r2, r4
 8004c82:	d9fa      	bls.n	8004c7a <_free_r+0x4a>
 8004c84:	6819      	ldr	r1, [r3, #0]
 8004c86:	1858      	adds	r0, r3, r1
 8004c88:	42a0      	cmp	r0, r4
 8004c8a:	d10b      	bne.n	8004ca4 <_free_r+0x74>
 8004c8c:	6820      	ldr	r0, [r4, #0]
 8004c8e:	4401      	add	r1, r0
 8004c90:	1858      	adds	r0, r3, r1
 8004c92:	4282      	cmp	r2, r0
 8004c94:	6019      	str	r1, [r3, #0]
 8004c96:	d1dd      	bne.n	8004c54 <_free_r+0x24>
 8004c98:	6810      	ldr	r0, [r2, #0]
 8004c9a:	6852      	ldr	r2, [r2, #4]
 8004c9c:	605a      	str	r2, [r3, #4]
 8004c9e:	4401      	add	r1, r0
 8004ca0:	6019      	str	r1, [r3, #0]
 8004ca2:	e7d7      	b.n	8004c54 <_free_r+0x24>
 8004ca4:	d902      	bls.n	8004cac <_free_r+0x7c>
 8004ca6:	230c      	movs	r3, #12
 8004ca8:	602b      	str	r3, [r5, #0]
 8004caa:	e7d3      	b.n	8004c54 <_free_r+0x24>
 8004cac:	6820      	ldr	r0, [r4, #0]
 8004cae:	1821      	adds	r1, r4, r0
 8004cb0:	428a      	cmp	r2, r1
 8004cb2:	bf04      	itt	eq
 8004cb4:	6811      	ldreq	r1, [r2, #0]
 8004cb6:	6852      	ldreq	r2, [r2, #4]
 8004cb8:	6062      	str	r2, [r4, #4]
 8004cba:	bf04      	itt	eq
 8004cbc:	1809      	addeq	r1, r1, r0
 8004cbe:	6021      	streq	r1, [r4, #0]
 8004cc0:	605c      	str	r4, [r3, #4]
 8004cc2:	e7c7      	b.n	8004c54 <_free_r+0x24>
 8004cc4:	bd38      	pop	{r3, r4, r5, pc}
 8004cc6:	bf00      	nop
 8004cc8:	2000ca60 	.word	0x2000ca60

08004ccc <_malloc_r>:
 8004ccc:	b570      	push	{r4, r5, r6, lr}
 8004cce:	1ccd      	adds	r5, r1, #3
 8004cd0:	f025 0503 	bic.w	r5, r5, #3
 8004cd4:	3508      	adds	r5, #8
 8004cd6:	2d0c      	cmp	r5, #12
 8004cd8:	bf38      	it	cc
 8004cda:	250c      	movcc	r5, #12
 8004cdc:	2d00      	cmp	r5, #0
 8004cde:	4606      	mov	r6, r0
 8004ce0:	db01      	blt.n	8004ce6 <_malloc_r+0x1a>
 8004ce2:	42a9      	cmp	r1, r5
 8004ce4:	d903      	bls.n	8004cee <_malloc_r+0x22>
 8004ce6:	230c      	movs	r3, #12
 8004ce8:	6033      	str	r3, [r6, #0]
 8004cea:	2000      	movs	r0, #0
 8004cec:	bd70      	pop	{r4, r5, r6, pc}
 8004cee:	f000 f92b 	bl	8004f48 <__malloc_lock>
 8004cf2:	4a23      	ldr	r2, [pc, #140]	; (8004d80 <_malloc_r+0xb4>)
 8004cf4:	6814      	ldr	r4, [r2, #0]
 8004cf6:	4621      	mov	r1, r4
 8004cf8:	b991      	cbnz	r1, 8004d20 <_malloc_r+0x54>
 8004cfa:	4c22      	ldr	r4, [pc, #136]	; (8004d84 <_malloc_r+0xb8>)
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	b91b      	cbnz	r3, 8004d08 <_malloc_r+0x3c>
 8004d00:	4630      	mov	r0, r6
 8004d02:	f000 f877 	bl	8004df4 <_sbrk_r>
 8004d06:	6020      	str	r0, [r4, #0]
 8004d08:	4629      	mov	r1, r5
 8004d0a:	4630      	mov	r0, r6
 8004d0c:	f000 f872 	bl	8004df4 <_sbrk_r>
 8004d10:	1c43      	adds	r3, r0, #1
 8004d12:	d126      	bne.n	8004d62 <_malloc_r+0x96>
 8004d14:	230c      	movs	r3, #12
 8004d16:	6033      	str	r3, [r6, #0]
 8004d18:	4630      	mov	r0, r6
 8004d1a:	f000 f916 	bl	8004f4a <__malloc_unlock>
 8004d1e:	e7e4      	b.n	8004cea <_malloc_r+0x1e>
 8004d20:	680b      	ldr	r3, [r1, #0]
 8004d22:	1b5b      	subs	r3, r3, r5
 8004d24:	d41a      	bmi.n	8004d5c <_malloc_r+0x90>
 8004d26:	2b0b      	cmp	r3, #11
 8004d28:	d90f      	bls.n	8004d4a <_malloc_r+0x7e>
 8004d2a:	600b      	str	r3, [r1, #0]
 8004d2c:	50cd      	str	r5, [r1, r3]
 8004d2e:	18cc      	adds	r4, r1, r3
 8004d30:	4630      	mov	r0, r6
 8004d32:	f000 f90a 	bl	8004f4a <__malloc_unlock>
 8004d36:	f104 000b 	add.w	r0, r4, #11
 8004d3a:	1d23      	adds	r3, r4, #4
 8004d3c:	f020 0007 	bic.w	r0, r0, #7
 8004d40:	1ac3      	subs	r3, r0, r3
 8004d42:	d01b      	beq.n	8004d7c <_malloc_r+0xb0>
 8004d44:	425a      	negs	r2, r3
 8004d46:	50e2      	str	r2, [r4, r3]
 8004d48:	bd70      	pop	{r4, r5, r6, pc}
 8004d4a:	428c      	cmp	r4, r1
 8004d4c:	bf0d      	iteet	eq
 8004d4e:	6863      	ldreq	r3, [r4, #4]
 8004d50:	684b      	ldrne	r3, [r1, #4]
 8004d52:	6063      	strne	r3, [r4, #4]
 8004d54:	6013      	streq	r3, [r2, #0]
 8004d56:	bf18      	it	ne
 8004d58:	460c      	movne	r4, r1
 8004d5a:	e7e9      	b.n	8004d30 <_malloc_r+0x64>
 8004d5c:	460c      	mov	r4, r1
 8004d5e:	6849      	ldr	r1, [r1, #4]
 8004d60:	e7ca      	b.n	8004cf8 <_malloc_r+0x2c>
 8004d62:	1cc4      	adds	r4, r0, #3
 8004d64:	f024 0403 	bic.w	r4, r4, #3
 8004d68:	42a0      	cmp	r0, r4
 8004d6a:	d005      	beq.n	8004d78 <_malloc_r+0xac>
 8004d6c:	1a21      	subs	r1, r4, r0
 8004d6e:	4630      	mov	r0, r6
 8004d70:	f000 f840 	bl	8004df4 <_sbrk_r>
 8004d74:	3001      	adds	r0, #1
 8004d76:	d0cd      	beq.n	8004d14 <_malloc_r+0x48>
 8004d78:	6025      	str	r5, [r4, #0]
 8004d7a:	e7d9      	b.n	8004d30 <_malloc_r+0x64>
 8004d7c:	bd70      	pop	{r4, r5, r6, pc}
 8004d7e:	bf00      	nop
 8004d80:	2000ca60 	.word	0x2000ca60
 8004d84:	2000ca64 	.word	0x2000ca64

08004d88 <_putc_r>:
 8004d88:	b570      	push	{r4, r5, r6, lr}
 8004d8a:	460d      	mov	r5, r1
 8004d8c:	4614      	mov	r4, r2
 8004d8e:	4606      	mov	r6, r0
 8004d90:	b118      	cbz	r0, 8004d9a <_putc_r+0x12>
 8004d92:	6983      	ldr	r3, [r0, #24]
 8004d94:	b90b      	cbnz	r3, 8004d9a <_putc_r+0x12>
 8004d96:	f7ff fe5d 	bl	8004a54 <__sinit>
 8004d9a:	4b13      	ldr	r3, [pc, #76]	; (8004de8 <_putc_r+0x60>)
 8004d9c:	429c      	cmp	r4, r3
 8004d9e:	d112      	bne.n	8004dc6 <_putc_r+0x3e>
 8004da0:	6874      	ldr	r4, [r6, #4]
 8004da2:	68a3      	ldr	r3, [r4, #8]
 8004da4:	3b01      	subs	r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	60a3      	str	r3, [r4, #8]
 8004daa:	da16      	bge.n	8004dda <_putc_r+0x52>
 8004dac:	69a2      	ldr	r2, [r4, #24]
 8004dae:	4293      	cmp	r3, r2
 8004db0:	db02      	blt.n	8004db8 <_putc_r+0x30>
 8004db2:	b2eb      	uxtb	r3, r5
 8004db4:	2b0a      	cmp	r3, #10
 8004db6:	d110      	bne.n	8004dda <_putc_r+0x52>
 8004db8:	4622      	mov	r2, r4
 8004dba:	4629      	mov	r1, r5
 8004dbc:	4630      	mov	r0, r6
 8004dbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004dc2:	f7ff bc95 	b.w	80046f0 <__swbuf_r>
 8004dc6:	4b09      	ldr	r3, [pc, #36]	; (8004dec <_putc_r+0x64>)
 8004dc8:	429c      	cmp	r4, r3
 8004dca:	d101      	bne.n	8004dd0 <_putc_r+0x48>
 8004dcc:	68b4      	ldr	r4, [r6, #8]
 8004dce:	e7e8      	b.n	8004da2 <_putc_r+0x1a>
 8004dd0:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <_putc_r+0x68>)
 8004dd2:	429c      	cmp	r4, r3
 8004dd4:	bf08      	it	eq
 8004dd6:	68f4      	ldreq	r4, [r6, #12]
 8004dd8:	e7e3      	b.n	8004da2 <_putc_r+0x1a>
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	6022      	str	r2, [r4, #0]
 8004de0:	701d      	strb	r5, [r3, #0]
 8004de2:	b2e8      	uxtb	r0, r5
 8004de4:	bd70      	pop	{r4, r5, r6, pc}
 8004de6:	bf00      	nop
 8004de8:	080053b8 	.word	0x080053b8
 8004dec:	080053d8 	.word	0x080053d8
 8004df0:	08005398 	.word	0x08005398

08004df4 <_sbrk_r>:
 8004df4:	b538      	push	{r3, r4, r5, lr}
 8004df6:	4c06      	ldr	r4, [pc, #24]	; (8004e10 <_sbrk_r+0x1c>)
 8004df8:	2300      	movs	r3, #0
 8004dfa:	4605      	mov	r5, r0
 8004dfc:	4608      	mov	r0, r1
 8004dfe:	6023      	str	r3, [r4, #0]
 8004e00:	f7ff f8d8 	bl	8003fb4 <_sbrk>
 8004e04:	1c43      	adds	r3, r0, #1
 8004e06:	d102      	bne.n	8004e0e <_sbrk_r+0x1a>
 8004e08:	6823      	ldr	r3, [r4, #0]
 8004e0a:	b103      	cbz	r3, 8004e0e <_sbrk_r+0x1a>
 8004e0c:	602b      	str	r3, [r5, #0]
 8004e0e:	bd38      	pop	{r3, r4, r5, pc}
 8004e10:	2000cb50 	.word	0x2000cb50

08004e14 <__sread>:
 8004e14:	b510      	push	{r4, lr}
 8004e16:	460c      	mov	r4, r1
 8004e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e1c:	f000 f896 	bl	8004f4c <_read_r>
 8004e20:	2800      	cmp	r0, #0
 8004e22:	bfab      	itete	ge
 8004e24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e26:	89a3      	ldrhlt	r3, [r4, #12]
 8004e28:	181b      	addge	r3, r3, r0
 8004e2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e2e:	bfac      	ite	ge
 8004e30:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e32:	81a3      	strhlt	r3, [r4, #12]
 8004e34:	bd10      	pop	{r4, pc}

08004e36 <__swrite>:
 8004e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e3a:	461f      	mov	r7, r3
 8004e3c:	898b      	ldrh	r3, [r1, #12]
 8004e3e:	05db      	lsls	r3, r3, #23
 8004e40:	4605      	mov	r5, r0
 8004e42:	460c      	mov	r4, r1
 8004e44:	4616      	mov	r6, r2
 8004e46:	d505      	bpl.n	8004e54 <__swrite+0x1e>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e50:	f000 f868 	bl	8004f24 <_lseek_r>
 8004e54:	89a3      	ldrh	r3, [r4, #12]
 8004e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e5e:	81a3      	strh	r3, [r4, #12]
 8004e60:	4632      	mov	r2, r6
 8004e62:	463b      	mov	r3, r7
 8004e64:	4628      	mov	r0, r5
 8004e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e6a:	f000 b817 	b.w	8004e9c <_write_r>

08004e6e <__sseek>:
 8004e6e:	b510      	push	{r4, lr}
 8004e70:	460c      	mov	r4, r1
 8004e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e76:	f000 f855 	bl	8004f24 <_lseek_r>
 8004e7a:	1c43      	adds	r3, r0, #1
 8004e7c:	89a3      	ldrh	r3, [r4, #12]
 8004e7e:	bf15      	itete	ne
 8004e80:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e8a:	81a3      	strheq	r3, [r4, #12]
 8004e8c:	bf18      	it	ne
 8004e8e:	81a3      	strhne	r3, [r4, #12]
 8004e90:	bd10      	pop	{r4, pc}

08004e92 <__sclose>:
 8004e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e96:	f000 b813 	b.w	8004ec0 <_close_r>
	...

08004e9c <_write_r>:
 8004e9c:	b538      	push	{r3, r4, r5, lr}
 8004e9e:	4c07      	ldr	r4, [pc, #28]	; (8004ebc <_write_r+0x20>)
 8004ea0:	4605      	mov	r5, r0
 8004ea2:	4608      	mov	r0, r1
 8004ea4:	4611      	mov	r1, r2
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	6022      	str	r2, [r4, #0]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f7ff f864 	bl	8003f78 <_write>
 8004eb0:	1c43      	adds	r3, r0, #1
 8004eb2:	d102      	bne.n	8004eba <_write_r+0x1e>
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	b103      	cbz	r3, 8004eba <_write_r+0x1e>
 8004eb8:	602b      	str	r3, [r5, #0]
 8004eba:	bd38      	pop	{r3, r4, r5, pc}
 8004ebc:	2000cb50 	.word	0x2000cb50

08004ec0 <_close_r>:
 8004ec0:	b538      	push	{r3, r4, r5, lr}
 8004ec2:	4c06      	ldr	r4, [pc, #24]	; (8004edc <_close_r+0x1c>)
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	4605      	mov	r5, r0
 8004ec8:	4608      	mov	r0, r1
 8004eca:	6023      	str	r3, [r4, #0]
 8004ecc:	f7ff f892 	bl	8003ff4 <_close>
 8004ed0:	1c43      	adds	r3, r0, #1
 8004ed2:	d102      	bne.n	8004eda <_close_r+0x1a>
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	b103      	cbz	r3, 8004eda <_close_r+0x1a>
 8004ed8:	602b      	str	r3, [r5, #0]
 8004eda:	bd38      	pop	{r3, r4, r5, pc}
 8004edc:	2000cb50 	.word	0x2000cb50

08004ee0 <_fstat_r>:
 8004ee0:	b538      	push	{r3, r4, r5, lr}
 8004ee2:	4c07      	ldr	r4, [pc, #28]	; (8004f00 <_fstat_r+0x20>)
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	4605      	mov	r5, r0
 8004ee8:	4608      	mov	r0, r1
 8004eea:	4611      	mov	r1, r2
 8004eec:	6023      	str	r3, [r4, #0]
 8004eee:	f7ff f893 	bl	8004018 <_fstat>
 8004ef2:	1c43      	adds	r3, r0, #1
 8004ef4:	d102      	bne.n	8004efc <_fstat_r+0x1c>
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	b103      	cbz	r3, 8004efc <_fstat_r+0x1c>
 8004efa:	602b      	str	r3, [r5, #0]
 8004efc:	bd38      	pop	{r3, r4, r5, pc}
 8004efe:	bf00      	nop
 8004f00:	2000cb50 	.word	0x2000cb50

08004f04 <_isatty_r>:
 8004f04:	b538      	push	{r3, r4, r5, lr}
 8004f06:	4c06      	ldr	r4, [pc, #24]	; (8004f20 <_isatty_r+0x1c>)
 8004f08:	2300      	movs	r3, #0
 8004f0a:	4605      	mov	r5, r0
 8004f0c:	4608      	mov	r0, r1
 8004f0e:	6023      	str	r3, [r4, #0]
 8004f10:	f7ff f894 	bl	800403c <_isatty>
 8004f14:	1c43      	adds	r3, r0, #1
 8004f16:	d102      	bne.n	8004f1e <_isatty_r+0x1a>
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	b103      	cbz	r3, 8004f1e <_isatty_r+0x1a>
 8004f1c:	602b      	str	r3, [r5, #0]
 8004f1e:	bd38      	pop	{r3, r4, r5, pc}
 8004f20:	2000cb50 	.word	0x2000cb50

08004f24 <_lseek_r>:
 8004f24:	b538      	push	{r3, r4, r5, lr}
 8004f26:	4c07      	ldr	r4, [pc, #28]	; (8004f44 <_lseek_r+0x20>)
 8004f28:	4605      	mov	r5, r0
 8004f2a:	4608      	mov	r0, r1
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	2200      	movs	r2, #0
 8004f30:	6022      	str	r2, [r4, #0]
 8004f32:	461a      	mov	r2, r3
 8004f34:	f7ff f892 	bl	800405c <_lseek>
 8004f38:	1c43      	adds	r3, r0, #1
 8004f3a:	d102      	bne.n	8004f42 <_lseek_r+0x1e>
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	b103      	cbz	r3, 8004f42 <_lseek_r+0x1e>
 8004f40:	602b      	str	r3, [r5, #0]
 8004f42:	bd38      	pop	{r3, r4, r5, pc}
 8004f44:	2000cb50 	.word	0x2000cb50

08004f48 <__malloc_lock>:
 8004f48:	4770      	bx	lr

08004f4a <__malloc_unlock>:
 8004f4a:	4770      	bx	lr

08004f4c <_read_r>:
 8004f4c:	b538      	push	{r3, r4, r5, lr}
 8004f4e:	4c07      	ldr	r4, [pc, #28]	; (8004f6c <_read_r+0x20>)
 8004f50:	4605      	mov	r5, r0
 8004f52:	4608      	mov	r0, r1
 8004f54:	4611      	mov	r1, r2
 8004f56:	2200      	movs	r2, #0
 8004f58:	6022      	str	r2, [r4, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	f7ff f892 	bl	8004084 <_read>
 8004f60:	1c43      	adds	r3, r0, #1
 8004f62:	d102      	bne.n	8004f6a <_read_r+0x1e>
 8004f64:	6823      	ldr	r3, [r4, #0]
 8004f66:	b103      	cbz	r3, 8004f6a <_read_r+0x1e>
 8004f68:	602b      	str	r3, [r5, #0]
 8004f6a:	bd38      	pop	{r3, r4, r5, pc}
 8004f6c:	2000cb50 	.word	0x2000cb50
 8004f70:	454c4449 	.word	0x454c4449
 8004f74:	00000000 	.word	0x00000000
 8004f78:	20726d54 	.word	0x20726d54
 8004f7c:	00637653 	.word	0x00637653
 8004f80:	51726d54 	.word	0x51726d54
 8004f84:	00000000 	.word	0x00000000
 8004f88:	72617453 	.word	0x72617453
 8004f8c:	676e6974 	.word	0x676e6974
 8004f90:	68635320 	.word	0x68635320
 8004f94:	6c756465 	.word	0x6c756465
 8004f98:	003a7265 	.word	0x003a7265
 8004f9c:	4f525245 	.word	0x4f525245
 8004fa0:	52203a52 	.word	0x52203a52
 8004fa4:	65757165 	.word	0x65757165
 8004fa8:	74207473 	.word	0x74207473
 8004fac:	7263206f 	.word	0x7263206f
 8004fb0:	65746165 	.word	0x65746165
 8004fb4:	73617420 	.word	0x73617420
 8004fb8:	6977206b 	.word	0x6977206b
 8004fbc:	6e206874 	.word	0x6e206874
 8004fc0:	206c6c75 	.word	0x206c6c75
 8004fc4:	6e696f70 	.word	0x6e696f70
 8004fc8:	20726574 	.word	0x20726574
 8004fcc:	74206f74 	.word	0x74206f74
 8004fd0:	206b7361 	.word	0x206b7361
 8004fd4:	646e6168 	.word	0x646e6168
 8004fd8:	0000656c 	.word	0x0000656c
 8004fdc:	5d73255b 	.word	0x5d73255b
 8004fe0:	6c655220 	.word	0x6c655220
 8004fe4:	65736165 	.word	0x65736165
 8004fe8:	207c2064 	.word	0x207c2064
 8004fec:	656d6954 	.word	0x656d6954
 8004ff0:	75255b20 	.word	0x75255b20
 8004ff4:	0000005d 	.word	0x0000005d
 8004ff8:	7361540a 	.word	0x7361540a
 8004ffc:	255b206b 	.word	0x255b206b
 8005000:	20205d73 	.word	0x20205d73
 8005004:	62616e55 	.word	0x62616e55
 8005008:	7420656c 	.word	0x7420656c
 800500c:	6552206f 	.word	0x6552206f
 8005010:	7361656c 	.word	0x7361656c
 8005014:	200a2065 	.word	0x200a2065
 8005018:	62616e75 	.word	0x62616e75
 800501c:	7420656c 	.word	0x7420656c
 8005020:	6573206f 	.word	0x6573206f
 8005024:	4e20646e 	.word	0x4e20646e
 8005028:	54207765 	.word	0x54207765
 800502c:	206b7361 	.word	0x206b7361
 8005030:	7373654d 	.word	0x7373654d
 8005034:	20656761 	.word	0x20656761
 8005038:	746e6573 	.word	0x746e6573
 800503c:	206f7420 	.word	0x206f7420
 8005040:	20534444 	.word	0x20534444
 8005044:	75657551 	.word	0x75657551
 8005048:	000a2065 	.word	0x000a2065
 800504c:	5d73255b 	.word	0x5d73255b
 8005050:	6d6f4320 	.word	0x6d6f4320
 8005054:	74656c70 	.word	0x74656c70
 8005058:	7c206465 	.word	0x7c206465
 800505c:	6d695420 	.word	0x6d695420
 8005060:	255b2065 	.word	0x255b2065
 8005064:	00005d75 	.word	0x00005d75
 8005068:	52524520 	.word	0x52524520
 800506c:	5720524f 	.word	0x5720524f
 8005070:	656c6968 	.word	0x656c6968
 8005074:	6e655320 	.word	0x6e655320
 8005078:	676e6964 	.word	0x676e6964
 800507c:	6c654420 	.word	0x6c654420
 8005080:	20657465 	.word	0x20657465
 8005084:	2067734d 	.word	0x2067734d
 8005088:	44206f74 	.word	0x44206f74
 800508c:	51205344 	.word	0x51205344
 8005090:	65756575 	.word	0x65756575
 8005094:	5320203a 	.word	0x5320203a
 8005098:	44206565 	.word	0x44206565
 800509c:	632e5344 	.word	0x632e5344
 80050a0:	694c202c 	.word	0x694c202c
 80050a4:	3120656e 	.word	0x3120656e
 80050a8:	00203237 	.word	0x00203237
 80050ac:	74696e49 	.word	0x74696e49
 80050b0:	73615420 	.word	0x73615420
 80050b4:	696c206b 	.word	0x696c206b
 80050b8:	3a737473 	.word	0x3a737473
 80050bc:	00000000 	.word	0x00000000
 80050c0:	696e6f4d 	.word	0x696e6f4d
 80050c4:	20726f74 	.word	0x20726f74
 80050c8:	6b736154 	.word	0x6b736154
 80050cc:	00000000 	.word	0x00000000
 80050d0:	20534444 	.word	0x20534444
 80050d4:	6b736154 	.word	0x6b736154
 80050d8:	00000000 	.word	0x00000000
 80050dc:	4e4f4d0a 	.word	0x4e4f4d0a
 80050e0:	524f5449 	.word	0x524f5449
 80050e4:	53415420 	.word	0x53415420
 80050e8:	00003a4b 	.word	0x00003a4b
 80050ec:	206f4e0a 	.word	0x206f4e0a
 80050f0:	6b736154 	.word	0x6b736154
 80050f4:	206e4920 	.word	0x206e4920
 80050f8:	7473696c 	.word	0x7473696c
 80050fc:	00000021 	.word	0x00000021
 8005100:	6b736154 	.word	0x6b736154
 8005104:	255b203a 	.word	0x255b203a
 8005108:	00005d73 	.word	0x00005d73
 800510c:	5252450a 	.word	0x5252450a
 8005110:	553a524f 	.word	0x553a524f
 8005114:	6c62616e 	.word	0x6c62616e
 8005118:	6f742065 	.word	0x6f742065
 800511c:	6e657320 	.word	0x6e657320
 8005120:	43412064 	.word	0x43412064
 8005124:	45564954 	.word	0x45564954
 8005128:	53494c20 	.word	0x53494c20
 800512c:	656d2054 	.word	0x656d2054
 8005130:	67617373 	.word	0x67617373
 8005134:	6f742065 	.word	0x6f742065
 8005138:	53444420 	.word	0x53444420
 800513c:	67734d20 	.word	0x67734d20
 8005140:	65755120 	.word	0x65755120
 8005144:	00216575 	.word	0x00216575
 8005148:	49544341 	.word	0x49544341
 800514c:	54204556 	.word	0x54204556
 8005150:	534b5341 	.word	0x534b5341
 8005154:	0000003a 	.word	0x0000003a
 8005158:	5252450a 	.word	0x5252450a
 800515c:	553a524f 	.word	0x553a524f
 8005160:	6c62616e 	.word	0x6c62616e
 8005164:	6f742065 	.word	0x6f742065
 8005168:	6e657320 	.word	0x6e657320
 800516c:	4f432064 	.word	0x4f432064
 8005170:	454c504d 	.word	0x454c504d
 8005174:	20444554 	.word	0x20444554
 8005178:	5453494c 	.word	0x5453494c
 800517c:	73656d20 	.word	0x73656d20
 8005180:	65676173 	.word	0x65676173
 8005184:	206f7420 	.word	0x206f7420
 8005188:	20534444 	.word	0x20534444
 800518c:	2067734d 	.word	0x2067734d
 8005190:	75657551 	.word	0x75657551
 8005194:	00002165 	.word	0x00002165
 8005198:	504d4f43 	.word	0x504d4f43
 800519c:	4554454c 	.word	0x4554454c
 80051a0:	41542044 	.word	0x41542044
 80051a4:	3a534b53 	.word	0x3a534b53
 80051a8:	00000000 	.word	0x00000000
 80051ac:	5252450a 	.word	0x5252450a
 80051b0:	553a524f 	.word	0x553a524f
 80051b4:	6c62616e 	.word	0x6c62616e
 80051b8:	6f742065 	.word	0x6f742065
 80051bc:	6e657320 	.word	0x6e657320
 80051c0:	564f2064 	.word	0x564f2064
 80051c4:	55445245 	.word	0x55445245
 80051c8:	494c2045 	.word	0x494c2045
 80051cc:	6d205453 	.word	0x6d205453
 80051d0:	61737365 	.word	0x61737365
 80051d4:	74206567 	.word	0x74206567
 80051d8:	4444206f 	.word	0x4444206f
 80051dc:	734d2053 	.word	0x734d2053
 80051e0:	75512067 	.word	0x75512067
 80051e4:	21657565 	.word	0x21657565
 80051e8:	00000000 	.word	0x00000000
 80051ec:	5245564f 	.word	0x5245564f
 80051f0:	20455544 	.word	0x20455544
 80051f4:	4b534154 	.word	0x4b534154
 80051f8:	00003a53 	.word	0x00003a53
 80051fc:	4f525245 	.word	0x4f525245
 8005200:	4e202152 	.word	0x4e202152
 8005204:	204c4c55 	.word	0x204c4c55
 8005208:	6b736154 	.word	0x6b736154
 800520c:	73694c20 	.word	0x73694c20
 8005210:	55202e74 	.word	0x55202e74
 8005214:	6c62616e 	.word	0x6c62616e
 8005218:	6f742065 	.word	0x6f742065
 800521c:	736e6920 	.word	0x736e6920
 8005220:	746e6174 	.word	0x746e6174
 8005224:	65746169 	.word	0x65746169
 8005228:	6e696c20 	.word	0x6e696c20
 800522c:	2064656b 	.word	0x2064656b
 8005230:	7473696c 	.word	0x7473696c
 8005234:	00000021 	.word	0x00000021
 8005238:	6f727265 	.word	0x6f727265
 800523c:	2e2e2e72 	.word	0x2e2e2e72
 8005240:	74744120 	.word	0x74744120
 8005244:	74706d65 	.word	0x74706d65
 8005248:	20676e69 	.word	0x20676e69
 800524c:	6d206f74 	.word	0x6d206f74
 8005250:	74617475 	.word	0x74617475
 8005254:	61762065 	.word	0x61762065
 8005258:	7365756c 	.word	0x7365756c
 800525c:	6f726620 	.word	0x6f726620
 8005260:	2061206d 	.word	0x2061206d
 8005264:	6c6c756e 	.word	0x6c6c756e
 8005268:	6e694c20 	.word	0x6e694c20
 800526c:	2064656b 	.word	0x2064656b
 8005270:	7473696c 	.word	0x7473696c
 8005274:	00000000 	.word	0x00000000
 8005278:	62616e55 	.word	0x62616e55
 800527c:	7420656c 	.word	0x7420656c
 8005280:	6f6c206f 	.word	0x6f6c206f
 8005284:	65746163 	.word	0x65746163
 8005288:	61656820 	.word	0x61656820
 800528c:	666f2064 	.word	0x666f2064
 8005290:	73696c20 	.word	0x73696c20
 8005294:	00000074 	.word	0x00000074
 8005298:	4f525245 	.word	0x4f525245
 800529c:	44442852 	.word	0x44442852
 80052a0:	7361545f 	.word	0x7361545f
 80052a4:	73694c6b 	.word	0x73694c6b
 80052a8:	72545f74 	.word	0x72545f74
 80052ac:	66736e61 	.word	0x66736e61
 80052b0:	4f5f7265 	.word	0x4f5f7265
 80052b4:	64726576 	.word	0x64726576
 80052b8:	3a296575 	.word	0x3a296575
 80052bc:	656e6f20 	.word	0x656e6f20
 80052c0:	20666f20 	.word	0x20666f20
 80052c4:	20656874 	.word	0x20656874
 80052c8:	61726170 	.word	0x61726170
 80052cc:	6574656d 	.word	0x6574656d
 80052d0:	70207372 	.word	0x70207372
 80052d4:	65737361 	.word	0x65737361
 80052d8:	61772064 	.word	0x61772064
 80052dc:	554e2073 	.word	0x554e2073
 80052e0:	002e4c4c 	.word	0x002e4c4c
 80052e4:	00000000 	.word	0x00000000
 80052e8:	6578450a 	.word	0x6578450a
 80052ec:	69747563 	.word	0x69747563
 80052f0:	5b20676e 	.word	0x5b20676e
 80052f4:	205d7325 	.word	0x205d7325
 80052f8:	6954207c 	.word	0x6954207c
 80052fc:	203a656d 	.word	0x203a656d
 8005300:	7c207525 	.word	0x7c207525
 8005304:	69725020 	.word	0x69725020
 8005308:	203a726f 	.word	0x203a726f
 800530c:	0a207525 	.word	0x0a207525
 8005310:	00000000 	.word	0x00000000
 8005314:	6b736154 	.word	0x6b736154
 8005318:	00000031 	.word	0x00000031
 800531c:	6b736154 	.word	0x6b736154
 8005320:	00000032 	.word	0x00000032
 8005324:	6b736154 	.word	0x6b736154
 8005328:	00000033 	.word	0x00000033
 800532c:	7361545f 	.word	0x7361545f
 8005330:	00315f6b 	.word	0x00315f6b
 8005334:	7361545f 	.word	0x7361545f
 8005338:	00325f6b 	.word	0x00325f6b
 800533c:	7361545f 	.word	0x7361545f
 8005340:	00335f6b 	.word	0x00335f6b
 8005344:	20534444 	.word	0x20534444
 8005348:	75657551 	.word	0x75657551
 800534c:	00000065 	.word	0x00000065
 8005350:	696e6f4d 	.word	0x696e6f4d
 8005354:	20726f74 	.word	0x20726f74
 8005358:	75657551 	.word	0x75657551
 800535c:	00000065 	.word	0x00000065
 8005360:	4c4c414d 	.word	0x4c4c414d
 8005364:	4620434f 	.word	0x4620434f
 8005368:	454c4941 	.word	0x454c4941
 800536c:	49442044 	.word	0x49442044
 8005370:	49485350 	.word	0x49485350
 8005374:	00000054 	.word	0x00000054
 8005378:	54415453 	.word	0x54415453
 800537c:	53204349 	.word	0x53204349
 8005380:	4b434154 	.word	0x4b434154
 8005384:	45564f20 	.word	0x45564f20
 8005388:	4f4c4652 	.word	0x4f4c4652
 800538c:	49442057 	.word	0x49442057
 8005390:	49485350 	.word	0x49485350
 8005394:	00002154 	.word	0x00002154

08005398 <__sf_fake_stderr>:
	...

080053b8 <__sf_fake_stdin>:
	...

080053d8 <__sf_fake_stdout>:
	...

080053f8 <_global_impure_ptr>:
 80053f8:	2000001c                                ... 

080053fc <_init>:
 80053fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fe:	bf00      	nop
 8005400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005402:	bc08      	pop	{r3}
 8005404:	469e      	mov	lr, r3
 8005406:	4770      	bx	lr

08005408 <_fini>:
 8005408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540a:	bf00      	nop
 800540c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540e:	bc08      	pop	{r3}
 8005410:	469e      	mov	lr, r3
 8005412:	4770      	bx	lr
