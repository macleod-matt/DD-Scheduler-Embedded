
STM32F4_Discovery_FreeRTOS_Simple_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08005970  08005970  00015970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08005974  08005974  00015974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  20000000  08005978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
  6 .bss          00006678  2000007c  2000007c  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200066f4  200066f4  0002007c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000fcae  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000284f  00000000  00000000  0002fd58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b20  00000000  00000000  000325a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009f0  00000000  00000000  000330c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005d8d  00000000  00000000  00033ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000041ad  00000000  00000000  00039845  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003d9f2  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000313c  00000000  00000000  0003da70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005958 	.word	0x08005958

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08005958 	.word	0x08005958

080001d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f103 0208 	add.w	r2, r3, #8
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f04f 32ff 	mov.w	r2, #4294967295
 80001e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f103 0208 	add.w	r2, r3, #8
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f103 0208 	add.w	r2, r3, #8
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2200      	movs	r2, #0
 800021c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr

0800022a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800022a:	b480      	push	{r7}
 800022c:	b085      	sub	sp, #20
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
 8000232:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	68fa      	ldr	r2, [r7, #12]
 800023e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	689a      	ldr	r2, [r3, #8]
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	683a      	ldr	r2, [r7, #0]
 800024e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	1c5a      	adds	r2, r3, #1
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	3714      	adds	r7, #20
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000288:	d103      	bne.n	8000292 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	691b      	ldr	r3, [r3, #16]
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	e00c      	b.n	80002ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3308      	adds	r3, #8
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	e002      	b.n	80002a0 <vListInsert+0x2e>
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d9f6      	bls.n	800029a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	685a      	ldr	r2, [r3, #4]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	683a      	ldr	r2, [r7, #0]
 80002ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	601a      	str	r2, [r3, #0]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	6892      	ldr	r2, [r2, #8]
 80002fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	6852      	ldr	r2, [r2, #4]
 8000304:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	685a      	ldr	r2, [r3, #4]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	d103      	bne.n	8000318 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	689a      	ldr	r2, [r3, #8]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	1e5a      	subs	r2, r3, #1
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	3b04      	subs	r3, #4
 8000348:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	3b04      	subs	r3, #4
 8000356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	f023 0201 	bic.w	r2, r3, #1
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3b04      	subs	r3, #4
 8000366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <pxPortInitialiseStack+0x64>)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	3b14      	subs	r3, #20
 8000372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	3b04      	subs	r3, #4
 800037e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f06f 0202 	mvn.w	r2, #2
 8000386:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	3b20      	subs	r3, #32
 800038c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800038e:	68fb      	ldr	r3, [r7, #12]
}
 8000390:	4618      	mov	r0, r3
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	080003a1 	.word	0x080003a1

080003a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <prvTaskExitError+0x38>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003ae:	d009      	beq.n	80003c4 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80003b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003b4:	f383 8811 	msr	BASEPRI, r3
 80003b8:	f3bf 8f6f 	isb	sy
 80003bc:	f3bf 8f4f 	dsb	sy
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	e7fe      	b.n	80003c2 <prvTaskExitError+0x22>
 80003c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003c8:	f383 8811 	msr	BASEPRI, r3
 80003cc:	f3bf 8f6f 	isb	sy
 80003d0:	f3bf 8f4f 	dsb	sy
 80003d4:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80003d6:	e7fe      	b.n	80003d6 <prvTaskExitError+0x36>
 80003d8:	20000000 	.word	0x20000000
 80003dc:	00000000 	.word	0x00000000

080003e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <pxCurrentTCBConst2>)
 80003e2:	6819      	ldr	r1, [r3, #0]
 80003e4:	6808      	ldr	r0, [r1, #0]
 80003e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003ea:	f380 8809 	msr	PSP, r0
 80003ee:	f3bf 8f6f 	isb	sy
 80003f2:	f04f 0000 	mov.w	r0, #0
 80003f6:	f380 8811 	msr	BASEPRI, r0
 80003fa:	4770      	bx	lr
 80003fc:	f3af 8000 	nop.w

08000400 <pxCurrentTCBConst2>:
 8000400:	200064b8 	.word	0x200064b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop

08000408 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000408:	4806      	ldr	r0, [pc, #24]	; (8000424 <prvPortStartFirstTask+0x1c>)
 800040a:	6800      	ldr	r0, [r0, #0]
 800040c:	6800      	ldr	r0, [r0, #0]
 800040e:	f380 8808 	msr	MSP, r0
 8000412:	b662      	cpsie	i
 8000414:	b661      	cpsie	f
 8000416:	f3bf 8f4f 	dsb	sy
 800041a:	f3bf 8f6f 	isb	sy
 800041e:	df00      	svc	0
 8000420:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000422:	bf00      	nop
 8000424:	e000ed08 	.word	0xe000ed08

08000428 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800042e:	4b3b      	ldr	r3, [pc, #236]	; (800051c <xPortStartScheduler+0xf4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a3b      	ldr	r2, [pc, #236]	; (8000520 <xPortStartScheduler+0xf8>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d109      	bne.n	800044c <xPortStartScheduler+0x24>
 8000438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800043c:	f383 8811 	msr	BASEPRI, r3
 8000440:	f3bf 8f6f 	isb	sy
 8000444:	f3bf 8f4f 	dsb	sy
 8000448:	613b      	str	r3, [r7, #16]
 800044a:	e7fe      	b.n	800044a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800044c:	4b33      	ldr	r3, [pc, #204]	; (800051c <xPortStartScheduler+0xf4>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a34      	ldr	r2, [pc, #208]	; (8000524 <xPortStartScheduler+0xfc>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d109      	bne.n	800046a <xPortStartScheduler+0x42>
 8000456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800045a:	f383 8811 	msr	BASEPRI, r3
 800045e:	f3bf 8f6f 	isb	sy
 8000462:	f3bf 8f4f 	dsb	sy
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	e7fe      	b.n	8000468 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800046a:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <xPortStartScheduler+0x100>)
 800046c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	22ff      	movs	r2, #255	; 0xff
 800047a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b27      	ldr	r3, [pc, #156]	; (800052c <xPortStartScheduler+0x104>)
 8000490:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000492:	4b27      	ldr	r3, [pc, #156]	; (8000530 <xPortStartScheduler+0x108>)
 8000494:	2207      	movs	r2, #7
 8000496:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000498:	e009      	b.n	80004ae <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800049a:	4b25      	ldr	r3, [pc, #148]	; (8000530 <xPortStartScheduler+0x108>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3b01      	subs	r3, #1
 80004a0:	4a23      	ldr	r2, [pc, #140]	; (8000530 <xPortStartScheduler+0x108>)
 80004a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004b6:	2b80      	cmp	r3, #128	; 0x80
 80004b8:	d0ef      	beq.n	800049a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80004ba:	4b1d      	ldr	r3, [pc, #116]	; (8000530 <xPortStartScheduler+0x108>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	021b      	lsls	r3, r3, #8
 80004c0:	4a1b      	ldr	r2, [pc, #108]	; (8000530 <xPortStartScheduler+0x108>)
 80004c2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80004c4:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <xPortStartScheduler+0x108>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80004cc:	4a18      	ldr	r2, [pc, #96]	; (8000530 <xPortStartScheduler+0x108>)
 80004ce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80004d8:	4a16      	ldr	r2, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80004e4:	4a13      	ldr	r2, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80004ee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80004f0:	f000 f8d2 	bl	8000698 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80004f4:	4b10      	ldr	r3, [pc, #64]	; (8000538 <xPortStartScheduler+0x110>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80004fa:	f000 f8e9 	bl	80006d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80004fe:	4a0f      	ldr	r2, [pc, #60]	; (800053c <xPortStartScheduler+0x114>)
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <xPortStartScheduler+0x114>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000508:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800050a:	f7ff ff7d 	bl	8000408 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800050e:	f7ff ff47 	bl	80003a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000512:	2300      	movs	r3, #0
}
 8000514:	4618      	mov	r0, r3
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	e000ed00 	.word	0xe000ed00
 8000520:	410fc271 	.word	0x410fc271
 8000524:	410fc270 	.word	0x410fc270
 8000528:	e000e400 	.word	0xe000e400
 800052c:	20000098 	.word	0x20000098
 8000530:	2000009c 	.word	0x2000009c
 8000534:	e000ed20 	.word	0xe000ed20
 8000538:	20000000 	.word	0x20000000
 800053c:	e000ef34 	.word	0xe000ef34

08000540 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800054a:	f383 8811 	msr	BASEPRI, r3
 800054e:	f3bf 8f6f 	isb	sy
 8000552:	f3bf 8f4f 	dsb	sy
 8000556:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <vPortEnterCritical+0x54>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <vPortEnterCritical+0x54>)
 8000560:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <vPortEnterCritical+0x54>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d10e      	bne.n	8000588 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <vPortEnterCritical+0x58>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d009      	beq.n	8000588 <vPortEnterCritical+0x48>
 8000574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000578:	f383 8811 	msr	BASEPRI, r3
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	e7fe      	b.n	8000586 <vPortEnterCritical+0x46>
	}
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	20000000 	.word	0x20000000
 8000598:	e000ed04 	.word	0xe000ed04

0800059c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <vPortExitCritical+0x4c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d109      	bne.n	80005be <vPortExitCritical+0x22>
 80005aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ae:	f383 8811 	msr	BASEPRI, r3
 80005b2:	f3bf 8f6f 	isb	sy
 80005b6:	f3bf 8f4f 	dsb	sy
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	e7fe      	b.n	80005bc <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <vPortExitCritical+0x4c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d104      	bne.n	80005da <vPortExitCritical+0x3e>
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000000 	.word	0x20000000
 80005ec:	00000000 	.word	0x00000000

080005f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80005f0:	f3ef 8009 	mrs	r0, PSP
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <pxCurrentTCBConst>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	f01e 0f10 	tst.w	lr, #16
 8000600:	bf08      	it	eq
 8000602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800060a:	6010      	str	r0, [r2, #0]
 800060c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8000610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000614:	f380 8811 	msr	BASEPRI, r0
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f001 fcfa 	bl	8002018 <vTaskSwitchContext>
 8000624:	f04f 0000 	mov.w	r0, #0
 8000628:	f380 8811 	msr	BASEPRI, r0
 800062c:	bc08      	pop	{r3}
 800062e:	6819      	ldr	r1, [r3, #0]
 8000630:	6808      	ldr	r0, [r1, #0]
 8000632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000636:	f01e 0f10 	tst.w	lr, #16
 800063a:	bf08      	it	eq
 800063c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000640:	f380 8809 	msr	PSP, r0
 8000644:	f3bf 8f6f 	isb	sy
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	f3af 8000 	nop.w

08000650 <pxCurrentTCBConst>:
 8000650:	200064b8 	.word	0x200064b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop

08000658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	__asm volatile
 800065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000662:	f383 8811 	msr	BASEPRI, r3
 8000666:	f3bf 8f6f 	isb	sy
 800066a:	f3bf 8f4f 	dsb	sy
 800066e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000670:	f001 fc16 	bl	8001ea0 <xTaskIncrementTick>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d003      	beq.n	8000682 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <SysTick_Handler+0x3c>)
 800067c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	e000ed04 	.word	0xe000ed04

08000698 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800069c:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <vPortSetupTimerInterrupt+0x28>)
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <vPortSetupTimerInterrupt+0x2c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4909      	ldr	r1, [pc, #36]	; (80006c8 <vPortSetupTimerInterrupt+0x30>)
 80006a4:	fba1 1303 	umull	r1, r3, r1, r3
 80006a8:	099b      	lsrs	r3, r3, #6
 80006aa:	3b01      	subs	r3, #1
 80006ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <vPortSetupTimerInterrupt+0x34>)
 80006b0:	2207      	movs	r2, #7
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000e014 	.word	0xe000e014
 80006c4:	20000014 	.word	0x20000014
 80006c8:	10624dd3 	.word	0x10624dd3
 80006cc:	e000e010 	.word	0xe000e010

080006d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80006d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80006e0 <vPortEnableVFP+0x10>
 80006d4:	6801      	ldr	r1, [r0, #0]
 80006d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006da:	6001      	str	r1, [r0, #0]
 80006dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80006de:	bf00      	nop
 80006e0:	e000ed88 	.word	0xe000ed88

080006e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80006ea:	f3ef 8305 	mrs	r3, IPSR
 80006ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b0f      	cmp	r3, #15
 80006f4:	d913      	bls.n	800071e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80006f6:	4a16      	ldr	r2, [pc, #88]	; (8000750 <vPortValidateInterruptPriority+0x6c>)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <vPortValidateInterruptPriority+0x70>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	7afa      	ldrb	r2, [r7, #11]
 8000706:	429a      	cmp	r2, r3
 8000708:	d209      	bcs.n	800071e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800070a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070e:	f383 8811 	msr	BASEPRI, r3
 8000712:	f3bf 8f6f 	isb	sy
 8000716:	f3bf 8f4f 	dsb	sy
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	e7fe      	b.n	800071c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <vPortValidateInterruptPriority+0x74>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <vPortValidateInterruptPriority+0x78>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	429a      	cmp	r2, r3
 800072c:	d909      	bls.n	8000742 <vPortValidateInterruptPriority+0x5e>
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	f383 8811 	msr	BASEPRI, r3
 8000736:	f3bf 8f6f 	isb	sy
 800073a:	f3bf 8f4f 	dsb	sy
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	e7fe      	b.n	8000740 <vPortValidateInterruptPriority+0x5c>
	}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e3f0 	.word	0xe000e3f0
 8000754:	20000098 	.word	0x20000098
 8000758:	e000ed0c 	.word	0xe000ed0c
 800075c:	2000009c 	.word	0x2000009c

08000760 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800076c:	f001 fade 	bl	8001d2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000770:	4b59      	ldr	r3, [pc, #356]	; (80008d8 <pvPortMalloc+0x178>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d101      	bne.n	800077c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8000778:	f000 f91c 	bl	80009b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800077c:	4b57      	ldr	r3, [pc, #348]	; (80008dc <pvPortMalloc+0x17c>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4013      	ands	r3, r2
 8000784:	2b00      	cmp	r3, #0
 8000786:	f040 808c 	bne.w	80008a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d01c      	beq.n	80007ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8000790:	2208      	movs	r2, #8
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d013      	beq.n	80007ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f023 0307 	bic.w	r3, r3, #7
 80007a8:	3308      	adds	r3, #8
 80007aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d009      	beq.n	80007ca <pvPortMalloc+0x6a>
 80007b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007ba:	f383 8811 	msr	BASEPRI, r3
 80007be:	f3bf 8f6f 	isb	sy
 80007c2:	f3bf 8f4f 	dsb	sy
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e7fe      	b.n	80007c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d068      	beq.n	80008a2 <pvPortMalloc+0x142>
 80007d0:	4b43      	ldr	r3, [pc, #268]	; (80008e0 <pvPortMalloc+0x180>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d863      	bhi.n	80008a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80007da:	4b42      	ldr	r3, [pc, #264]	; (80008e4 <pvPortMalloc+0x184>)
 80007dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80007de:	4b41      	ldr	r3, [pc, #260]	; (80008e4 <pvPortMalloc+0x184>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007e4:	e004      	b.n	80007f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80007e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d203      	bcs.n	8000802 <pvPortMalloc+0xa2>
 80007fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1f1      	bne.n	80007e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000802:	4b35      	ldr	r3, [pc, #212]	; (80008d8 <pvPortMalloc+0x178>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000808:	429a      	cmp	r2, r3
 800080a:	d04a      	beq.n	80008a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800080c:	6a3b      	ldr	r3, [r7, #32]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2208      	movs	r2, #8
 8000812:	4413      	add	r3, r2
 8000814:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	6a3b      	ldr	r3, [r7, #32]
 800081c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000820:	685a      	ldr	r2, [r3, #4]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	1ad2      	subs	r2, r2, r3
 8000826:	2308      	movs	r3, #8
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	429a      	cmp	r2, r3
 800082c:	d91e      	bls.n	800086c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800082e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4413      	add	r3, r2
 8000834:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000836:	69bb      	ldr	r3, [r7, #24]
 8000838:	f003 0307 	and.w	r3, r3, #7
 800083c:	2b00      	cmp	r3, #0
 800083e:	d009      	beq.n	8000854 <pvPortMalloc+0xf4>
 8000840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000844:	f383 8811 	msr	BASEPRI, r3
 8000848:	f3bf 8f6f 	isb	sy
 800084c:	f3bf 8f4f 	dsb	sy
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	e7fe      	b.n	8000852 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000856:	685a      	ldr	r2, [r3, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	1ad2      	subs	r2, r2, r3
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000866:	69b8      	ldr	r0, [r7, #24]
 8000868:	f000 f906 	bl	8000a78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800086c:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <pvPortMalloc+0x180>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	4a1a      	ldr	r2, [pc, #104]	; (80008e0 <pvPortMalloc+0x180>)
 8000878:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <pvPortMalloc+0x180>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <pvPortMalloc+0x188>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	429a      	cmp	r2, r3
 8000884:	d203      	bcs.n	800088e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <pvPortMalloc+0x180>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <pvPortMalloc+0x188>)
 800088c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	4b12      	ldr	r3, [pc, #72]	; (80008dc <pvPortMalloc+0x17c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	431a      	orrs	r2, r3
 8000898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800089c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80008a2:	f001 fa51 	bl	8001d48 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d101      	bne.n	80008b0 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80008ac:	f003 fbe6 	bl	800407c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d009      	beq.n	80008ce <pvPortMalloc+0x16e>
 80008ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008be:	f383 8811 	msr	BASEPRI, r3
 80008c2:	f3bf 8f6f 	isb	sy
 80008c6:	f3bf 8f4f 	dsb	sy
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	e7fe      	b.n	80008cc <pvPortMalloc+0x16c>
	return pvReturn;
 80008ce:	69fb      	ldr	r3, [r7, #28]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200064a8 	.word	0x200064a8
 80008dc:	200064b4 	.word	0x200064b4
 80008e0:	200064ac 	.word	0x200064ac
 80008e4:	200064a0 	.word	0x200064a0
 80008e8:	200064b0 	.word	0x200064b0

080008ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d046      	beq.n	800098c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80008fe:	2308      	movs	r3, #8
 8000900:	425b      	negs	r3, r3
 8000902:	697a      	ldr	r2, [r7, #20]
 8000904:	4413      	add	r3, r2
 8000906:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	685a      	ldr	r2, [r3, #4]
 8000910:	4b20      	ldr	r3, [pc, #128]	; (8000994 <vPortFree+0xa8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4013      	ands	r3, r2
 8000916:	2b00      	cmp	r3, #0
 8000918:	d109      	bne.n	800092e <vPortFree+0x42>
 800091a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800091e:	f383 8811 	msr	BASEPRI, r3
 8000922:	f3bf 8f6f 	isb	sy
 8000926:	f3bf 8f4f 	dsb	sy
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	e7fe      	b.n	800092c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d009      	beq.n	800094a <vPortFree+0x5e>
 8000936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800093a:	f383 8811 	msr	BASEPRI, r3
 800093e:	f3bf 8f6f 	isb	sy
 8000942:	f3bf 8f4f 	dsb	sy
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	e7fe      	b.n	8000948 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	685a      	ldr	r2, [r3, #4]
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <vPortFree+0xa8>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4013      	ands	r3, r2
 8000954:	2b00      	cmp	r3, #0
 8000956:	d019      	beq.n	800098c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d115      	bne.n	800098c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	685a      	ldr	r2, [r3, #4]
 8000964:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <vPortFree+0xa8>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	43db      	mvns	r3, r3
 800096a:	401a      	ands	r2, r3
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000970:	f001 f9dc 	bl	8001d2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	685a      	ldr	r2, [r3, #4]
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <vPortFree+0xac>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4413      	add	r3, r2
 800097e:	4a06      	ldr	r2, [pc, #24]	; (8000998 <vPortFree+0xac>)
 8000980:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000982:	6938      	ldr	r0, [r7, #16]
 8000984:	f000 f878 	bl	8000a78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000988:	f001 f9de 	bl	8001d48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800098c:	bf00      	nop
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200064b4 	.word	0x200064b4
 8000998:	200064ac 	.word	0x200064ac

0800099c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <xPortGetFreeHeapSize+0x14>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	200064ac 	.word	0x200064ac

080009b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80009ba:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80009be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009c0:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <prvHeapInit+0xac>)
 80009c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d00c      	beq.n	80009e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	3307      	adds	r3, #7
 80009d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f023 0307 	bic.w	r3, r3, #7
 80009da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80009dc:	68ba      	ldr	r2, [r7, #8]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	4a1f      	ldr	r2, [pc, #124]	; (8000a60 <prvHeapInit+0xac>)
 80009e4:	4413      	add	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009ec:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <prvHeapInit+0xb0>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <prvHeapInit+0xb0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	4413      	add	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a00:	2208      	movs	r2, #8
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	1a9b      	subs	r3, r3, r2
 8000a06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f023 0307 	bic.w	r3, r3, #7
 8000a0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4a15      	ldr	r2, [pc, #84]	; (8000a68 <prvHeapInit+0xb4>)
 8000a14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <prvHeapInit+0xb4>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <prvHeapInit+0xb4>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	68fa      	ldr	r2, [r7, #12]
 8000a2e:	1ad2      	subs	r2, r2, r3
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <prvHeapInit+0xb4>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <prvHeapInit+0xb8>)
 8000a42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	4a09      	ldr	r2, [pc, #36]	; (8000a70 <prvHeapInit+0xbc>)
 8000a4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <prvHeapInit+0xc0>)
 8000a4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a52:	601a      	str	r2, [r3, #0]
}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	200000a0 	.word	0x200000a0
 8000a64:	200064a0 	.word	0x200064a0
 8000a68:	200064a8 	.word	0x200064a8
 8000a6c:	200064b0 	.word	0x200064b0
 8000a70:	200064ac 	.word	0x200064ac
 8000a74:	200064b4 	.word	0x200064b4

08000a78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a80:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <prvInsertBlockIntoFreeList+0xac>)
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	e002      	b.n	8000a8c <prvInsertBlockIntoFreeList+0x14>
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d3f7      	bcc.n	8000a86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	441a      	add	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d108      	bne.n	8000aba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	685a      	ldr	r2, [r3, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	441a      	add	r2, r3
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	441a      	add	r2, r3
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d118      	bne.n	8000b00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <prvInsertBlockIntoFreeList+0xb0>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d00d      	beq.n	8000af6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	441a      	add	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	e008      	b.n	8000b08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <prvInsertBlockIntoFreeList+0xb0>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	e003      	b.n	8000b08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d002      	beq.n	8000b16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	200064a0 	.word	0x200064a0
 8000b28:	200064a8 	.word	0x200064a8

08000b2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d109      	bne.n	8000b54 <xQueueGenericReset+0x28>
 8000b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b44:	f383 8811 	msr	BASEPRI, r3
 8000b48:	f3bf 8f6f 	isb	sy
 8000b4c:	f3bf 8f4f 	dsb	sy
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	e7fe      	b.n	8000b52 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000b54:	f7ff fcf4 	bl	8000540 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b60:	68f9      	ldr	r1, [r7, #12]
 8000b62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b64:	fb01 f303 	mul.w	r3, r1, r3
 8000b68:	441a      	add	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	2200      	movs	r2, #0
 8000b72:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b84:	3b01      	subs	r3, #1
 8000b86:	68f9      	ldr	r1, [r7, #12]
 8000b88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b8a:	fb01 f303 	mul.w	r3, r1, r3
 8000b8e:	441a      	add	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	22ff      	movs	r2, #255	; 0xff
 8000b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	22ff      	movs	r2, #255	; 0xff
 8000ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d114      	bne.n	8000bd4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	691b      	ldr	r3, [r3, #16]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d01a      	beq.n	8000be8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	3310      	adds	r3, #16
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 fafc 	bl	80021b4 <xTaskRemoveFromEventList>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d012      	beq.n	8000be8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <xQueueGenericReset+0xcc>)
 8000bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	f3bf 8f4f 	dsb	sy
 8000bce:	f3bf 8f6f 	isb	sy
 8000bd2:	e009      	b.n	8000be8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3310      	adds	r3, #16
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff faf9 	bl	80001d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	3324      	adds	r3, #36	; 0x24
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff faf4 	bl	80001d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000be8:	f7ff fcd8 	bl	800059c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000bec:	2301      	movs	r3, #1
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	e000ed04 	.word	0xe000ed04

08000bfc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af02      	add	r7, sp, #8
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	4613      	mov	r3, r2
 8000c08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d109      	bne.n	8000c24 <xQueueGenericCreate+0x28>
 8000c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c14:	f383 8811 	msr	BASEPRI, r3
 8000c18:	f3bf 8f6f 	isb	sy
 8000c1c:	f3bf 8f4f 	dsb	sy
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	e7fe      	b.n	8000c22 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d102      	bne.n	8000c30 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	e004      	b.n	8000c3a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	fb02 f303 	mul.w	r3, r2, r3
 8000c38:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3348      	adds	r3, #72	; 0x48
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fd8e 	bl	8000760 <pvPortMalloc>
 8000c44:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d00b      	beq.n	8000c64 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	3348      	adds	r3, #72	; 0x48
 8000c50:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000c52:	79fa      	ldrb	r2, [r7, #7]
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	68f8      	ldr	r0, [r7, #12]
 8000c60:	f000 f805 	bl	8000c6e <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8000c64:	69bb      	ldr	r3, [r7, #24]
	}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3720      	adds	r7, #32
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b084      	sub	sp, #16
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	60f8      	str	r0, [r7, #12]
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
 8000c7a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d103      	bne.n	8000c8a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	e002      	b.n	8000c90 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	69b8      	ldr	r0, [r7, #24]
 8000ca0:	f7ff ff44 	bl	8000b2c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000ca4:	bf00      	nop
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08e      	sub	sp, #56	; 0x38
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
 8000cb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d109      	bne.n	8000cdc <xQueueGenericSend+0x30>
 8000cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ccc:	f383 8811 	msr	BASEPRI, r3
 8000cd0:	f3bf 8f6f 	isb	sy
 8000cd4:	f3bf 8f4f 	dsb	sy
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cda:	e7fe      	b.n	8000cda <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d103      	bne.n	8000cea <xQueueGenericSend+0x3e>
 8000ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <xQueueGenericSend+0x42>
 8000cea:	2301      	movs	r3, #1
 8000cec:	e000      	b.n	8000cf0 <xQueueGenericSend+0x44>
 8000cee:	2300      	movs	r3, #0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d109      	bne.n	8000d08 <xQueueGenericSend+0x5c>
 8000cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cf8:	f383 8811 	msr	BASEPRI, r3
 8000cfc:	f3bf 8f6f 	isb	sy
 8000d00:	f3bf 8f4f 	dsb	sy
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
 8000d06:	e7fe      	b.n	8000d06 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d103      	bne.n	8000d16 <xQueueGenericSend+0x6a>
 8000d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d101      	bne.n	8000d1a <xQueueGenericSend+0x6e>
 8000d16:	2301      	movs	r3, #1
 8000d18:	e000      	b.n	8000d1c <xQueueGenericSend+0x70>
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d109      	bne.n	8000d34 <xQueueGenericSend+0x88>
 8000d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d24:	f383 8811 	msr	BASEPRI, r3
 8000d28:	f3bf 8f6f 	isb	sy
 8000d2c:	f3bf 8f4f 	dsb	sy
 8000d30:	623b      	str	r3, [r7, #32]
 8000d32:	e7fe      	b.n	8000d32 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d34:	f001 fbfa 	bl	800252c <xTaskGetSchedulerState>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d102      	bne.n	8000d44 <xQueueGenericSend+0x98>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d101      	bne.n	8000d48 <xQueueGenericSend+0x9c>
 8000d44:	2301      	movs	r3, #1
 8000d46:	e000      	b.n	8000d4a <xQueueGenericSend+0x9e>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d109      	bne.n	8000d62 <xQueueGenericSend+0xb6>
 8000d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d52:	f383 8811 	msr	BASEPRI, r3
 8000d56:	f3bf 8f6f 	isb	sy
 8000d5a:	f3bf 8f4f 	dsb	sy
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	e7fe      	b.n	8000d60 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000d62:	f7ff fbed 	bl	8000540 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d302      	bcc.n	8000d78 <xQueueGenericSend+0xcc>
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d129      	bne.n	8000dcc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000d78:	683a      	ldr	r2, [r7, #0]
 8000d7a:	68b9      	ldr	r1, [r7, #8]
 8000d7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d7e:	f000 fa57 	bl	8001230 <prvCopyDataToQueue>
 8000d82:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d010      	beq.n	8000dae <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d8e:	3324      	adds	r3, #36	; 0x24
 8000d90:	4618      	mov	r0, r3
 8000d92:	f001 fa0f 	bl	80021b4 <xTaskRemoveFromEventList>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d013      	beq.n	8000dc4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000d9c:	4b3f      	ldr	r3, [pc, #252]	; (8000e9c <xQueueGenericSend+0x1f0>)
 8000d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	f3bf 8f4f 	dsb	sy
 8000da8:	f3bf 8f6f 	isb	sy
 8000dac:	e00a      	b.n	8000dc4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d007      	beq.n	8000dc4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000db4:	4b39      	ldr	r3, [pc, #228]	; (8000e9c <xQueueGenericSend+0x1f0>)
 8000db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	f3bf 8f4f 	dsb	sy
 8000dc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000dc4:	f7ff fbea 	bl	800059c <vPortExitCritical>
				return pdPASS;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e063      	b.n	8000e94 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d103      	bne.n	8000dda <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000dd2:	f7ff fbe3 	bl	800059c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e05c      	b.n	8000e94 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d106      	bne.n	8000dee <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4618      	mov	r0, r3
 8000de6:	f001 fa47 	bl	8002278 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000dea:	2301      	movs	r3, #1
 8000dec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000dee:	f7ff fbd5 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000df2:	f000 ff9b 	bl	8001d2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000df6:	f7ff fba3 	bl	8000540 <vPortEnterCritical>
 8000dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e06:	d103      	bne.n	8000e10 <xQueueGenericSend+0x164>
 8000e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e1c:	d103      	bne.n	8000e26 <xQueueGenericSend+0x17a>
 8000e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e26:	f7ff fbb9 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e2a:	1d3a      	adds	r2, r7, #4
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 fa44 	bl	80022c0 <xTaskCheckForTimeOut>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d124      	bne.n	8000e88 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000e3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e40:	f000 faee 	bl	8001420 <prvIsQueueFull>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d018      	beq.n	8000e7c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e4c:	3310      	adds	r3, #16
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f001 f960 	bl	8002118 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e5a:	f000 fa79 	bl	8001350 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000e5e:	f000 ff73 	bl	8001d48 <xTaskResumeAll>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f47f af7c 	bne.w	8000d62 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <xQueueGenericSend+0x1f0>)
 8000e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	f3bf 8f4f 	dsb	sy
 8000e76:	f3bf 8f6f 	isb	sy
 8000e7a:	e772      	b.n	8000d62 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e7e:	f000 fa67 	bl	8001350 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000e82:	f000 ff61 	bl	8001d48 <xTaskResumeAll>
 8000e86:	e76c      	b.n	8000d62 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e8a:	f000 fa61 	bl	8001350 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000e8e:	f000 ff5b 	bl	8001d48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000e92:	2300      	movs	r3, #0
		}
	}
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3738      	adds	r7, #56	; 0x38
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	e000ed04 	.word	0xe000ed04

08000ea0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08e      	sub	sp, #56	; 0x38
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d109      	bne.n	8000ecc <xQueueGenericSendFromISR+0x2c>
 8000eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ebc:	f383 8811 	msr	BASEPRI, r3
 8000ec0:	f3bf 8f6f 	isb	sy
 8000ec4:	f3bf 8f4f 	dsb	sy
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eca:	e7fe      	b.n	8000eca <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d103      	bne.n	8000eda <xQueueGenericSendFromISR+0x3a>
 8000ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <xQueueGenericSendFromISR+0x3e>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <xQueueGenericSendFromISR+0x40>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d109      	bne.n	8000ef8 <xQueueGenericSendFromISR+0x58>
 8000ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ee8:	f383 8811 	msr	BASEPRI, r3
 8000eec:	f3bf 8f6f 	isb	sy
 8000ef0:	f3bf 8f4f 	dsb	sy
 8000ef4:	623b      	str	r3, [r7, #32]
 8000ef6:	e7fe      	b.n	8000ef6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d103      	bne.n	8000f06 <xQueueGenericSendFromISR+0x66>
 8000efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d101      	bne.n	8000f0a <xQueueGenericSendFromISR+0x6a>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <xQueueGenericSendFromISR+0x6c>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d109      	bne.n	8000f24 <xQueueGenericSendFromISR+0x84>
 8000f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f14:	f383 8811 	msr	BASEPRI, r3
 8000f18:	f3bf 8f6f 	isb	sy
 8000f1c:	f3bf 8f4f 	dsb	sy
 8000f20:	61fb      	str	r3, [r7, #28]
 8000f22:	e7fe      	b.n	8000f22 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000f24:	f7ff fbde 	bl	80006e4 <vPortValidateInterruptPriority>
	__asm volatile
 8000f28:	f3ef 8211 	mrs	r2, BASEPRI
 8000f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f30:	f383 8811 	msr	BASEPRI, r3
 8000f34:	f3bf 8f6f 	isb	sy
 8000f38:	f3bf 8f4f 	dsb	sy
 8000f3c:	61ba      	str	r2, [r7, #24]
 8000f3e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8000f40:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d302      	bcc.n	8000f56 <xQueueGenericSendFromISR+0xb6>
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d12c      	bne.n	8000fb0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	68b9      	ldr	r1, [r7, #8]
 8000f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f66:	f000 f963 	bl	8001230 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000f6a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f72:	d112      	bne.n	8000f9a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d016      	beq.n	8000faa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f7e:	3324      	adds	r3, #36	; 0x24
 8000f80:	4618      	mov	r0, r3
 8000f82:	f001 f917 	bl	80021b4 <xTaskRemoveFromEventList>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d00e      	beq.n	8000faa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00b      	beq.n	8000faa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2201      	movs	r2, #1
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	e007      	b.n	8000faa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000f9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	b25a      	sxtb	r2, r3
 8000fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000faa:	2301      	movs	r3, #1
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8000fae:	e001      	b.n	8000fb4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8000fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb6:	613b      	str	r3, [r7, #16]
	__asm volatile
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3738      	adds	r7, #56	; 0x38
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08e      	sub	sp, #56	; 0x38
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d109      	bne.n	8000ff8 <xQueueGenericReceive+0x30>
	__asm volatile
 8000fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fe8:	f383 8811 	msr	BASEPRI, r3
 8000fec:	f3bf 8f6f 	isb	sy
 8000ff0:	f3bf 8f4f 	dsb	sy
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff6:	e7fe      	b.n	8000ff6 <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d103      	bne.n	8001006 <xQueueGenericReceive+0x3e>
 8000ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <xQueueGenericReceive+0x42>
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <xQueueGenericReceive+0x44>
 800100a:	2300      	movs	r3, #0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d109      	bne.n	8001024 <xQueueGenericReceive+0x5c>
 8001010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001014:	f383 8811 	msr	BASEPRI, r3
 8001018:	f3bf 8f6f 	isb	sy
 800101c:	f3bf 8f4f 	dsb	sy
 8001020:	623b      	str	r3, [r7, #32]
 8001022:	e7fe      	b.n	8001022 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001024:	f001 fa82 	bl	800252c <xTaskGetSchedulerState>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d102      	bne.n	8001034 <xQueueGenericReceive+0x6c>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d101      	bne.n	8001038 <xQueueGenericReceive+0x70>
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <xQueueGenericReceive+0x72>
 8001038:	2300      	movs	r3, #0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d109      	bne.n	8001052 <xQueueGenericReceive+0x8a>
 800103e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001042:	f383 8811 	msr	BASEPRI, r3
 8001046:	f3bf 8f6f 	isb	sy
 800104a:	f3bf 8f4f 	dsb	sy
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	e7fe      	b.n	8001050 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001052:	f7ff fa75 	bl	8000540 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800105c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105e:	2b00      	cmp	r3, #0
 8001060:	d046      	beq.n	80010f0 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800106c:	f000 f94a 	bl	8001304 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d121      	bne.n	80010ba <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8001076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001078:	1e5a      	subs	r2, r3, #1
 800107a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800107c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800107e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d104      	bne.n	8001090 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001086:	f001 fb69 	bl	800275c <pvTaskIncrementMutexHeldCount>
 800108a:	4602      	mov	r2, r0
 800108c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800108e:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d027      	beq.n	80010e8 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800109a:	3310      	adds	r3, #16
 800109c:	4618      	mov	r0, r3
 800109e:	f001 f889 	bl	80021b4 <xTaskRemoveFromEventList>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d01f      	beq.n	80010e8 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 80010a8:	4b4f      	ldr	r3, [pc, #316]	; (80011e8 <xQueueGenericReceive+0x220>)
 80010aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	f3bf 8f4f 	dsb	sy
 80010b4:	f3bf 8f6f 	isb	sy
 80010b8:	e016      	b.n	80010e8 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80010ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010be:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00f      	beq.n	80010e8 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80010c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ca:	3324      	adds	r3, #36	; 0x24
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 f871 	bl	80021b4 <xTaskRemoveFromEventList>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d007      	beq.n	80010e8 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 80010d8:	4b43      	ldr	r3, [pc, #268]	; (80011e8 <xQueueGenericReceive+0x220>)
 80010da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	f3bf 8f4f 	dsb	sy
 80010e4:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 80010e8:	f7ff fa58 	bl	800059c <vPortExitCritical>
				return pdPASS;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e077      	b.n	80011e0 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d103      	bne.n	80010fe <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80010f6:	f7ff fa51 	bl	800059c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e070      	b.n	80011e0 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 80010fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001100:	2b00      	cmp	r3, #0
 8001102:	d106      	bne.n	8001112 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	4618      	mov	r0, r3
 800110a:	f001 f8b5 	bl	8002278 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800110e:	2301      	movs	r3, #1
 8001110:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001112:	f7ff fa43 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001116:	f000 fe09 	bl	8001d2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800111a:	f7ff fa11 	bl	8000540 <vPortEnterCritical>
 800111e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001120:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001124:	b25b      	sxtb	r3, r3
 8001126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800112a:	d103      	bne.n	8001134 <xQueueGenericReceive+0x16c>
 800112c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001136:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800113a:	b25b      	sxtb	r3, r3
 800113c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001140:	d103      	bne.n	800114a <xQueueGenericReceive+0x182>
 8001142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800114a:	f7ff fa27 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800114e:	1d3a      	adds	r2, r7, #4
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4611      	mov	r1, r2
 8001156:	4618      	mov	r0, r3
 8001158:	f001 f8b2 	bl	80022c0 <xTaskCheckForTimeOut>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d131      	bne.n	80011c6 <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001162:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001164:	f000 f946 	bl	80013f4 <prvIsQueueEmpty>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d025      	beq.n	80011ba <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800116e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d108      	bne.n	8001188 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8001176:	f7ff f9e3 	bl	8000540 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800117a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4618      	mov	r0, r3
 8001180:	f001 f9f2 	bl	8002568 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8001184:	f7ff fa0a 	bl	800059c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800118a:	3324      	adds	r3, #36	; 0x24
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f000 ffc1 	bl	8002118 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001196:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001198:	f000 f8da 	bl	8001350 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800119c:	f000 fdd4 	bl	8001d48 <xTaskResumeAll>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f47f af55 	bne.w	8001052 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <xQueueGenericReceive+0x220>)
 80011aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	f3bf 8f4f 	dsb	sy
 80011b4:	f3bf 8f6f 	isb	sy
 80011b8:	e74b      	b.n	8001052 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80011ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011bc:	f000 f8c8 	bl	8001350 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80011c0:	f000 fdc2 	bl	8001d48 <xTaskResumeAll>
 80011c4:	e745      	b.n	8001052 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80011c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011c8:	f000 f8c2 	bl	8001350 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80011cc:	f000 fdbc 	bl	8001d48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80011d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011d2:	f000 f90f 	bl	80013f4 <prvIsQueueEmpty>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f43f af3a 	beq.w	8001052 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80011de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3738      	adds	r7, #56	; 0x38
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	e000ed04 	.word	0xe000ed04

080011ec <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	617b      	str	r3, [r7, #20]
	configASSERT( pxQueue );
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d109      	bne.n	8001212 <uxQueueSpacesAvailable+0x26>
 80011fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001202:	f383 8811 	msr	BASEPRI, r3
 8001206:	f3bf 8f6f 	isb	sy
 800120a:	f3bf 8f4f 	dsb	sy
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	e7fe      	b.n	8001210 <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 8001212:	f7ff f995 	bl	8000540 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8001222:	f7ff f9bb 	bl	800059c <vPortExitCritical>

	return uxReturn;
 8001226:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8001228:	4618      	mov	r0, r3
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001244:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10d      	bne.n	800126a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d14d      	bne.n	80012f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	4618      	mov	r0, r3
 800125c:	f001 f9fa 	bl	8002654 <xTaskPriorityDisinherit>
 8001260:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2200      	movs	r2, #0
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	e043      	b.n	80012f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d119      	bne.n	80012a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	6898      	ldr	r0, [r3, #8]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	461a      	mov	r2, r3
 800127a:	68b9      	ldr	r1, [r7, #8]
 800127c:	f003 fac4 	bl	8004808 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	441a      	add	r2, r3
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	429a      	cmp	r2, r3
 8001298:	d32b      	bcc.n	80012f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	e026      	b.n	80012f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	68d8      	ldr	r0, [r3, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	461a      	mov	r2, r3
 80012ae:	68b9      	ldr	r1, [r7, #8]
 80012b0:	f003 faaa 	bl	8004808 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	68da      	ldr	r2, [r3, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	425b      	negs	r3, r3
 80012be:	441a      	add	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	68da      	ldr	r2, [r3, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d207      	bcs.n	80012e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	425b      	negs	r3, r3
 80012da:	441a      	add	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d105      	bne.n	80012f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1c5a      	adds	r2, r3, #1
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80012fa:	697b      	ldr	r3, [r7, #20]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2b00      	cmp	r3, #0
 8001314:	d018      	beq.n	8001348 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	441a      	add	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	429a      	cmp	r2, r3
 800132e:	d303      	bcc.n	8001338 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68d9      	ldr	r1, [r3, #12]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	461a      	mov	r2, r3
 8001342:	6838      	ldr	r0, [r7, #0]
 8001344:	f003 fa60 	bl	8004808 <memcpy>
	}
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001358:	f7ff f8f2 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001362:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001364:	e011      	b.n	800138a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136a:	2b00      	cmp	r3, #0
 800136c:	d012      	beq.n	8001394 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3324      	adds	r3, #36	; 0x24
 8001372:	4618      	mov	r0, r3
 8001374:	f000 ff1e 	bl	80021b4 <xTaskRemoveFromEventList>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800137e:	f000 fffd 	bl	800237c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	3b01      	subs	r3, #1
 8001386:	b2db      	uxtb	r3, r3
 8001388:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800138a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138e:	2b00      	cmp	r3, #0
 8001390:	dce9      	bgt.n	8001366 <prvUnlockQueue+0x16>
 8001392:	e000      	b.n	8001396 <prvUnlockQueue+0x46>
					break;
 8001394:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	22ff      	movs	r2, #255	; 0xff
 800139a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800139e:	f7ff f8fd 	bl	800059c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80013a2:	f7ff f8cd 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80013ae:	e011      	b.n	80013d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d012      	beq.n	80013de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3310      	adds	r3, #16
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 fef9 	bl	80021b4 <xTaskRemoveFromEventList>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80013c8:	f000 ffd8 	bl	800237c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80013cc:	7bbb      	ldrb	r3, [r7, #14]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80013d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	dce9      	bgt.n	80013b0 <prvUnlockQueue+0x60>
 80013dc:	e000      	b.n	80013e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80013de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	22ff      	movs	r2, #255	; 0xff
 80013e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80013e8:	f7ff f8d8 	bl	800059c <vPortExitCritical>
}
 80013ec:	bf00      	nop
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80013fc:	f7ff f8a0 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001404:	2b00      	cmp	r3, #0
 8001406:	d102      	bne.n	800140e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001408:	2301      	movs	r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	e001      	b.n	8001412 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001412:	f7ff f8c3 	bl	800059c <vPortExitCritical>

	return xReturn;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001428:	f7ff f88a 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001434:	429a      	cmp	r2, r3
 8001436:	d102      	bne.n	800143e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001438:	2301      	movs	r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	e001      	b.n	8001442 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001442:	f7ff f8ab 	bl	800059c <vPortExitCritical>

	return xReturn;
 8001446:	68fb      	ldr	r3, [r7, #12]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	e014      	b.n	800148a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001460:	4a0e      	ldr	r2, [pc, #56]	; (800149c <vQueueAddToRegistry+0x4c>)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d10b      	bne.n	8001484 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800146c:	490b      	ldr	r1, [pc, #44]	; (800149c <vQueueAddToRegistry+0x4c>)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001476:	4a09      	ldr	r2, [pc, #36]	; (800149c <vQueueAddToRegistry+0x4c>)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	4413      	add	r3, r2
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001482:	e005      	b.n	8001490 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	3301      	adds	r3, #1
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2b07      	cmp	r3, #7
 800148e:	d9e7      	bls.n	8001460 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	20006604 	.word	0x20006604

080014a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80014b0:	f7ff f846 	bl	8000540 <vPortEnterCritical>
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014ba:	b25b      	sxtb	r3, r3
 80014bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c0:	d103      	bne.n	80014ca <vQueueWaitForMessageRestricted+0x2a>
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014d0:	b25b      	sxtb	r3, r3
 80014d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d6:	d103      	bne.n	80014e0 <vQueueWaitForMessageRestricted+0x40>
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80014e0:	f7ff f85c 	bl	800059c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d106      	bne.n	80014fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	3324      	adds	r3, #36	; 0x24
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	68b9      	ldr	r1, [r7, #8]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f000 fe33 	bl	8002160 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80014fa:	6978      	ldr	r0, [r7, #20]
 80014fc:	f7ff ff28 	bl	8001350 <prvUnlockQueue>
	}
 8001500:	bf00      	nop
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08c      	sub	sp, #48	; 0x30
 800150c:	af04      	add	r7, sp, #16
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	4613      	mov	r3, r2
 8001516:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f91f 	bl	8000760 <pvPortMalloc>
 8001522:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00e      	beq.n	8001548 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800152a:	2050      	movs	r0, #80	; 0x50
 800152c:	f7ff f918 	bl	8000760 <pvPortMalloc>
 8001530:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	631a      	str	r2, [r3, #48]	; 0x30
 800153e:	e005      	b.n	800154c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001540:	6978      	ldr	r0, [r7, #20]
 8001542:	f7ff f9d3 	bl	80008ec <vPortFree>
 8001546:	e001      	b.n	800154c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d013      	beq.n	800157a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001552:	88fa      	ldrh	r2, [r7, #6]
 8001554:	2300      	movs	r3, #0
 8001556:	9303      	str	r3, [sp, #12]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	9302      	str	r3, [sp, #8]
 800155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155e:	9301      	str	r3, [sp, #4]
 8001560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	68b9      	ldr	r1, [r7, #8]
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f000 f80e 	bl	800158a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800156e:	69f8      	ldr	r0, [r7, #28]
 8001570:	f000 f892 	bl	8001698 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001574:	2301      	movs	r3, #1
 8001576:	61bb      	str	r3, [r7, #24]
 8001578:	e002      	b.n	8001580 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
 800157e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001580:	69bb      	ldr	r3, [r7, #24]
	}
 8001582:	4618      	mov	r0, r3
 8001584:	3720      	adds	r7, #32
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b088      	sub	sp, #32
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800159a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	461a      	mov	r2, r3
 80015a2:	21a5      	movs	r1, #165	; 0xa5
 80015a4:	f003 f93b 	bl	800481e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80015a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015b2:	3b01      	subs	r3, #1
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	f023 0307 	bic.w	r3, r3, #7
 80015c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d009      	beq.n	80015e0 <prvInitialiseNewTask+0x56>
 80015cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015d0:	f383 8811 	msr	BASEPRI, r3
 80015d4:	f3bf 8f6f 	isb	sy
 80015d8:	f3bf 8f4f 	dsb	sy
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	e7fe      	b.n	80015de <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
 80015e4:	e012      	b.n	800160c <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	4413      	add	r3, r2
 80015ec:	7819      	ldrb	r1, [r3, #0]
 80015ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	4413      	add	r3, r2
 80015f4:	3334      	adds	r3, #52	; 0x34
 80015f6:	460a      	mov	r2, r1
 80015f8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	4413      	add	r3, r2
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d006      	beq.n	8001614 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3301      	adds	r3, #1
 800160a:	61fb      	str	r3, [r7, #28]
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	2b09      	cmp	r3, #9
 8001610:	d9e9      	bls.n	80015e6 <prvInitialiseNewTask+0x5c>
 8001612:	e000      	b.n	8001616 <prvInitialiseNewTask+0x8c>
		{
			break;
 8001614:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001618:	2200      	movs	r2, #0
 800161a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800161e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001620:	2b04      	cmp	r3, #4
 8001622:	d901      	bls.n	8001628 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001624:	2304      	movs	r3, #4
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800162a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800162c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800162e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001632:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8001634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001636:	2200      	movs	r2, #0
 8001638:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800163a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163c:	3304      	adds	r3, #4
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe fde6 	bl	8000210 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001646:	3318      	adds	r3, #24
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe fde1 	bl	8000210 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800164e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001652:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001656:	f1c3 0205 	rsb	r2, r3, #5
 800165a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800165c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800165e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001666:	2200      	movs	r2, #0
 8001668:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800166a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800166c:	2200      	movs	r2, #0
 800166e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	68f9      	ldr	r1, [r7, #12]
 8001676:	69b8      	ldr	r0, [r7, #24]
 8001678:	f7fe fe5e 	bl	8000338 <pxPortInitialiseStack>
 800167c:	4602      	mov	r2, r0
 800167e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001680:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001684:	2b00      	cmp	r3, #0
 8001686:	d002      	beq.n	800168e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800168c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800168e:	bf00      	nop
 8001690:	3720      	adds	r7, #32
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80016a0:	f7fe ff4e 	bl	8000540 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80016a4:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <prvAddNewTaskToReadyList+0xb8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	3301      	adds	r3, #1
 80016aa:	4a29      	ldr	r2, [pc, #164]	; (8001750 <prvAddNewTaskToReadyList+0xb8>)
 80016ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80016ae:	4b29      	ldr	r3, [pc, #164]	; (8001754 <prvAddNewTaskToReadyList+0xbc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80016b6:	4a27      	ldr	r2, [pc, #156]	; (8001754 <prvAddNewTaskToReadyList+0xbc>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80016bc:	4b24      	ldr	r3, [pc, #144]	; (8001750 <prvAddNewTaskToReadyList+0xb8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d110      	bne.n	80016e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80016c4:	f000 fe80 	bl	80023c8 <prvInitialiseTaskLists>
 80016c8:	e00d      	b.n	80016e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80016ca:	4b23      	ldr	r3, [pc, #140]	; (8001758 <prvAddNewTaskToReadyList+0xc0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d109      	bne.n	80016e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80016d2:	4b20      	ldr	r3, [pc, #128]	; (8001754 <prvAddNewTaskToReadyList+0xbc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016dc:	429a      	cmp	r2, r3
 80016de:	d802      	bhi.n	80016e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80016e0:	4a1c      	ldr	r2, [pc, #112]	; (8001754 <prvAddNewTaskToReadyList+0xbc>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <prvAddNewTaskToReadyList+0xc4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	3301      	adds	r3, #1
 80016ec:	4a1b      	ldr	r2, [pc, #108]	; (800175c <prvAddNewTaskToReadyList+0xc4>)
 80016ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f4:	2201      	movs	r2, #1
 80016f6:	409a      	lsls	r2, r3
 80016f8:	4b19      	ldr	r3, [pc, #100]	; (8001760 <prvAddNewTaskToReadyList+0xc8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	4a18      	ldr	r2, [pc, #96]	; (8001760 <prvAddNewTaskToReadyList+0xc8>)
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4a15      	ldr	r2, [pc, #84]	; (8001764 <prvAddNewTaskToReadyList+0xcc>)
 8001710:	441a      	add	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3304      	adds	r3, #4
 8001716:	4619      	mov	r1, r3
 8001718:	4610      	mov	r0, r2
 800171a:	f7fe fd86 	bl	800022a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800171e:	f7fe ff3d 	bl	800059c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001722:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <prvAddNewTaskToReadyList+0xc0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00e      	beq.n	8001748 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <prvAddNewTaskToReadyList+0xbc>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001734:	429a      	cmp	r2, r3
 8001736:	d207      	bcs.n	8001748 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <prvAddNewTaskToReadyList+0xd0>)
 800173a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	f3bf 8f4f 	dsb	sy
 8001744:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20006590 	.word	0x20006590
 8001754:	200064b8 	.word	0x200064b8
 8001758:	2000659c 	.word	0x2000659c
 800175c:	200065ac 	.word	0x200065ac
 8001760:	20006598 	.word	0x20006598
 8001764:	200064bc 	.word	0x200064bc
 8001768:	e000ed04 	.word	0xe000ed04

0800176c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	; 0x28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d109      	bne.n	8001794 <vTaskDelayUntil+0x28>
 8001780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001784:	f383 8811 	msr	BASEPRI, r3
 8001788:	f3bf 8f6f 	isb	sy
 800178c:	f3bf 8f4f 	dsb	sy
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	e7fe      	b.n	8001792 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d109      	bne.n	80017ae <vTaskDelayUntil+0x42>
 800179a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800179e:	f383 8811 	msr	BASEPRI, r3
 80017a2:	f3bf 8f6f 	isb	sy
 80017a6:	f3bf 8f4f 	dsb	sy
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	e7fe      	b.n	80017ac <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 80017ae:	4b29      	ldr	r3, [pc, #164]	; (8001854 <vTaskDelayUntil+0xe8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d009      	beq.n	80017ca <vTaskDelayUntil+0x5e>
 80017b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ba:	f383 8811 	msr	BASEPRI, r3
 80017be:	f3bf 8f6f 	isb	sy
 80017c2:	f3bf 8f4f 	dsb	sy
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	e7fe      	b.n	80017c8 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 80017ca:	f000 faaf 	bl	8001d2c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80017ce:	4b22      	ldr	r3, [pc, #136]	; (8001858 <vTaskDelayUntil+0xec>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d90b      	bls.n	8001800 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d911      	bls.n	8001816 <vTaskDelayUntil+0xaa>
 80017f2:	69fa      	ldr	r2, [r7, #28]
 80017f4:	6a3b      	ldr	r3, [r7, #32]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d90d      	bls.n	8001816 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80017fa:	2301      	movs	r3, #1
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
 80017fe:	e00a      	b.n	8001816 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	429a      	cmp	r2, r3
 8001808:	d803      	bhi.n	8001812 <vTaskDelayUntil+0xa6>
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	6a3b      	ldr	r3, [r7, #32]
 800180e:	429a      	cmp	r2, r3
 8001810:	d901      	bls.n	8001816 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8001812:	2301      	movs	r3, #1
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69fa      	ldr	r2, [r7, #28]
 800181a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	2b00      	cmp	r3, #0
 8001820:	d006      	beq.n	8001830 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	6a3b      	ldr	r3, [r7, #32]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2100      	movs	r1, #0
 800182a:	4618      	mov	r0, r3
 800182c:	f000 ffaa 	bl	8002784 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8001830:	f000 fa8a 	bl	8001d48 <xTaskResumeAll>
 8001834:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d107      	bne.n	800184c <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <vTaskDelayUntil+0xf0>)
 800183e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	f3bf 8f4f 	dsb	sy
 8001848:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800184c:	bf00      	nop
 800184e:	3728      	adds	r7, #40	; 0x28
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	200065b8 	.word	0x200065b8
 8001858:	20006594 	.word	0x20006594
 800185c:	e000ed04 	.word	0xe000ed04

08001860 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d016      	beq.n	80018a0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001872:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <vTaskDelay+0x60>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d009      	beq.n	800188e <vTaskDelay+0x2e>
 800187a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800187e:	f383 8811 	msr	BASEPRI, r3
 8001882:	f3bf 8f6f 	isb	sy
 8001886:	f3bf 8f4f 	dsb	sy
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	e7fe      	b.n	800188c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800188e:	f000 fa4d 	bl	8001d2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001892:	2100      	movs	r1, #0
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 ff75 	bl	8002784 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800189a:	f000 fa55 	bl	8001d48 <xTaskResumeAll>
 800189e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d107      	bne.n	80018b6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80018a6:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <vTaskDelay+0x64>)
 80018a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	f3bf 8f4f 	dsb	sy
 80018b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200065b8 	.word	0x200065b8
 80018c4:	e000ed04 	.word	0xe000ed04

080018c8 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 80018d0:	f7fe fe36 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d102      	bne.n	80018e0 <uxTaskPriorityGet+0x18>
 80018da:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <uxTaskPriorityGet+0x30>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	e000      	b.n	80018e2 <uxTaskPriorityGet+0x1a>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e8:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 80018ea:	f7fe fe57 	bl	800059c <vPortExitCritical>

		return uxReturn;
 80018ee:	68bb      	ldr	r3, [r7, #8]
	}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200064b8 	.word	0x200064b8

080018fc <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2b04      	cmp	r3, #4
 800190e:	d909      	bls.n	8001924 <vTaskPrioritySet+0x28>
 8001910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001914:	f383 8811 	msr	BASEPRI, r3
 8001918:	f3bf 8f6f 	isb	sy
 800191c:	f3bf 8f4f 	dsb	sy
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	e7fe      	b.n	8001922 <vTaskPrioritySet+0x26>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	2b04      	cmp	r3, #4
 8001928:	d901      	bls.n	800192e <vTaskPrioritySet+0x32>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800192a:	2304      	movs	r3, #4
 800192c:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800192e:	f7fe fe07 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d102      	bne.n	800193e <vTaskPrioritySet+0x42>
 8001938:	4b43      	ldr	r3, [pc, #268]	; (8001a48 <vTaskPrioritySet+0x14c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	e000      	b.n	8001940 <vTaskPrioritySet+0x44>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d074      	beq.n	8001a3a <vTaskPrioritySet+0x13e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	429a      	cmp	r2, r3
 8001956:	d90d      	bls.n	8001974 <vTaskPrioritySet+0x78>
				{
					if( pxTCB != pxCurrentTCB )
 8001958:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <vTaskPrioritySet+0x14c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	429a      	cmp	r2, r3
 8001960:	d00f      	beq.n	8001982 <vTaskPrioritySet+0x86>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8001962:	4b39      	ldr	r3, [pc, #228]	; (8001a48 <vTaskPrioritySet+0x14c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d809      	bhi.n	8001982 <vTaskPrioritySet+0x86>
						{
							xYieldRequired = pdTRUE;
 800196e:	2301      	movs	r3, #1
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	e006      	b.n	8001982 <vTaskPrioritySet+0x86>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8001974:	4b34      	ldr	r3, [pc, #208]	; (8001a48 <vTaskPrioritySet+0x14c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	429a      	cmp	r2, r3
 800197c:	d101      	bne.n	8001982 <vTaskPrioritySet+0x86>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800197e:	2301      	movs	r3, #1
 8001980:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001986:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	429a      	cmp	r2, r3
 8001992:	d102      	bne.n	800199a <vTaskPrioritySet+0x9e>
					{
						pxTCB->uxPriority = uxNewPriority;
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	641a      	str	r2, [r3, #64]	; 0x40
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	db04      	blt.n	80019b2 <vTaskPrioritySet+0xb6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	f1c3 0205 	rsb	r2, r3, #5
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	6959      	ldr	r1, [r3, #20]
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4a22      	ldr	r2, [pc, #136]	; (8001a4c <vTaskPrioritySet+0x150>)
 80019c2:	4413      	add	r3, r2
 80019c4:	4299      	cmp	r1, r3
 80019c6:	d101      	bne.n	80019cc <vTaskPrioritySet+0xd0>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <vTaskPrioritySet+0xd2>
 80019cc:	2300      	movs	r3, #0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d028      	beq.n	8001a24 <vTaskPrioritySet+0x128>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	3304      	adds	r3, #4
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fc84 	bl	80002e4 <uxListRemove>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d109      	bne.n	80019f6 <vTaskPrioritySet+0xfa>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80019e2:	2201      	movs	r2, #1
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <vTaskPrioritySet+0x154>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4013      	ands	r3, r2
 80019f2:	4a17      	ldr	r2, [pc, #92]	; (8001a50 <vTaskPrioritySet+0x154>)
 80019f4:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	2201      	movs	r2, #1
 80019fc:	409a      	lsls	r2, r3
 80019fe:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <vTaskPrioritySet+0x154>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <vTaskPrioritySet+0x154>)
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4a0d      	ldr	r2, [pc, #52]	; (8001a4c <vTaskPrioritySet+0x150>)
 8001a16:	441a      	add	r2, r3
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4610      	mov	r0, r2
 8001a20:	f7fe fc03 	bl	800022a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d007      	beq.n	8001a3a <vTaskPrioritySet+0x13e>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <vTaskPrioritySet+0x158>)
 8001a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	f3bf 8f4f 	dsb	sy
 8001a36:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8001a3a:	f7fe fdaf 	bl	800059c <vPortExitCritical>
	}
 8001a3e:	bf00      	nop
 8001a40:	3720      	adds	r7, #32
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200064b8 	.word	0x200064b8
 8001a4c:	200064bc 	.word	0x200064bc
 8001a50:	20006598 	.word	0x20006598
 8001a54:	e000ed04 	.word	0xe000ed04

08001a58 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001a60:	f7fe fd6e 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d102      	bne.n	8001a70 <vTaskSuspend+0x18>
 8001a6a:	4b37      	ldr	r3, [pc, #220]	; (8001b48 <vTaskSuspend+0xf0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	e000      	b.n	8001a72 <vTaskSuspend+0x1a>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	3304      	adds	r3, #4
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fc33 	bl	80002e4 <uxListRemove>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d115      	bne.n	8001ab0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a88:	4930      	ldr	r1, [pc, #192]	; (8001b4c <vTaskSuspend+0xf4>)
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	440b      	add	r3, r1
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10a      	bne.n	8001ab0 <vTaskSuspend+0x58>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43da      	mvns	r2, r3
 8001aa6:	4b2a      	ldr	r3, [pc, #168]	; (8001b50 <vTaskSuspend+0xf8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	4a28      	ldr	r2, [pc, #160]	; (8001b50 <vTaskSuspend+0xf8>)
 8001aae:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d004      	beq.n	8001ac2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	3318      	adds	r3, #24
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fc11 	bl	80002e4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4822      	ldr	r0, [pc, #136]	; (8001b54 <vTaskSuspend+0xfc>)
 8001aca:	f7fe fbae 	bl	800022a <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 8001ace:	f7fe fd65 	bl	800059c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8001ad2:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <vTaskSuspend+0x100>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d005      	beq.n	8001ae6 <vTaskSuspend+0x8e>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8001ada:	f7fe fd31 	bl	8000540 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8001ade:	f000 fcff 	bl	80024e0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8001ae2:	f7fe fd5b 	bl	800059c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8001ae6:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <vTaskSuspend+0xf0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d126      	bne.n	8001b3e <vTaskSuspend+0xe6>
		{
			if( xSchedulerRunning != pdFALSE )
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <vTaskSuspend+0x100>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d016      	beq.n	8001b26 <vTaskSuspend+0xce>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8001af8:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <vTaskSuspend+0x104>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d009      	beq.n	8001b14 <vTaskSuspend+0xbc>
 8001b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b04:	f383 8811 	msr	BASEPRI, r3
 8001b08:	f3bf 8f6f 	isb	sy
 8001b0c:	f3bf 8f4f 	dsb	sy
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	e7fe      	b.n	8001b12 <vTaskSuspend+0xba>
				portYIELD_WITHIN_API();
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <vTaskSuspend+0x108>)
 8001b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	f3bf 8f4f 	dsb	sy
 8001b20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001b24:	e00b      	b.n	8001b3e <vTaskSuspend+0xe6>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <vTaskSuspend+0xfc>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <vTaskSuspend+0x10c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d103      	bne.n	8001b3a <vTaskSuspend+0xe2>
					pxCurrentTCB = NULL;
 8001b32:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <vTaskSuspend+0xf0>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
	}
 8001b38:	e001      	b.n	8001b3e <vTaskSuspend+0xe6>
					vTaskSwitchContext();
 8001b3a:	f000 fa6d 	bl	8002018 <vTaskSwitchContext>
	}
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200064b8 	.word	0x200064b8
 8001b4c:	200064bc 	.word	0x200064bc
 8001b50:	20006598 	.word	0x20006598
 8001b54:	2000657c 	.word	0x2000657c
 8001b58:	2000659c 	.word	0x2000659c
 8001b5c:	200065b8 	.word	0x200065b8
 8001b60:	e000ed04 	.word	0xe000ed04
 8001b64:	20006590 	.word	0x20006590

08001b68 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8001b68:	b480      	push	{r7}
 8001b6a:	b087      	sub	sp, #28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d109      	bne.n	8001b92 <prvTaskIsTaskSuspended+0x2a>
 8001b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b82:	f383 8811 	msr	BASEPRI, r3
 8001b86:	f3bf 8f6f 	isb	sy
 8001b8a:	f3bf 8f4f 	dsb	sy
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	e7fe      	b.n	8001b90 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	4a0f      	ldr	r2, [pc, #60]	; (8001bd4 <prvTaskIsTaskSuspended+0x6c>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d101      	bne.n	8001ba0 <prvTaskIsTaskSuspended+0x38>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <prvTaskIsTaskSuspended+0x3a>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00f      	beq.n	8001bc6 <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	4a0b      	ldr	r2, [pc, #44]	; (8001bd8 <prvTaskIsTaskSuspended+0x70>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d00a      	beq.n	8001bc6 <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <prvTaskIsTaskSuspended+0x54>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <prvTaskIsTaskSuspended+0x56>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001bc6:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8001bc8:	4618      	mov	r0, r3
 8001bca:	371c      	adds	r7, #28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	2000657c 	.word	0x2000657c
 8001bd8:	20006550 	.word	0x20006550

08001bdc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d109      	bne.n	8001c02 <vTaskResume+0x26>
 8001bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf2:	f383 8811 	msr	BASEPRI, r3
 8001bf6:	f3bf 8f6f 	isb	sy
 8001bfa:	f3bf 8f4f 	dsb	sy
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	e7fe      	b.n	8001c00 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d039      	beq.n	8001c7c <vTaskResume+0xa0>
 8001c08:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <vTaskResume+0xa8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d034      	beq.n	8001c7c <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 8001c12:	f7fe fc95 	bl	8000540 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f7ff ffa6 	bl	8001b68 <prvTaskIsTaskSuspended>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d02a      	beq.n	8001c78 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	3304      	adds	r3, #4
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fb5c 	bl	80002e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	2201      	movs	r2, #1
 8001c32:	409a      	lsls	r2, r3
 8001c34:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <vTaskResume+0xac>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	4a13      	ldr	r2, [pc, #76]	; (8001c88 <vTaskResume+0xac>)
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c42:	4613      	mov	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4a10      	ldr	r2, [pc, #64]	; (8001c8c <vTaskResume+0xb0>)
 8001c4c:	441a      	add	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	3304      	adds	r3, #4
 8001c52:	4619      	mov	r1, r3
 8001c54:	4610      	mov	r0, r2
 8001c56:	f7fe fae8 	bl	800022a <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <vTaskResume+0xa8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d307      	bcc.n	8001c78 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8001c68:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <vTaskResume+0xb4>)
 8001c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	f3bf 8f4f 	dsb	sy
 8001c74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8001c78:	f7fe fc90 	bl	800059c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	200064b8 	.word	0x200064b8
 8001c88:	20006598 	.word	0x20006598
 8001c8c:	200064bc 	.word	0x200064bc
 8001c90:	e000ed04 	.word	0xe000ed04

08001c94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001c9a:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <vTaskStartScheduler+0x80>)
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	2282      	movs	r2, #130	; 0x82
 8001ca6:	491c      	ldr	r1, [pc, #112]	; (8001d18 <vTaskStartScheduler+0x84>)
 8001ca8:	481c      	ldr	r0, [pc, #112]	; (8001d1c <vTaskStartScheduler+0x88>)
 8001caa:	f7ff fc2d 	bl	8001508 <xTaskCreate>
 8001cae:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d102      	bne.n	8001cbc <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8001cb6:	f000 fdcb 	bl	8002850 <xTimerCreateTimerTask>
 8001cba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d115      	bne.n	8001cee <vTaskStartScheduler+0x5a>
 8001cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc6:	f383 8811 	msr	BASEPRI, r3
 8001cca:	f3bf 8f6f 	isb	sy
 8001cce:	f3bf 8f4f 	dsb	sy
 8001cd2:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <vTaskStartScheduler+0x8c>)
 8001cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8001cda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <vTaskStartScheduler+0x90>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <vTaskStartScheduler+0x94>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001ce8:	f7fe fb9e 	bl	8000428 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001cec:	e00d      	b.n	8001d0a <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf4:	d109      	bne.n	8001d0a <vTaskStartScheduler+0x76>
 8001cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cfa:	f383 8811 	msr	BASEPRI, r3
 8001cfe:	f3bf 8f6f 	isb	sy
 8001d02:	f3bf 8f4f 	dsb	sy
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	e7fe      	b.n	8001d08 <vTaskStartScheduler+0x74>
}
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	200065b4 	.word	0x200065b4
 8001d18:	0800510c 	.word	0x0800510c
 8001d1c:	08002395 	.word	0x08002395
 8001d20:	200065b0 	.word	0x200065b0
 8001d24:	2000659c 	.word	0x2000659c
 8001d28:	20006594 	.word	0x20006594

08001d2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001d30:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <vTaskSuspendAll+0x18>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	3301      	adds	r3, #1
 8001d36:	4a03      	ldr	r2, [pc, #12]	; (8001d44 <vTaskSuspendAll+0x18>)
 8001d38:	6013      	str	r3, [r2, #0]
}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	200065b8 	.word	0x200065b8

08001d48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001d56:	4b41      	ldr	r3, [pc, #260]	; (8001e5c <xTaskResumeAll+0x114>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d109      	bne.n	8001d72 <xTaskResumeAll+0x2a>
 8001d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d62:	f383 8811 	msr	BASEPRI, r3
 8001d66:	f3bf 8f6f 	isb	sy
 8001d6a:	f3bf 8f4f 	dsb	sy
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	e7fe      	b.n	8001d70 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001d72:	f7fe fbe5 	bl	8000540 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001d76:	4b39      	ldr	r3, [pc, #228]	; (8001e5c <xTaskResumeAll+0x114>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	4a37      	ldr	r2, [pc, #220]	; (8001e5c <xTaskResumeAll+0x114>)
 8001d7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d80:	4b36      	ldr	r3, [pc, #216]	; (8001e5c <xTaskResumeAll+0x114>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d161      	bne.n	8001e4c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001d88:	4b35      	ldr	r3, [pc, #212]	; (8001e60 <xTaskResumeAll+0x118>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d05d      	beq.n	8001e4c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d90:	e02e      	b.n	8001df0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001d92:	4b34      	ldr	r3, [pc, #208]	; (8001e64 <xTaskResumeAll+0x11c>)
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	3318      	adds	r3, #24
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe faa0 	bl	80002e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3304      	adds	r3, #4
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe fa9b 	bl	80002e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db2:	2201      	movs	r2, #1
 8001db4:	409a      	lsls	r2, r3
 8001db6:	4b2c      	ldr	r3, [pc, #176]	; (8001e68 <xTaskResumeAll+0x120>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	4a2a      	ldr	r2, [pc, #168]	; (8001e68 <xTaskResumeAll+0x120>)
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4a27      	ldr	r2, [pc, #156]	; (8001e6c <xTaskResumeAll+0x124>)
 8001dce:	441a      	add	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	f7fe fa27 	bl	800022a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de0:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <xTaskResumeAll+0x128>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d302      	bcc.n	8001df0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8001dea:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <xTaskResumeAll+0x12c>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001df0:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <xTaskResumeAll+0x11c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1cc      	bne.n	8001d92 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001dfe:	f000 fb6f 	bl	80024e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001e02:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <xTaskResumeAll+0x130>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d010      	beq.n	8001e30 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001e0e:	f000 f847 	bl	8001ea0 <xTaskIncrementTick>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d002      	beq.n	8001e1e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001e18:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <xTaskResumeAll+0x12c>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3b01      	subs	r3, #1
 8001e22:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f1      	bne.n	8001e0e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8001e2a:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <xTaskResumeAll+0x130>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001e30:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <xTaskResumeAll+0x12c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d009      	beq.n	8001e4c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <xTaskResumeAll+0x134>)
 8001e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	f3bf 8f4f 	dsb	sy
 8001e48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001e4c:	f7fe fba6 	bl	800059c <vPortExitCritical>

	return xAlreadyYielded;
 8001e50:	68bb      	ldr	r3, [r7, #8]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200065b8 	.word	0x200065b8
 8001e60:	20006590 	.word	0x20006590
 8001e64:	20006550 	.word	0x20006550
 8001e68:	20006598 	.word	0x20006598
 8001e6c:	200064bc 	.word	0x200064bc
 8001e70:	200064b8 	.word	0x200064b8
 8001e74:	200065a4 	.word	0x200065a4
 8001e78:	200065a0 	.word	0x200065a0
 8001e7c:	e000ed04 	.word	0xe000ed04

08001e80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <xTaskGetTickCount+0x1c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001e8c:	687b      	ldr	r3, [r7, #4]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20006594 	.word	0x20006594

08001ea0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001eaa:	4b50      	ldr	r3, [pc, #320]	; (8001fec <xTaskIncrementTick+0x14c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f040 808c 	bne.w	8001fcc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8001eb4:	4b4e      	ldr	r3, [pc, #312]	; (8001ff0 <xTaskIncrementTick+0x150>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001ebc:	4a4c      	ldr	r2, [pc, #304]	; (8001ff0 <xTaskIncrementTick+0x150>)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d11f      	bne.n	8001f08 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001ec8:	4b4a      	ldr	r3, [pc, #296]	; (8001ff4 <xTaskIncrementTick+0x154>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d009      	beq.n	8001ee6 <xTaskIncrementTick+0x46>
 8001ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed6:	f383 8811 	msr	BASEPRI, r3
 8001eda:	f3bf 8f6f 	isb	sy
 8001ede:	f3bf 8f4f 	dsb	sy
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	e7fe      	b.n	8001ee4 <xTaskIncrementTick+0x44>
 8001ee6:	4b43      	ldr	r3, [pc, #268]	; (8001ff4 <xTaskIncrementTick+0x154>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	4b42      	ldr	r3, [pc, #264]	; (8001ff8 <xTaskIncrementTick+0x158>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a40      	ldr	r2, [pc, #256]	; (8001ff4 <xTaskIncrementTick+0x154>)
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	4a40      	ldr	r2, [pc, #256]	; (8001ff8 <xTaskIncrementTick+0x158>)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	4b40      	ldr	r3, [pc, #256]	; (8001ffc <xTaskIncrementTick+0x15c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	3301      	adds	r3, #1
 8001f00:	4a3e      	ldr	r2, [pc, #248]	; (8001ffc <xTaskIncrementTick+0x15c>)
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	f000 faec 	bl	80024e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001f08:	4b3d      	ldr	r3, [pc, #244]	; (8002000 <xTaskIncrementTick+0x160>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d34d      	bcc.n	8001fae <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f12:	4b38      	ldr	r3, [pc, #224]	; (8001ff4 <xTaskIncrementTick+0x154>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <xTaskIncrementTick+0x80>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <xTaskIncrementTick+0x82>
 8001f20:	2300      	movs	r3, #0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d004      	beq.n	8001f30 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f26:	4b36      	ldr	r3, [pc, #216]	; (8002000 <xTaskIncrementTick+0x160>)
 8001f28:	f04f 32ff 	mov.w	r2, #4294967295
 8001f2c:	601a      	str	r2, [r3, #0]
					break;
 8001f2e:	e03e      	b.n	8001fae <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001f30:	4b30      	ldr	r3, [pc, #192]	; (8001ff4 <xTaskIncrementTick+0x154>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d203      	bcs.n	8001f50 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001f48:	4a2d      	ldr	r2, [pc, #180]	; (8002000 <xTaskIncrementTick+0x160>)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6013      	str	r3, [r2, #0]
						break;
 8001f4e:	e02e      	b.n	8001fae <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	3304      	adds	r3, #4
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe f9c5 	bl	80002e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d004      	beq.n	8001f6c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	3318      	adds	r3, #24
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe f9bc 	bl	80002e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f70:	2201      	movs	r2, #1
 8001f72:	409a      	lsls	r2, r3
 8001f74:	4b23      	ldr	r3, [pc, #140]	; (8002004 <xTaskIncrementTick+0x164>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	4a22      	ldr	r2, [pc, #136]	; (8002004 <xTaskIncrementTick+0x164>)
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4a1f      	ldr	r2, [pc, #124]	; (8002008 <xTaskIncrementTick+0x168>)
 8001f8c:	441a      	add	r2, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	3304      	adds	r3, #4
 8001f92:	4619      	mov	r1, r3
 8001f94:	4610      	mov	r0, r2
 8001f96:	f7fe f948 	bl	800022a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f9e:	4b1b      	ldr	r3, [pc, #108]	; (800200c <xTaskIncrementTick+0x16c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d3b4      	bcc.n	8001f12 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fac:	e7b1      	b.n	8001f12 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001fae:	4b17      	ldr	r3, [pc, #92]	; (800200c <xTaskIncrementTick+0x16c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb4:	4914      	ldr	r1, [pc, #80]	; (8002008 <xTaskIncrementTick+0x168>)
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d907      	bls.n	8001fd6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	e004      	b.n	8001fd6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001fcc:	4b10      	ldr	r3, [pc, #64]	; (8002010 <xTaskIncrementTick+0x170>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	4a0f      	ldr	r2, [pc, #60]	; (8002010 <xTaskIncrementTick+0x170>)
 8001fd4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <xTaskIncrementTick+0x174>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001fe2:	697b      	ldr	r3, [r7, #20]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	200065b8 	.word	0x200065b8
 8001ff0:	20006594 	.word	0x20006594
 8001ff4:	20006548 	.word	0x20006548
 8001ff8:	2000654c 	.word	0x2000654c
 8001ffc:	200065a8 	.word	0x200065a8
 8002000:	200065b0 	.word	0x200065b0
 8002004:	20006598 	.word	0x20006598
 8002008:	200064bc 	.word	0x200064bc
 800200c:	200064b8 	.word	0x200064b8
 8002010:	200065a0 	.word	0x200065a0
 8002014:	200065a4 	.word	0x200065a4

08002018 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800201e:	4b39      	ldr	r3, [pc, #228]	; (8002104 <vTaskSwitchContext+0xec>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002026:	4b38      	ldr	r3, [pc, #224]	; (8002108 <vTaskSwitchContext+0xf0>)
 8002028:	2201      	movs	r2, #1
 800202a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800202c:	e065      	b.n	80020fa <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800202e:	4b36      	ldr	r3, [pc, #216]	; (8002108 <vTaskSwitchContext+0xf0>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8002034:	4b35      	ldr	r3, [pc, #212]	; (800210c <vTaskSwitchContext+0xf4>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	61fb      	str	r3, [r7, #28]
 800203c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8002040:	61bb      	str	r3, [r7, #24]
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	429a      	cmp	r2, r3
 800204a:	d111      	bne.n	8002070 <vTaskSwitchContext+0x58>
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	3304      	adds	r3, #4
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	429a      	cmp	r2, r3
 8002056:	d10b      	bne.n	8002070 <vTaskSwitchContext+0x58>
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	3308      	adds	r3, #8
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	429a      	cmp	r2, r3
 8002062:	d105      	bne.n	8002070 <vTaskSwitchContext+0x58>
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	330c      	adds	r3, #12
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	429a      	cmp	r2, r3
 800206e:	d008      	beq.n	8002082 <vTaskSwitchContext+0x6a>
 8002070:	4b26      	ldr	r3, [pc, #152]	; (800210c <vTaskSwitchContext+0xf4>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b25      	ldr	r3, [pc, #148]	; (800210c <vTaskSwitchContext+0xf4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	3334      	adds	r3, #52	; 0x34
 800207a:	4619      	mov	r1, r3
 800207c:	4610      	mov	r0, r2
 800207e:	f002 f805 	bl	800408c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002082:	4b23      	ldr	r3, [pc, #140]	; (8002110 <vTaskSwitchContext+0xf8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	fab3 f383 	clz	r3, r3
 800208e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002090:	7afb      	ldrb	r3, [r7, #11]
 8002092:	f1c3 031f 	rsb	r3, r3, #31
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	491e      	ldr	r1, [pc, #120]	; (8002114 <vTaskSwitchContext+0xfc>)
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d109      	bne.n	80020c0 <vTaskSwitchContext+0xa8>
	__asm volatile
 80020ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b0:	f383 8811 	msr	BASEPRI, r3
 80020b4:	f3bf 8f6f 	isb	sy
 80020b8:	f3bf 8f4f 	dsb	sy
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	e7fe      	b.n	80020be <vTaskSwitchContext+0xa6>
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4a12      	ldr	r2, [pc, #72]	; (8002114 <vTaskSwitchContext+0xfc>)
 80020cc:	4413      	add	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	3308      	adds	r3, #8
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d104      	bne.n	80020f0 <vTaskSwitchContext+0xd8>
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	4a05      	ldr	r2, [pc, #20]	; (800210c <vTaskSwitchContext+0xf4>)
 80020f8:	6013      	str	r3, [r2, #0]
}
 80020fa:	bf00      	nop
 80020fc:	3720      	adds	r7, #32
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200065b8 	.word	0x200065b8
 8002108:	200065a4 	.word	0x200065a4
 800210c:	200064b8 	.word	0x200064b8
 8002110:	20006598 	.word	0x20006598
 8002114:	200064bc 	.word	0x200064bc

08002118 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d109      	bne.n	800213c <vTaskPlaceOnEventList+0x24>
 8002128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800212c:	f383 8811 	msr	BASEPRI, r3
 8002130:	f3bf 8f6f 	isb	sy
 8002134:	f3bf 8f4f 	dsb	sy
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	e7fe      	b.n	800213a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800213c:	4b07      	ldr	r3, [pc, #28]	; (800215c <vTaskPlaceOnEventList+0x44>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	3318      	adds	r3, #24
 8002142:	4619      	mov	r1, r3
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7fe f894 	bl	8000272 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800214a:	2101      	movs	r1, #1
 800214c:	6838      	ldr	r0, [r7, #0]
 800214e:	f000 fb19 	bl	8002784 <prvAddCurrentTaskToDelayedList>
}
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200064b8 	.word	0x200064b8

08002160 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d109      	bne.n	8002186 <vTaskPlaceOnEventListRestricted+0x26>
 8002172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002176:	f383 8811 	msr	BASEPRI, r3
 800217a:	f3bf 8f6f 	isb	sy
 800217e:	f3bf 8f4f 	dsb	sy
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	e7fe      	b.n	8002184 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002186:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <vTaskPlaceOnEventListRestricted+0x50>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	3318      	adds	r3, #24
 800218c:	4619      	mov	r1, r3
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f7fe f84b 	bl	800022a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d002      	beq.n	80021a0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800219a:	f04f 33ff 	mov.w	r3, #4294967295
 800219e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	68b8      	ldr	r0, [r7, #8]
 80021a4:	f000 faee 	bl	8002784 <prvAddCurrentTaskToDelayedList>
	}
 80021a8:	bf00      	nop
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	200064b8 	.word	0x200064b8

080021b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <xTaskRemoveFromEventList+0x2a>
 80021ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ce:	f383 8811 	msr	BASEPRI, r3
 80021d2:	f3bf 8f6f 	isb	sy
 80021d6:	f3bf 8f4f 	dsb	sy
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	e7fe      	b.n	80021dc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	3318      	adds	r3, #24
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f87e 	bl	80002e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021e8:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <xTaskRemoveFromEventList+0xac>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d11c      	bne.n	800222a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	3304      	adds	r3, #4
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe f875 	bl	80002e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	2201      	movs	r2, #1
 8002200:	409a      	lsls	r2, r3
 8002202:	4b18      	ldr	r3, [pc, #96]	; (8002264 <xTaskRemoveFromEventList+0xb0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4313      	orrs	r3, r2
 8002208:	4a16      	ldr	r2, [pc, #88]	; (8002264 <xTaskRemoveFromEventList+0xb0>)
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4a13      	ldr	r2, [pc, #76]	; (8002268 <xTaskRemoveFromEventList+0xb4>)
 800221a:	441a      	add	r2, r3
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	3304      	adds	r3, #4
 8002220:	4619      	mov	r1, r3
 8002222:	4610      	mov	r0, r2
 8002224:	f7fe f801 	bl	800022a <vListInsertEnd>
 8002228:	e005      	b.n	8002236 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	3318      	adds	r3, #24
 800222e:	4619      	mov	r1, r3
 8002230:	480e      	ldr	r0, [pc, #56]	; (800226c <xTaskRemoveFromEventList+0xb8>)
 8002232:	f7fd fffa 	bl	800022a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800223a:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <xTaskRemoveFromEventList+0xbc>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002240:	429a      	cmp	r2, r3
 8002242:	d905      	bls.n	8002250 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002244:	2301      	movs	r3, #1
 8002246:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002248:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <xTaskRemoveFromEventList+0xc0>)
 800224a:	2201      	movs	r2, #1
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	e001      	b.n	8002254 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002254:	697b      	ldr	r3, [r7, #20]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	200065b8 	.word	0x200065b8
 8002264:	20006598 	.word	0x20006598
 8002268:	200064bc 	.word	0x200064bc
 800226c:	20006550 	.word	0x20006550
 8002270:	200064b8 	.word	0x200064b8
 8002274:	200065a4 	.word	0x200065a4

08002278 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d109      	bne.n	800229a <vTaskSetTimeOutState+0x22>
 8002286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800228a:	f383 8811 	msr	BASEPRI, r3
 800228e:	f3bf 8f6f 	isb	sy
 8002292:	f3bf 8f4f 	dsb	sy
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	e7fe      	b.n	8002298 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800229a:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <vTaskSetTimeOutState+0x40>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <vTaskSetTimeOutState+0x44>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	605a      	str	r2, [r3, #4]
}
 80022aa:	bf00      	nop
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	200065a8 	.word	0x200065a8
 80022bc:	20006594 	.word	0x20006594

080022c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d109      	bne.n	80022e4 <xTaskCheckForTimeOut+0x24>
 80022d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d4:	f383 8811 	msr	BASEPRI, r3
 80022d8:	f3bf 8f6f 	isb	sy
 80022dc:	f3bf 8f4f 	dsb	sy
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	e7fe      	b.n	80022e2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d109      	bne.n	80022fe <xTaskCheckForTimeOut+0x3e>
 80022ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ee:	f383 8811 	msr	BASEPRI, r3
 80022f2:	f3bf 8f6f 	isb	sy
 80022f6:	f3bf 8f4f 	dsb	sy
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	e7fe      	b.n	80022fc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80022fe:	f7fe f91f 	bl	8000540 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002302:	4b1c      	ldr	r3, [pc, #112]	; (8002374 <xTaskCheckForTimeOut+0xb4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002310:	d102      	bne.n	8002318 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	e026      	b.n	8002366 <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b16      	ldr	r3, [pc, #88]	; (8002378 <xTaskCheckForTimeOut+0xb8>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d007      	beq.n	8002334 <xTaskCheckForTimeOut+0x74>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	429a      	cmp	r2, r3
 800232c:	d802      	bhi.n	8002334 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800232e:	2301      	movs	r3, #1
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	e018      	b.n	8002366 <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	1ad2      	subs	r2, r2, r3
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d20e      	bcs.n	8002362 <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6859      	ldr	r1, [r3, #4]
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1acb      	subs	r3, r1, r3
 8002350:	441a      	add	r2, r3
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff ff8e 	bl	8002278 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]
 8002360:	e001      	b.n	8002366 <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8002362:	2301      	movs	r3, #1
 8002364:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8002366:	f7fe f919 	bl	800059c <vPortExitCritical>

	return xReturn;
 800236a:	697b      	ldr	r3, [r7, #20]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20006594 	.word	0x20006594
 8002378:	200065a8 	.word	0x200065a8

0800237c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002380:	4b03      	ldr	r3, [pc, #12]	; (8002390 <vTaskMissedYield+0x14>)
 8002382:	2201      	movs	r2, #1
 8002384:	601a      	str	r2, [r3, #0]
}
 8002386:	bf00      	nop
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	200065a4 	.word	0x200065a4

08002394 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800239c:	f000 f854 	bl	8002448 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80023a0:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <prvIdleTask+0x2c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d907      	bls.n	80023b8 <prvIdleTask+0x24>
			{
				taskYIELD();
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <prvIdleTask+0x30>)
 80023aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	f3bf 8f4f 	dsb	sy
 80023b4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80023b8:	f001 fe74 	bl	80040a4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80023bc:	e7ee      	b.n	800239c <prvIdleTask+0x8>
 80023be:	bf00      	nop
 80023c0:	200064bc 	.word	0x200064bc
 80023c4:	e000ed04 	.word	0xe000ed04

080023c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80023ce:	2300      	movs	r3, #0
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	e00c      	b.n	80023ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4a12      	ldr	r2, [pc, #72]	; (8002428 <prvInitialiseTaskLists+0x60>)
 80023e0:	4413      	add	r3, r2
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fd fef4 	bl	80001d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3301      	adds	r3, #1
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d9ef      	bls.n	80023d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80023f4:	480d      	ldr	r0, [pc, #52]	; (800242c <prvInitialiseTaskLists+0x64>)
 80023f6:	f7fd feeb 	bl	80001d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80023fa:	480d      	ldr	r0, [pc, #52]	; (8002430 <prvInitialiseTaskLists+0x68>)
 80023fc:	f7fd fee8 	bl	80001d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002400:	480c      	ldr	r0, [pc, #48]	; (8002434 <prvInitialiseTaskLists+0x6c>)
 8002402:	f7fd fee5 	bl	80001d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002406:	480c      	ldr	r0, [pc, #48]	; (8002438 <prvInitialiseTaskLists+0x70>)
 8002408:	f7fd fee2 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800240c:	480b      	ldr	r0, [pc, #44]	; (800243c <prvInitialiseTaskLists+0x74>)
 800240e:	f7fd fedf 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <prvInitialiseTaskLists+0x78>)
 8002414:	4a05      	ldr	r2, [pc, #20]	; (800242c <prvInitialiseTaskLists+0x64>)
 8002416:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002418:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <prvInitialiseTaskLists+0x7c>)
 800241a:	4a05      	ldr	r2, [pc, #20]	; (8002430 <prvInitialiseTaskLists+0x68>)
 800241c:	601a      	str	r2, [r3, #0]
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200064bc 	.word	0x200064bc
 800242c:	20006520 	.word	0x20006520
 8002430:	20006534 	.word	0x20006534
 8002434:	20006550 	.word	0x20006550
 8002438:	20006564 	.word	0x20006564
 800243c:	2000657c 	.word	0x2000657c
 8002440:	20006548 	.word	0x20006548
 8002444:	2000654c 	.word	0x2000654c

08002448 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800244e:	e028      	b.n	80024a2 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8002450:	f7ff fc6c 	bl	8001d2c <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002454:	4b17      	ldr	r3, [pc, #92]	; (80024b4 <prvCheckTasksWaitingTermination+0x6c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	bf0c      	ite	eq
 800245c:	2301      	moveq	r3, #1
 800245e:	2300      	movne	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8002464:	f7ff fc70 	bl	8001d48 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d119      	bne.n	80024a2 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800246e:	f7fe f867 	bl	8000540 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002472:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <prvCheckTasksWaitingTermination+0x6c>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	3304      	adds	r3, #4
 800247e:	4618      	mov	r0, r3
 8002480:	f7fd ff30 	bl	80002e4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002484:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <prvCheckTasksWaitingTermination+0x70>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	3b01      	subs	r3, #1
 800248a:	4a0b      	ldr	r2, [pc, #44]	; (80024b8 <prvCheckTasksWaitingTermination+0x70>)
 800248c:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800248e:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <prvCheckTasksWaitingTermination+0x74>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	3b01      	subs	r3, #1
 8002494:	4a09      	ldr	r2, [pc, #36]	; (80024bc <prvCheckTasksWaitingTermination+0x74>)
 8002496:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8002498:	f7fe f880 	bl	800059c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800249c:	6838      	ldr	r0, [r7, #0]
 800249e:	f000 f80f 	bl	80024c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <prvCheckTasksWaitingTermination+0x74>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1d2      	bne.n	8002450 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20006564 	.word	0x20006564
 80024b8:	20006590 	.word	0x20006590
 80024bc:	20006578 	.word	0x20006578

080024c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe fa0d 	bl	80008ec <vPortFree>
			vPortFree( pxTCB );
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe fa0a 	bl	80008ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024e6:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <prvResetNextTaskUnblockTime+0x44>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <prvResetNextTaskUnblockTime+0x14>
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <prvResetNextTaskUnblockTime+0x16>
 80024f4:	2300      	movs	r3, #0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d004      	beq.n	8002504 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80024fa:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <prvResetNextTaskUnblockTime+0x48>)
 80024fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002500:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002502:	e008      	b.n	8002516 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002504:	4b07      	ldr	r3, [pc, #28]	; (8002524 <prvResetNextTaskUnblockTime+0x44>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	4a05      	ldr	r2, [pc, #20]	; (8002528 <prvResetNextTaskUnblockTime+0x48>)
 8002514:	6013      	str	r3, [r2, #0]
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	20006548 	.word	0x20006548
 8002528:	200065b0 	.word	0x200065b0

0800252c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002532:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <xTaskGetSchedulerState+0x34>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d102      	bne.n	8002540 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800253a:	2301      	movs	r3, #1
 800253c:	607b      	str	r3, [r7, #4]
 800253e:	e008      	b.n	8002552 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002540:	4b08      	ldr	r3, [pc, #32]	; (8002564 <xTaskGetSchedulerState+0x38>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d102      	bne.n	800254e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002548:	2302      	movs	r3, #2
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	e001      	b.n	8002552 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002552:	687b      	ldr	r3, [r7, #4]
	}
 8002554:	4618      	mov	r0, r3
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	2000659c 	.word	0x2000659c
 8002564:	200065b8 	.word	0x200065b8

08002568 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d062      	beq.n	8002640 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800257e:	4b32      	ldr	r3, [pc, #200]	; (8002648 <vTaskPriorityInherit+0xe0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	429a      	cmp	r2, r3
 8002586:	d25b      	bcs.n	8002640 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	2b00      	cmp	r3, #0
 800258e:	db06      	blt.n	800259e <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002590:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <vTaskPriorityInherit+0xe0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	f1c3 0205 	rsb	r2, r3, #5
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6959      	ldr	r1, [r3, #20]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4a27      	ldr	r2, [pc, #156]	; (800264c <vTaskPriorityInherit+0xe4>)
 80025b0:	4413      	add	r3, r2
 80025b2:	4299      	cmp	r1, r3
 80025b4:	d101      	bne.n	80025ba <vTaskPriorityInherit+0x52>
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <vTaskPriorityInherit+0x54>
 80025ba:	2300      	movs	r3, #0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d03a      	beq.n	8002636 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	3304      	adds	r3, #4
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fd fe8d 	bl	80002e4 <uxListRemove>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d115      	bne.n	80025fc <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d4:	491d      	ldr	r1, [pc, #116]	; (800264c <vTaskPriorityInherit+0xe4>)
 80025d6:	4613      	mov	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10a      	bne.n	80025fc <vTaskPriorityInherit+0x94>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	2201      	movs	r2, #1
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43da      	mvns	r2, r3
 80025f2:	4b17      	ldr	r3, [pc, #92]	; (8002650 <vTaskPriorityInherit+0xe8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4013      	ands	r3, r2
 80025f8:	4a15      	ldr	r2, [pc, #84]	; (8002650 <vTaskPriorityInherit+0xe8>)
 80025fa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80025fc:	4b12      	ldr	r3, [pc, #72]	; (8002648 <vTaskPriorityInherit+0xe0>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260a:	2201      	movs	r2, #1
 800260c:	409a      	lsls	r2, r3
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <vTaskPriorityInherit+0xe8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4313      	orrs	r3, r2
 8002614:	4a0e      	ldr	r2, [pc, #56]	; (8002650 <vTaskPriorityInherit+0xe8>)
 8002616:	6013      	str	r3, [r2, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4a09      	ldr	r2, [pc, #36]	; (800264c <vTaskPriorityInherit+0xe4>)
 8002626:	441a      	add	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	3304      	adds	r3, #4
 800262c:	4619      	mov	r1, r3
 800262e:	4610      	mov	r0, r2
 8002630:	f7fd fdfb 	bl	800022a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002634:	e004      	b.n	8002640 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002636:	4b04      	ldr	r3, [pc, #16]	; (8002648 <vTaskPriorityInherit+0xe0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8002640:	bf00      	nop
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	200064b8 	.word	0x200064b8
 800264c:	200064bc 	.word	0x200064bc
 8002650:	20006598 	.word	0x20006598

08002654 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d06c      	beq.n	8002744 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800266a:	4b39      	ldr	r3, [pc, #228]	; (8002750 <xTaskPriorityDisinherit+0xfc>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	429a      	cmp	r2, r3
 8002672:	d009      	beq.n	8002688 <xTaskPriorityDisinherit+0x34>
 8002674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002678:	f383 8811 	msr	BASEPRI, r3
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	e7fe      	b.n	8002686 <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268c:	2b00      	cmp	r3, #0
 800268e:	d109      	bne.n	80026a4 <xTaskPriorityDisinherit+0x50>
 8002690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002694:	f383 8811 	msr	BASEPRI, r3
 8002698:	f3bf 8f6f 	isb	sy
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	e7fe      	b.n	80026a2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a8:	1e5a      	subs	r2, r3, #1
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d044      	beq.n	8002744 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d140      	bne.n	8002744 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	3304      	adds	r3, #4
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fd fe0c 	bl	80002e4 <uxListRemove>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d115      	bne.n	80026fe <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d6:	491f      	ldr	r1, [pc, #124]	; (8002754 <xTaskPriorityDisinherit+0x100>)
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10a      	bne.n	80026fe <xTaskPriorityDisinherit+0xaa>
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	2201      	movs	r2, #1
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43da      	mvns	r2, r3
 80026f4:	4b18      	ldr	r3, [pc, #96]	; (8002758 <xTaskPriorityDisinherit+0x104>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4013      	ands	r3, r2
 80026fa:	4a17      	ldr	r2, [pc, #92]	; (8002758 <xTaskPriorityDisinherit+0x104>)
 80026fc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270a:	f1c3 0205 	rsb	r2, r3, #5
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002716:	2201      	movs	r2, #1
 8002718:	409a      	lsls	r2, r3
 800271a:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <xTaskPriorityDisinherit+0x104>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4313      	orrs	r3, r2
 8002720:	4a0d      	ldr	r2, [pc, #52]	; (8002758 <xTaskPriorityDisinherit+0x104>)
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4a08      	ldr	r2, [pc, #32]	; (8002754 <xTaskPriorityDisinherit+0x100>)
 8002732:	441a      	add	r2, r3
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	3304      	adds	r3, #4
 8002738:	4619      	mov	r1, r3
 800273a:	4610      	mov	r0, r2
 800273c:	f7fd fd75 	bl	800022a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002740:	2301      	movs	r3, #1
 8002742:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002744:	697b      	ldr	r3, [r7, #20]
	}
 8002746:	4618      	mov	r0, r3
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	200064b8 	.word	0x200064b8
 8002754:	200064bc 	.word	0x200064bc
 8002758:	20006598 	.word	0x20006598

0800275c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002760:	4b07      	ldr	r3, [pc, #28]	; (8002780 <pvTaskIncrementMutexHeldCount+0x24>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d004      	beq.n	8002772 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <pvTaskIncrementMutexHeldCount+0x24>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800276e:	3201      	adds	r2, #1
 8002770:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 8002772:	4b03      	ldr	r3, [pc, #12]	; (8002780 <pvTaskIncrementMutexHeldCount+0x24>)
 8002774:	681b      	ldr	r3, [r3, #0]
	}
 8002776:	4618      	mov	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	200064b8 	.word	0x200064b8

08002784 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800278e:	4b29      	ldr	r3, [pc, #164]	; (8002834 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002794:	4b28      	ldr	r3, [pc, #160]	; (8002838 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	3304      	adds	r3, #4
 800279a:	4618      	mov	r0, r3
 800279c:	f7fd fda2 	bl	80002e4 <uxListRemove>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10b      	bne.n	80027be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80027a6:	4b24      	ldr	r3, [pc, #144]	; (8002838 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ac:	2201      	movs	r2, #1
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43da      	mvns	r2, r3
 80027b4:	4b21      	ldr	r3, [pc, #132]	; (800283c <prvAddCurrentTaskToDelayedList+0xb8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4013      	ands	r3, r2
 80027ba:	4a20      	ldr	r2, [pc, #128]	; (800283c <prvAddCurrentTaskToDelayedList+0xb8>)
 80027bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c4:	d10a      	bne.n	80027dc <prvAddCurrentTaskToDelayedList+0x58>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d007      	beq.n	80027dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027cc:	4b1a      	ldr	r3, [pc, #104]	; (8002838 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	3304      	adds	r3, #4
 80027d2:	4619      	mov	r1, r3
 80027d4:	481a      	ldr	r0, [pc, #104]	; (8002840 <prvAddCurrentTaskToDelayedList+0xbc>)
 80027d6:	f7fd fd28 	bl	800022a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80027da:	e026      	b.n	800282a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4413      	add	r3, r2
 80027e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80027e4:	4b14      	ldr	r3, [pc, #80]	; (8002838 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d209      	bcs.n	8002808 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027f4:	4b13      	ldr	r3, [pc, #76]	; (8002844 <prvAddCurrentTaskToDelayedList+0xc0>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3304      	adds	r3, #4
 80027fe:	4619      	mov	r1, r3
 8002800:	4610      	mov	r0, r2
 8002802:	f7fd fd36 	bl	8000272 <vListInsert>
}
 8002806:	e010      	b.n	800282a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002808:	4b0f      	ldr	r3, [pc, #60]	; (8002848 <prvAddCurrentTaskToDelayedList+0xc4>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <prvAddCurrentTaskToDelayedList+0xb4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	3304      	adds	r3, #4
 8002812:	4619      	mov	r1, r3
 8002814:	4610      	mov	r0, r2
 8002816:	f7fd fd2c 	bl	8000272 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800281a:	4b0c      	ldr	r3, [pc, #48]	; (800284c <prvAddCurrentTaskToDelayedList+0xc8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	429a      	cmp	r2, r3
 8002822:	d202      	bcs.n	800282a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002824:	4a09      	ldr	r2, [pc, #36]	; (800284c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	6013      	str	r3, [r2, #0]
}
 800282a:	bf00      	nop
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20006594 	.word	0x20006594
 8002838:	200064b8 	.word	0x200064b8
 800283c:	20006598 	.word	0x20006598
 8002840:	2000657c 	.word	0x2000657c
 8002844:	2000654c 	.word	0x2000654c
 8002848:	20006548 	.word	0x20006548
 800284c:	200065b0 	.word	0x200065b0

08002850 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8002856:	2300      	movs	r3, #0
 8002858:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800285a:	f000 fa8f 	bl	8002d7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800285e:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <xTimerCreateTimerTask+0x54>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00b      	beq.n	800287e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8002866:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <xTimerCreateTimerTask+0x58>)
 8002868:	9301      	str	r3, [sp, #4]
 800286a:	2304      	movs	r3, #4
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	2300      	movs	r3, #0
 8002870:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002874:	490d      	ldr	r1, [pc, #52]	; (80028ac <xTimerCreateTimerTask+0x5c>)
 8002876:	480e      	ldr	r0, [pc, #56]	; (80028b0 <xTimerCreateTimerTask+0x60>)
 8002878:	f7fe fe46 	bl	8001508 <xTaskCreate>
 800287c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d109      	bne.n	8002898 <xTimerCreateTimerTask+0x48>
 8002884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002888:	f383 8811 	msr	BASEPRI, r3
 800288c:	f3bf 8f6f 	isb	sy
 8002890:	f3bf 8f4f 	dsb	sy
 8002894:	603b      	str	r3, [r7, #0]
 8002896:	e7fe      	b.n	8002896 <xTimerCreateTimerTask+0x46>
	return xReturn;
 8002898:	687b      	ldr	r3, [r7, #4]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	200065ec 	.word	0x200065ec
 80028a8:	200065f0 	.word	0x200065f0
 80028ac:	08005114 	.word	0x08005114
 80028b0:	080029cd 	.word	0x080029cd

080028b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08a      	sub	sp, #40	; 0x28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
 80028c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d109      	bne.n	80028e0 <xTimerGenericCommand+0x2c>
 80028cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d0:	f383 8811 	msr	BASEPRI, r3
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	f3bf 8f4f 	dsb	sy
 80028dc:	623b      	str	r3, [r7, #32]
 80028de:	e7fe      	b.n	80028de <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80028e0:	4b19      	ldr	r3, [pc, #100]	; (8002948 <xTimerGenericCommand+0x94>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d02a      	beq.n	800293e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b05      	cmp	r3, #5
 80028f8:	dc18      	bgt.n	800292c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80028fa:	f7ff fe17 	bl	800252c <xTaskGetSchedulerState>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b02      	cmp	r3, #2
 8002902:	d109      	bne.n	8002918 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002904:	4b10      	ldr	r3, [pc, #64]	; (8002948 <xTimerGenericCommand+0x94>)
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	f107 0114 	add.w	r1, r7, #20
 800290c:	2300      	movs	r3, #0
 800290e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002910:	f7fe f9cc 	bl	8000cac <xQueueGenericSend>
 8002914:	6278      	str	r0, [r7, #36]	; 0x24
 8002916:	e012      	b.n	800293e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <xTimerGenericCommand+0x94>)
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	f107 0114 	add.w	r1, r7, #20
 8002920:	2300      	movs	r3, #0
 8002922:	2200      	movs	r2, #0
 8002924:	f7fe f9c2 	bl	8000cac <xQueueGenericSend>
 8002928:	6278      	str	r0, [r7, #36]	; 0x24
 800292a:	e008      	b.n	800293e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <xTimerGenericCommand+0x94>)
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	f107 0114 	add.w	r1, r7, #20
 8002934:	2300      	movs	r3, #0
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	f7fe fab2 	bl	8000ea0 <xQueueGenericSendFromISR>
 800293c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002940:	4618      	mov	r0, r3
 8002942:	3728      	adds	r7, #40	; 0x28
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	200065ec 	.word	0x200065ec

0800294c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b088      	sub	sp, #32
 8002950:	af02      	add	r7, sp, #8
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002956:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <prvProcessExpiredTimer+0x7c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	3304      	adds	r3, #4
 8002964:	4618      	mov	r0, r3
 8002966:	f7fd fcbd 	bl	80002e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d121      	bne.n	80029b6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	699a      	ldr	r2, [r3, #24]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	18d1      	adds	r1, r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	6978      	ldr	r0, [r7, #20]
 8002980:	f000 f8c8 	bl	8002b14 <prvInsertTimerInActiveList>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d015      	beq.n	80029b6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800298a:	2300      	movs	r3, #0
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	2300      	movs	r3, #0
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	2100      	movs	r1, #0
 8002994:	6978      	ldr	r0, [r7, #20]
 8002996:	f7ff ff8d 	bl	80028b4 <xTimerGenericCommand>
 800299a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <prvProcessExpiredTimer+0x6a>
 80029a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a6:	f383 8811 	msr	BASEPRI, r3
 80029aa:	f3bf 8f6f 	isb	sy
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	e7fe      	b.n	80029b4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	6978      	ldr	r0, [r7, #20]
 80029bc:	4798      	blx	r3
}
 80029be:	bf00      	nop
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200065e4 	.word	0x200065e4

080029cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80029d4:	f107 0308 	add.w	r3, r7, #8
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 f857 	bl	8002a8c <prvGetNextExpireTime>
 80029de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4619      	mov	r1, r3
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 f803 	bl	80029f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80029ea:	f000 f8d5 	bl	8002b98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80029ee:	e7f1      	b.n	80029d4 <prvTimerTask+0x8>

080029f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80029fa:	f7ff f997 	bl	8001d2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80029fe:	f107 0308 	add.w	r3, r7, #8
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 f866 	bl	8002ad4 <prvSampleTimeNow>
 8002a08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d130      	bne.n	8002a72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10a      	bne.n	8002a2c <prvProcessTimerOrBlockTask+0x3c>
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d806      	bhi.n	8002a2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002a1e:	f7ff f993 	bl	8001d48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002a22:	68f9      	ldr	r1, [r7, #12]
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff ff91 	bl	800294c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002a2a:	e024      	b.n	8002a76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d008      	beq.n	8002a44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002a32:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <prvProcessTimerOrBlockTask+0x90>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	bf0c      	ite	eq
 8002a3c:	2301      	moveq	r3, #1
 8002a3e:	2300      	movne	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002a44:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <prvProcessTimerOrBlockTask+0x94>)
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	4619      	mov	r1, r3
 8002a52:	f7fe fd25 	bl	80014a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002a56:	f7ff f977 	bl	8001d48 <xTaskResumeAll>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10a      	bne.n	8002a76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002a60:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <prvProcessTimerOrBlockTask+0x98>)
 8002a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	f3bf 8f6f 	isb	sy
}
 8002a70:	e001      	b.n	8002a76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002a72:	f7ff f969 	bl	8001d48 <xTaskResumeAll>
}
 8002a76:	bf00      	nop
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	200065e8 	.word	0x200065e8
 8002a84:	200065ec 	.word	0x200065ec
 8002a88:	e000ed04 	.word	0xe000ed04

08002a8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002a94:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <prvGetNextExpireTime+0x44>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	bf0c      	ite	eq
 8002a9e:	2301      	moveq	r3, #1
 8002aa0:	2300      	movne	r3, #0
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d105      	bne.n	8002abe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002ab2:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <prvGetNextExpireTime+0x44>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	e001      	b.n	8002ac2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	200065e4 	.word	0x200065e4

08002ad4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002adc:	f7ff f9d0 	bl	8001e80 <xTaskGetTickCount>
 8002ae0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002ae2:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <prvSampleTimeNow+0x3c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d205      	bcs.n	8002af8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002aec:	f000 f8e6 	bl	8002cbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	e002      	b.n	8002afe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002afe:	4a04      	ldr	r2, [pc, #16]	; (8002b10 <prvSampleTimeNow+0x3c>)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002b04:	68fb      	ldr	r3, [r7, #12]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	200065f4 	.word	0x200065f4

08002b14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d812      	bhi.n	8002b60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	1ad2      	subs	r2, r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d302      	bcc.n	8002b4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	e01b      	b.n	8002b86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002b4e:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <prvInsertTimerInActiveList+0x7c>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	3304      	adds	r3, #4
 8002b56:	4619      	mov	r1, r3
 8002b58:	4610      	mov	r0, r2
 8002b5a:	f7fd fb8a 	bl	8000272 <vListInsert>
 8002b5e:	e012      	b.n	8002b86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d206      	bcs.n	8002b76 <prvInsertTimerInActiveList+0x62>
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d302      	bcc.n	8002b76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002b70:	2301      	movs	r3, #1
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	e007      	b.n	8002b86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <prvInsertTimerInActiveList+0x80>)
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4610      	mov	r0, r2
 8002b82:	f7fd fb76 	bl	8000272 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002b86:	697b      	ldr	r3, [r7, #20]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	200065e8 	.word	0x200065e8
 8002b94:	200065e4 	.word	0x200065e4

08002b98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08c      	sub	sp, #48	; 0x30
 8002b9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002b9e:	e07a      	b.n	8002c96 <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	db77      	blt.n	8002c96 <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d004      	beq.n	8002bbc <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fd fb94 	bl	80002e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002bbc:	1d3b      	adds	r3, r7, #4
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff ff88 	bl	8002ad4 <prvSampleTimeNow>
 8002bc4:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2b09      	cmp	r3, #9
 8002bca:	d863      	bhi.n	8002c94 <prvProcessReceivedCommands+0xfc>
 8002bcc:	a201      	add	r2, pc, #4	; (adr r2, 8002bd4 <prvProcessReceivedCommands+0x3c>)
 8002bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd2:	bf00      	nop
 8002bd4:	08002bfd 	.word	0x08002bfd
 8002bd8:	08002bfd 	.word	0x08002bfd
 8002bdc:	08002bfd 	.word	0x08002bfd
 8002be0:	08002c97 	.word	0x08002c97
 8002be4:	08002c57 	.word	0x08002c57
 8002be8:	08002c8d 	.word	0x08002c8d
 8002bec:	08002bfd 	.word	0x08002bfd
 8002bf0:	08002bfd 	.word	0x08002bfd
 8002bf4:	08002c97 	.word	0x08002c97
 8002bf8:	08002c57 	.word	0x08002c57
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	18d1      	adds	r1, r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a3a      	ldr	r2, [r7, #32]
 8002c08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c0a:	f7ff ff83 	bl	8002b14 <prvInsertTimerInActiveList>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d040      	beq.n	8002c96 <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c1a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d138      	bne.n	8002c96 <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	441a      	add	r2, r3
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	2300      	movs	r3, #0
 8002c32:	2100      	movs	r1, #0
 8002c34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c36:	f7ff fe3d 	bl	80028b4 <xTimerGenericCommand>
 8002c3a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d129      	bne.n	8002c96 <prvProcessReceivedCommands+0xfe>
 8002c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c46:	f383 8811 	msr	BASEPRI, r3
 8002c4a:	f3bf 8f6f 	isb	sy
 8002c4e:	f3bf 8f4f 	dsb	sy
 8002c52:	61bb      	str	r3, [r7, #24]
 8002c54:	e7fe      	b.n	8002c54 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d109      	bne.n	8002c78 <prvProcessReceivedCommands+0xe0>
 8002c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c68:	f383 8811 	msr	BASEPRI, r3
 8002c6c:	f3bf 8f6f 	isb	sy
 8002c70:	f3bf 8f4f 	dsb	sy
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	e7fe      	b.n	8002c76 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	699a      	ldr	r2, [r3, #24]
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	18d1      	adds	r1, r2, r3
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	6a3a      	ldr	r2, [r7, #32]
 8002c84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c86:	f7ff ff45 	bl	8002b14 <prvInsertTimerInActiveList>
					break;
 8002c8a:	e004      	b.n	8002c96 <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8002c8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c8e:	f7fd fe2d 	bl	80008ec <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002c92:	e000      	b.n	8002c96 <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
 8002c94:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002c96:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <prvProcessReceivedCommands+0x120>)
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	f107 0108 	add.w	r1, r7, #8
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f7fe f991 	bl	8000fc8 <xQueueGenericReceive>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f47f af79 	bne.w	8002ba0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8002cae:	bf00      	nop
 8002cb0:	3728      	adds	r7, #40	; 0x28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	200065ec 	.word	0x200065ec

08002cbc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002cc2:	e044      	b.n	8002d4e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002cc4:	4b2b      	ldr	r3, [pc, #172]	; (8002d74 <prvSwitchTimerLists+0xb8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002cce:	4b29      	ldr	r3, [pc, #164]	; (8002d74 <prvSwitchTimerLists+0xb8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	3304      	adds	r3, #4
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7fd fb01 	bl	80002e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	6938      	ldr	r0, [r7, #16]
 8002ce8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d12d      	bne.n	8002d4e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	699a      	ldr	r2, [r3, #24]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d90e      	bls.n	8002d22 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002d10:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <prvSwitchTimerLists+0xb8>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	3304      	adds	r3, #4
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	f7fd faa9 	bl	8000272 <vListInsert>
 8002d20:	e015      	b.n	8002d4e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002d22:	2300      	movs	r3, #0
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	2300      	movs	r3, #0
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	6938      	ldr	r0, [r7, #16]
 8002d2e:	f7ff fdc1 	bl	80028b4 <xTimerGenericCommand>
 8002d32:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d109      	bne.n	8002d4e <prvSwitchTimerLists+0x92>
 8002d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	e7fe      	b.n	8002d4c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002d4e:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <prvSwitchTimerLists+0xb8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1b5      	bne.n	8002cc4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002d58:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <prvSwitchTimerLists+0xb8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <prvSwitchTimerLists+0xbc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <prvSwitchTimerLists+0xb8>)
 8002d64:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002d66:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <prvSwitchTimerLists+0xbc>)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6013      	str	r3, [r2, #0]
}
 8002d6c:	bf00      	nop
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	200065e4 	.word	0x200065e4
 8002d78:	200065e8 	.word	0x200065e8

08002d7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002d80:	f7fd fbde 	bl	8000540 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002d84:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <prvCheckForValidListAndQueue+0x54>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d11d      	bne.n	8002dc8 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002d8c:	4811      	ldr	r0, [pc, #68]	; (8002dd4 <prvCheckForValidListAndQueue+0x58>)
 8002d8e:	f7fd fa1f 	bl	80001d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002d92:	4811      	ldr	r0, [pc, #68]	; (8002dd8 <prvCheckForValidListAndQueue+0x5c>)
 8002d94:	f7fd fa1c 	bl	80001d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002d98:	4b10      	ldr	r3, [pc, #64]	; (8002ddc <prvCheckForValidListAndQueue+0x60>)
 8002d9a:	4a0e      	ldr	r2, [pc, #56]	; (8002dd4 <prvCheckForValidListAndQueue+0x58>)
 8002d9c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002d9e:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <prvCheckForValidListAndQueue+0x64>)
 8002da0:	4a0d      	ldr	r2, [pc, #52]	; (8002dd8 <prvCheckForValidListAndQueue+0x5c>)
 8002da2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002da4:	2200      	movs	r2, #0
 8002da6:	210c      	movs	r1, #12
 8002da8:	2005      	movs	r0, #5
 8002daa:	f7fd ff27 	bl	8000bfc <xQueueGenericCreate>
 8002dae:	4602      	mov	r2, r0
 8002db0:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <prvCheckForValidListAndQueue+0x54>)
 8002db2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <prvCheckForValidListAndQueue+0x54>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002dbc:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <prvCheckForValidListAndQueue+0x54>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4908      	ldr	r1, [pc, #32]	; (8002de4 <prvCheckForValidListAndQueue+0x68>)
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fe fb44 	bl	8001450 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002dc8:	f7fd fbe8 	bl	800059c <vPortExitCritical>
}
 8002dcc:	bf00      	nop
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	200065ec 	.word	0x200065ec
 8002dd4:	200065bc 	.word	0x200065bc
 8002dd8:	200065d0 	.word	0x200065d0
 8002ddc:	200065e4 	.word	0x200065e4
 8002de0:	200065e8 	.word	0x200065e8
 8002de4:	0800511c 	.word	0x0800511c

08002de8 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8002df8:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <DAC_SetChannel1Data+0x34>)
 8002dfa:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	3308      	adds	r3, #8
 8002e04:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	887b      	ldrh	r3, [r7, #2]
 8002e0c:	6013      	str	r3, [r2, #0]
}
 8002e0e:	bf00      	nop
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40007400 	.word	0x40007400

08002e20 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	4b25      	ldr	r3, [pc, #148]	; (8002ecc <DMA_Init+0xac>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002e4a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002e56:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002e62:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002e6e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e74:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f023 0307 	bic.w	r3, r3, #7
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	691a      	ldr	r2, [r3, #16]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	60da      	str	r2, [r3, #12]
}
 8002ebe:	bf00      	nop
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	f01c803f 	.word	0xf01c803f

08002ed0 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d006      	beq.n	8002ef0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f043 0201 	orr.w	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8002eee:	e005      	b.n	8002efc <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f023 0201 	bic.w	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	601a      	str	r2, [r3, #0]
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8002f10:	2300      	movs	r3, #0
 8002f12:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8002f20:	2301      	movs	r3, #1
 8002f22:	73fb      	strb	r3, [r7, #15]
 8002f24:	e001      	b.n	8002f2a <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8002f42:	2300      	movs	r3, #0
 8002f44:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a15      	ldr	r2, [pc, #84]	; (8002fa4 <DMA_GetFlagStatus+0x6c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d802      	bhi.n	8002f58 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002f52:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <DMA_GetFlagStatus+0x70>)
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	e001      	b.n	8002f5c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002f58:	4b14      	ldr	r3, [pc, #80]	; (8002fac <DMA_GetFlagStatus+0x74>)
 8002f5a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	e002      	b.n	8002f74 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002f7a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	4013      	ands	r3, r2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	75fb      	strb	r3, [r7, #23]
 8002f8e:	e001      	b.n	8002f94 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8002f90:	2300      	movs	r3, #0
 8002f92:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8002f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	4002640f 	.word	0x4002640f
 8002fa8:	40026000 	.word	0x40026000
 8002fac:	40026400 	.word	0x40026400

08002fb0 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a10      	ldr	r2, [pc, #64]	; (8003000 <DMA_ClearFlag+0x50>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d802      	bhi.n	8002fc8 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002fc2:	4b10      	ldr	r3, [pc, #64]	; (8003004 <DMA_ClearFlag+0x54>)
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	e001      	b.n	8002fcc <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002fc8:	4b0f      	ldr	r3, [pc, #60]	; (8003008 <DMA_ClearFlag+0x58>)
 8002fca:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d007      	beq.n	8002fe6 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002fdc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8002fe4:	e006      	b.n	8002ff4 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002fec:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	6093      	str	r3, [r2, #8]
}
 8002ff4:	bf00      	nop
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	4002640f 	.word	0x4002640f
 8003004:	40026000 	.word	0x40026000
 8003008:	40026400 	.word	0x40026400

0800300c <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	887a      	ldrh	r2, [r7, #2]
 800301c:	819a      	strh	r2, [r3, #12]
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800302a:	b480      	push	{r7}
 800302c:	b085      	sub	sp, #20
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
 8003032:	460b      	mov	r3, r1
 8003034:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8003036:	2300      	movs	r3, #0
 8003038:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	891b      	ldrh	r3, [r3, #8]
 800303e:	b29a      	uxth	r2, r3
 8003040:	887b      	ldrh	r3, [r7, #2]
 8003042:	4013      	ands	r3, r2
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800304a:	2301      	movs	r3, #1
 800304c:	73fb      	strb	r3, [r7, #15]
 800304e:	e001      	b.n	8003054 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8003050:	2300      	movs	r3, #0
 8003052:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8003054:	7bfb      	ldrb	r3, [r7, #15]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
	...

08003064 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8003068:	4b38      	ldr	r3, [pc, #224]	; (800314c <Audio_MAL_IRQHandler+0xe8>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	4b38      	ldr	r3, [pc, #224]	; (8003150 <Audio_MAL_IRQHandler+0xec>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4619      	mov	r1, r3
 8003072:	4610      	mov	r0, r2
 8003074:	f7ff ff60 	bl	8002f38 <DMA_GetFlagStatus>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d064      	beq.n	8003148 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 800307e:	4b35      	ldr	r3, [pc, #212]	; (8003154 <Audio_MAL_IRQHandler+0xf0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d04c      	beq.n	8003120 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8003086:	bf00      	nop
 8003088:	4b30      	ldr	r3, [pc, #192]	; (800314c <Audio_MAL_IRQHandler+0xe8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff ff3b 	bl	8002f08 <DMA_GetCmdStatus>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1f7      	bne.n	8003088 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8003098:	4b2c      	ldr	r3, [pc, #176]	; (800314c <Audio_MAL_IRQHandler+0xe8>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	4b2c      	ldr	r3, [pc, #176]	; (8003150 <Audio_MAL_IRQHandler+0xec>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4619      	mov	r1, r3
 80030a2:	4610      	mov	r0, r2
 80030a4:	f7ff ff84 	bl	8002fb0 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 80030a8:	4b2b      	ldr	r3, [pc, #172]	; (8003158 <Audio_MAL_IRQHandler+0xf4>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	4b2b      	ldr	r3, [pc, #172]	; (800315c <Audio_MAL_IRQHandler+0xf8>)
 80030b0:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 80030b2:	4b28      	ldr	r3, [pc, #160]	; (8003154 <Audio_MAL_IRQHandler+0xf0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030ba:	4293      	cmp	r3, r2
 80030bc:	bf28      	it	cs
 80030be:	4613      	movcs	r3, r2
 80030c0:	4a26      	ldr	r2, [pc, #152]	; (800315c <Audio_MAL_IRQHandler+0xf8>)
 80030c2:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80030c4:	4b21      	ldr	r3, [pc, #132]	; (800314c <Audio_MAL_IRQHandler+0xe8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4924      	ldr	r1, [pc, #144]	; (800315c <Audio_MAL_IRQHandler+0xf8>)
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fea8 	bl	8002e20 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 80030d0:	4b1e      	ldr	r3, [pc, #120]	; (800314c <Audio_MAL_IRQHandler+0xe8>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2101      	movs	r1, #1
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fefa 	bl	8002ed0 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 80030dc:	4b1e      	ldr	r3, [pc, #120]	; (8003158 <Audio_MAL_IRQHandler+0xf4>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4b1c      	ldr	r3, [pc, #112]	; (8003154 <Audio_MAL_IRQHandler+0xf0>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e8:	d203      	bcs.n	80030f2 <Audio_MAL_IRQHandler+0x8e>
 80030ea:	4b1a      	ldr	r3, [pc, #104]	; (8003154 <Audio_MAL_IRQHandler+0xf0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	e000      	b.n	80030f4 <Audio_MAL_IRQHandler+0x90>
 80030f2:	4b1b      	ldr	r3, [pc, #108]	; (8003160 <Audio_MAL_IRQHandler+0xfc>)
 80030f4:	4413      	add	r3, r2
 80030f6:	4a18      	ldr	r2, [pc, #96]	; (8003158 <Audio_MAL_IRQHandler+0xf4>)
 80030f8:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80030fa:	4b16      	ldr	r3, [pc, #88]	; (8003154 <Audio_MAL_IRQHandler+0xf0>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	4b15      	ldr	r3, [pc, #84]	; (8003154 <Audio_MAL_IRQHandler+0xf0>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003106:	428b      	cmp	r3, r1
 8003108:	bf28      	it	cs
 800310a:	460b      	movcs	r3, r1
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	4a11      	ldr	r2, [pc, #68]	; (8003154 <Audio_MAL_IRQHandler+0xf0>)
 8003110:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8003112:	4b0e      	ldr	r3, [pc, #56]	; (800314c <Audio_MAL_IRQHandler+0xe8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2101      	movs	r1, #1
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff fed9 	bl	8002ed0 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 800311e:	e013      	b.n	8003148 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8003120:	4b0a      	ldr	r3, [pc, #40]	; (800314c <Audio_MAL_IRQHandler+0xe8>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2100      	movs	r1, #0
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff fed2 	bl	8002ed0 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 800312c:	4b07      	ldr	r3, [pc, #28]	; (800314c <Audio_MAL_IRQHandler+0xe8>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	4b07      	ldr	r3, [pc, #28]	; (8003150 <Audio_MAL_IRQHandler+0xec>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4619      	mov	r1, r3
 8003136:	4610      	mov	r0, r2
 8003138:	f7ff ff3a 	bl	8002fb0 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 800313c:	4b06      	ldr	r3, [pc, #24]	; (8003158 <Audio_MAL_IRQHandler+0xf4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2100      	movs	r1, #0
 8003142:	4618      	mov	r0, r3
 8003144:	f000 fc28 	bl	8003998 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8003148:	bf00      	nop
 800314a:	bd80      	pop	{r7, pc}
 800314c:	2000000c 	.word	0x2000000c
 8003150:	20000010 	.word	0x20000010
 8003154:	20000004 	.word	0x20000004
 8003158:	20006644 	.word	0x20006644
 800315c:	20006684 	.word	0x20006684
 8003160:	0001fffe 	.word	0x0001fffe

08003164 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8003168:	f7ff ff7c 	bl	8003064 <Audio_MAL_IRQHandler>
}
 800316c:	bf00      	nop
 800316e:	bd80      	pop	{r7, pc}

08003170 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8003174:	f7ff ff76 	bl	8003064 <Audio_MAL_IRQHandler>
}
 8003178:	bf00      	nop
 800317a:	bd80      	pop	{r7, pc}

0800317c <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8003180:	2102      	movs	r1, #2
 8003182:	480d      	ldr	r0, [pc, #52]	; (80031b8 <SPI3_IRQHandler+0x3c>)
 8003184:	f7ff ff51 	bl	800302a <SPI_I2S_GetFlagStatus>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d011      	beq.n	80031b2 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800318e:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <SPI3_IRQHandler+0x40>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b02      	cmp	r3, #2
 8003194:	d106      	bne.n	80031a4 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8003196:	f000 fc0a 	bl	80039ae <EVAL_AUDIO_GetSampleCallBack>
 800319a:	4603      	mov	r3, r0
 800319c:	4619      	mov	r1, r3
 800319e:	2004      	movs	r0, #4
 80031a0:	f7ff fe22 	bl	8002de8 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 80031a4:	f000 fc03 	bl	80039ae <EVAL_AUDIO_GetSampleCallBack>
 80031a8:	4603      	mov	r3, r0
 80031aa:	4619      	mov	r1, r3
 80031ac:	4802      	ldr	r0, [pc, #8]	; (80031b8 <SPI3_IRQHandler+0x3c>)
 80031ae:	f7ff ff2d 	bl	800300c <SPI_I2S_SendData>
  }
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40003c00 	.word	0x40003c00
 80031bc:	20000008 	.word	0x20000008

080031c0 <DDS_Task>:
 * Implements the EDF algorithm and controls the
 * priorities of user-defined F-tasks from an actively-managed list of DD-Tasks
 *
 */

void DDS_Task(void *pvParameters) {
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08a      	sub	sp, #40	; 0x28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
	printf(
 80031c8:	4868      	ldr	r0, [pc, #416]	; (800336c <DDS_Task+0x1ac>)
 80031ca:	f001 fc39 	bl	8004a40 <puts>
			"\n\n********************  Starting Scheduler  ****************\n\n");

	DD_Message_t msg;

	pTaskHandle_t recievedTask = NULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t testCounter = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	while (1) {

		if ( xQueueReceive(xDDS_Msg_Queue, (void* )&msg,
 80031d8:	4b65      	ldr	r3, [pc, #404]	; (8003370 <DDS_Task+0x1b0>)
 80031da:	6818      	ldr	r0, [r3, #0]
 80031dc:	f107 010c 	add.w	r1, r7, #12
 80031e0:	2300      	movs	r3, #0
 80031e2:	f04f 32ff 	mov.w	r2, #4294967295
 80031e6:	f7fd feef 	bl	8000fc8 <xQueueGenericReceive>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d1f3      	bne.n	80031d8 <DDS_Task+0x18>
				portMAX_DELAY) == pdTRUE) {
			recievedTask = (pTaskHandle_t) msg.data;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24

			// Debuging.. Recieving NULL tasks upon second second iteration
			//if (recievedTask->execution_time != NULL) {

			// sorts the overdue nodes from active nodes
			Sort_Overdue_From_Active(&taskList_ACTIVE, &taskList_OVERDUE);
 80031f4:	495f      	ldr	r1, [pc, #380]	; (8003374 <DDS_Task+0x1b4>)
 80031f6:	4860      	ldr	r0, [pc, #384]	; (8003378 <DDS_Task+0x1b8>)
 80031f8:	f000 fd4c 	bl	8003c94 <Sort_Overdue_From_Active>

			if (msg.type & Msg_Create_DDT) {
 80031fc:	89bb      	ldrh	r3, [r7, #12]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00d      	beq.n	8003222 <DDS_Task+0x62>

				recievedTask->task_state = CreateState;
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	2202      	movs	r2, #2
 800320a:	61da      	str	r2, [r3, #28]

				if (!(bool) msg.taskExists) {
 800320c:	7f3b      	ldrb	r3, [r7, #28]
 800320e:	f083 0301 	eor.w	r3, r3, #1
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0df      	beq.n	80031d8 <DDS_Task+0x18>

					Insert_DDT_to_LL(recievedTask, &taskList_ACTIVE);
 8003218:	4957      	ldr	r1, [pc, #348]	; (8003378 <DDS_Task+0x1b8>)
 800321a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800321c:	f000 fc20 	bl	8003a60 <Insert_DDT_to_LL>
 8003220:	e7da      	b.n	80031d8 <DDS_Task+0x18>

				//TEST_xTaskNotifyGive(msg.pTask);

			}

			else if (msg.type & Msg_Release_DDT) {
 8003222:	89bb      	ldrh	r3, [r7, #12]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <DDS_Task+0x74>

				recievedTask->task_state = ActiveState;
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	2201      	movs	r2, #1
 8003230:	61da      	str	r2, [r3, #28]
 8003232:	e7d1      	b.n	80031d8 <DDS_Task+0x18>

			}

			else if (msg.type & Msg_Delete_DDT) {
 8003234:	89bb      	ldrh	r3, [r7, #12]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b00      	cmp	r3, #0
 800323c:	d008      	beq.n	8003250 <DDS_Task+0x90>

				recievedTask->task_state = DeleteState;
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	2208      	movs	r2, #8
 8003242:	61da      	str	r2, [r3, #28]

				remove_DDT_From_LL(&taskList_ACTIVE, recievedTask, true);
 8003244:	2201      	movs	r2, #1
 8003246:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003248:	484b      	ldr	r0, [pc, #300]	; (8003378 <DDS_Task+0x1b8>)
 800324a:	f000 fc7f 	bl	8003b4c <remove_DDT_From_LL>
 800324e:	e7c3      	b.n	80031d8 <DDS_Task+0x18>

			}

			else if (msg.type & Msg_Complete_DDT) {
 8003250:	89bb      	ldrh	r3, [r7, #12]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d009      	beq.n	800326e <DDS_Task+0xae>

				recievedTask->task_state = CompleteState;
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	2204      	movs	r2, #4
 800325e:	61da      	str	r2, [r3, #28]

				// add task to completed LL
				add_DDT_to_Completed(recievedTask);
 8003260:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003262:	f000 fd65 	bl	8003d30 <add_DDT_to_Completed>

				recievedTask->task_state = ActiveState;
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	2201      	movs	r2, #1
 800326a:	61da      	str	r2, [r3, #28]
 800326c:	e7b4      	b.n	80031d8 <DDS_Task+0x18>

				//create_dd_task(recievedTask);

			}

			else if (msg.type & Msg_ActiveList) {
 800326e:	89bb      	ldrh	r3, [r7, #12]
 8003270:	f003 0332 	and.w	r3, r3, #50	; 0x32
 8003274:	2b00      	cmp	r3, #0
 8003276:	d024      	beq.n	80032c2 <DDS_Task+0x102>

				msg.pList = &taskList_ACTIVE;
 8003278:	4b3f      	ldr	r3, [pc, #252]	; (8003378 <DDS_Task+0x1b8>)
 800327a:	61bb      	str	r3, [r7, #24]

				if (uxQueueSpacesAvailable(xMonitor_Msg_Queue) == 0) {
 800327c:	4b3f      	ldr	r3, [pc, #252]	; (800337c <DDS_Task+0x1bc>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f7fd ffb3 	bl	80011ec <uxQueueSpacesAvailable>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d105      	bne.n	8003298 <DDS_Task+0xd8>
					xQueueReset(xMonitor_Msg_Queue);
 800328c:	4b3b      	ldr	r3, [pc, #236]	; (800337c <DDS_Task+0x1bc>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2100      	movs	r1, #0
 8003292:	4618      	mov	r0, r3
 8003294:	f7fd fc4a 	bl	8000b2c <xQueueGenericReset>
				}

				if (xMonitor_Msg_Queue != NULL) {
 8003298:	4b38      	ldr	r3, [pc, #224]	; (800337c <DDS_Task+0x1bc>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d09b      	beq.n	80031d8 <DDS_Task+0x18>

					if (xMonitor_Msg_Queue != NULL) {
 80032a0:	4b36      	ldr	r3, [pc, #216]	; (800337c <DDS_Task+0x1bc>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d097      	beq.n	80031d8 <DDS_Task+0x18>
						if ( xQueueSend(xMonitor_Msg_Queue, &msg,
 80032a8:	4b34      	ldr	r3, [pc, #208]	; (800337c <DDS_Task+0x1bc>)
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	f107 010c 	add.w	r1, r7, #12
 80032b0:	2300      	movs	r3, #0
 80032b2:	f04f 32ff 	mov.w	r2, #4294967295
 80032b6:	f7fd fcf9 	bl	8000cac <xQueueGenericSend>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d08b      	beq.n	80031d8 <DDS_Task+0x18>
								(TickType_t) portMAX_DELAY) != pdPASS) {

							break;
 80032c0:	e050      	b.n	8003364 <DDS_Task+0x1a4>

				}

			}

			else if (msg.type & Msg_OverDueList) {
 80032c2:	89bb      	ldrh	r3, [r7, #12]
 80032c4:	f003 0364 	and.w	r3, r3, #100	; 0x64
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d022      	beq.n	8003312 <DDS_Task+0x152>

				msg.pList = &taskList_OVERDUE;
 80032cc:	4b29      	ldr	r3, [pc, #164]	; (8003374 <DDS_Task+0x1b4>)
 80032ce:	61bb      	str	r3, [r7, #24]

				if (uxQueueSpacesAvailable(xMonitor_Msg_Queue) == 0) {
 80032d0:	4b2a      	ldr	r3, [pc, #168]	; (800337c <DDS_Task+0x1bc>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fd ff89 	bl	80011ec <uxQueueSpacesAvailable>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d105      	bne.n	80032ec <DDS_Task+0x12c>
					xQueueReset(xMonitor_Msg_Queue);
 80032e0:	4b26      	ldr	r3, [pc, #152]	; (800337c <DDS_Task+0x1bc>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2100      	movs	r1, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fd fc20 	bl	8000b2c <xQueueGenericReset>
				}

				if (xMonitor_Msg_Queue != NULL) {
 80032ec:	4b23      	ldr	r3, [pc, #140]	; (800337c <DDS_Task+0x1bc>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f43f af71 	beq.w	80031d8 <DDS_Task+0x18>
					if ( xQueueSend(xMonitor_Msg_Queue, &msg,
 80032f6:	4b21      	ldr	r3, [pc, #132]	; (800337c <DDS_Task+0x1bc>)
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	f107 010c 	add.w	r1, r7, #12
 80032fe:	2300      	movs	r3, #0
 8003300:	f04f 32ff 	mov.w	r2, #4294967295
 8003304:	f7fd fcd2 	bl	8000cac <xQueueGenericSend>
 8003308:	4603      	mov	r3, r0
 800330a:	2b01      	cmp	r3, #1
 800330c:	f43f af64 	beq.w	80031d8 <DDS_Task+0x18>
							(TickType_t) portMAX_DELAY) != pdPASS) {

						break;
 8003310:	e028      	b.n	8003364 <DDS_Task+0x1a4>
					}
				}

			}

			else if (msg.type & Msg_CompleteList) {
 8003312:	89bb      	ldrh	r3, [r7, #12]
 8003314:	f403 7394 	and.w	r3, r3, #296	; 0x128
 8003318:	2b00      	cmp	r3, #0
 800331a:	f43f af5d 	beq.w	80031d8 <DDS_Task+0x18>

				msg.pList = &taskList_COMPLETED;
 800331e:	4b18      	ldr	r3, [pc, #96]	; (8003380 <DDS_Task+0x1c0>)
 8003320:	61bb      	str	r3, [r7, #24]

				if (uxQueueSpacesAvailable(xMonitor_Msg_Queue) == 0) {
 8003322:	4b16      	ldr	r3, [pc, #88]	; (800337c <DDS_Task+0x1bc>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd ff60 	bl	80011ec <uxQueueSpacesAvailable>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d105      	bne.n	800333e <DDS_Task+0x17e>
					xQueueReset(xMonitor_Msg_Queue);
 8003332:	4b12      	ldr	r3, [pc, #72]	; (800337c <DDS_Task+0x1bc>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2100      	movs	r1, #0
 8003338:	4618      	mov	r0, r3
 800333a:	f7fd fbf7 	bl	8000b2c <xQueueGenericReset>
				}

				if (xMonitor_Msg_Queue != NULL) {
 800333e:	4b0f      	ldr	r3, [pc, #60]	; (800337c <DDS_Task+0x1bc>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	f43f af48 	beq.w	80031d8 <DDS_Task+0x18>
					if ( xQueueSend(xMonitor_Msg_Queue, &msg,
 8003348:	4b0c      	ldr	r3, [pc, #48]	; (800337c <DDS_Task+0x1bc>)
 800334a:	6818      	ldr	r0, [r3, #0]
 800334c:	f107 010c 	add.w	r1, r7, #12
 8003350:	2300      	movs	r3, #0
 8003352:	f04f 32ff 	mov.w	r2, #4294967295
 8003356:	f7fd fca9 	bl	8000cac <xQueueGenericSend>
 800335a:	4603      	mov	r3, r0
 800335c:	2b01      	cmp	r3, #1
 800335e:	d100      	bne.n	8003362 <DDS_Task+0x1a2>
		if ( xQueueReceive(xDDS_Msg_Queue, (void* )&msg,
 8003360:	e73a      	b.n	80031d8 <DDS_Task+0x18>
							(TickType_t) portMAX_DELAY) != pdPASS) {

						break;
 8003362:	bf00      	nop
			//}

		}
	}

}
 8003364:	bf00      	nop
 8003366:	3728      	adds	r7, #40	; 0x28
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	08005124 	.word	0x08005124
 8003370:	200066d4 	.word	0x200066d4
 8003374:	200066e8 	.word	0x200066e8
 8003378:	200066cc 	.word	0x200066cc
 800337c:	200066c0 	.word	0x200066c0
 8003380:	200066d8 	.word	0x200066d8

08003384 <task_exists_in_List>:
 *
 *
 */

pTaskHandle_t task_exists_in_List(pTaskListHandle_t taskList,
		pTaskHandle_t task) {
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]

	if (taskList == NULL || task == NULL) {
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <task_exists_in_List+0x16>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <task_exists_in_List+0x1a>

		return 0;
 800339a:	2300      	movs	r3, #0
 800339c:	e012      	b.n	80033c4 <task_exists_in_List+0x40>

	}

	pTaskHandle_t LL_index = taskList->head;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60fb      	str	r3, [r7, #12]

	while (LL_index != NULL) {
 80033a4:	e00a      	b.n	80033bc <task_exists_in_List+0x38>

		if (LL_index->task_handle == task->task_handle) {
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d101      	bne.n	80033b6 <task_exists_in_List+0x32>

			return LL_index;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	e006      	b.n	80033c4 <task_exists_in_List+0x40>
		}

		LL_index = LL_index->next;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	60fb      	str	r3, [r7, #12]
	while (LL_index != NULL) {
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f1      	bne.n	80033a6 <task_exists_in_List+0x22>

	}

	return 0;
 80033c2:	2300      	movs	r3, #0

}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <create_dd_task>:
//
//	}
//
//}

uint32_t create_dd_task(pTaskHandle_t newTask) {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08e      	sub	sp, #56	; 0x38
 80033d4:	af02      	add	r7, sp, #8
 80033d6:	6078      	str	r0, [r7, #4]

	if (newTask == NULL) {
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d104      	bne.n	80033e8 <create_dd_task+0x18>

		printf(
 80033de:	484a      	ldr	r0, [pc, #296]	; (8003508 <create_dd_task+0x138>)
 80033e0:	f001 fb2e 	bl	8004a40 <puts>
				"ERROR: Request to create task with null pointer to task handle\n");
		return 0;
 80033e4:	2300      	movs	r3, #0
 80033e6:	e08b      	b.n	8003500 <create_dd_task+0x130>

	}

	// Check if DDT already exists in Active, Completed and overdue lists
	pTaskHandle_t taskExists_ACTIVE = task_exists_in_List(&taskList_ACTIVE,
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4848      	ldr	r0, [pc, #288]	; (800350c <create_dd_task+0x13c>)
 80033ec:	f7ff ffca 	bl	8003384 <task_exists_in_List>
 80033f0:	6278      	str	r0, [r7, #36]	; 0x24
			newTask);

	pTaskHandle_t taskExists_OVERDUE = task_exists_in_List(&taskList_OVERDUE,
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	4846      	ldr	r0, [pc, #280]	; (8003510 <create_dd_task+0x140>)
 80033f6:	f7ff ffc5 	bl	8003384 <task_exists_in_List>
 80033fa:	6238      	str	r0, [r7, #32]
			newTask);

	pTaskHandle_t taskExists_COMPLETED = task_exists_in_List(
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	4845      	ldr	r0, [pc, #276]	; (8003514 <create_dd_task+0x144>)
 8003400:	f7ff ffc0 	bl	8003384 <task_exists_in_List>
 8003404:	61f8      	str	r0, [r7, #28]
			&taskList_COMPLETED, newTask);

	pTaskHandle_t createTask = NULL;
 8003406:	2300      	movs	r3, #0
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
	bool task_exists = false;
 800340a:	2300      	movs	r3, #0
 800340c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (taskExists_ACTIVE != NULL) {
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	2b00      	cmp	r3, #0
 8003414:	d005      	beq.n	8003422 <create_dd_task+0x52>

		createTask = taskExists_ACTIVE;
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	62fb      	str	r3, [r7, #44]	; 0x2c

		task_exists = true;
 800341a:	2301      	movs	r3, #1
 800341c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003420:	e031      	b.n	8003486 <create_dd_task+0xb6>

	}

	else if (taskExists_OVERDUE != NULL) {
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00e      	beq.n	8003446 <create_dd_task+0x76>

		//demote_priorities(&taskList_OVERDUE);
		createTask = taskExists_OVERDUE;
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	62fb      	str	r3, [r7, #44]	; 0x2c

		// Move to active list
		Insert_DDT_to_LL(createTask, &taskList_ACTIVE);
 800342c:	4937      	ldr	r1, [pc, #220]	; (800350c <create_dd_task+0x13c>)
 800342e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003430:	f000 fb16 	bl	8003a60 <Insert_DDT_to_LL>

		// Remove from completed list -- free node

		remove_DDT_From_LL(&taskList_OVERDUE, createTask, true);
 8003434:	2201      	movs	r2, #1
 8003436:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003438:	4835      	ldr	r0, [pc, #212]	; (8003510 <create_dd_task+0x140>)
 800343a:	f000 fb87 	bl	8003b4c <remove_DDT_From_LL>

		task_exists = true;
 800343e:	2301      	movs	r3, #1
 8003440:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003444:	e01f      	b.n	8003486 <create_dd_task+0xb6>

	}

	else if (taskExists_COMPLETED != NULL) {
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00e      	beq.n	800346a <create_dd_task+0x9a>

		createTask = taskExists_COMPLETED;
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	62fb      	str	r3, [r7, #44]	; 0x2c

		// Move to active list
		Insert_DDT_to_LL(createTask, &taskList_ACTIVE);
 8003450:	492e      	ldr	r1, [pc, #184]	; (800350c <create_dd_task+0x13c>)
 8003452:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003454:	f000 fb04 	bl	8003a60 <Insert_DDT_to_LL>

		// Remove from completed list -- free node

		remove_DDT_From_LL(&taskList_COMPLETED, createTask, true);
 8003458:	2201      	movs	r2, #1
 800345a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800345c:	482d      	ldr	r0, [pc, #180]	; (8003514 <create_dd_task+0x144>)
 800345e:	f000 fb75 	bl	8003b4c <remove_DDT_From_LL>

		task_exists = true;
 8003462:	2301      	movs	r3, #1
 8003464:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003468:	e00d      	b.n	8003486 <create_dd_task+0xb6>

	}

	else {

		createTask = newTask;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	62fb      	str	r3, [r7, #44]	; 0x2c

		xTaskCreate(createTask->task_function, createTask->task_name,
 800346e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003470:	6858      	ldr	r0, [r3, #4]
 8003472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003474:	68d9      	ldr	r1, [r3, #12]
 8003476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003478:	9301      	str	r3, [sp, #4]
 800347a:	2300      	movs	r3, #0
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003480:	2282      	movs	r2, #130	; 0x82
 8003482:	f7fe f841 	bl	8001508 <xTaskCreate>

	}

	//createTask->task_state = ActiveState;

	vTaskSuspend(createTask->task_handle);
 8003486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fe fae4 	bl	8001a58 <vTaskSuspend>


	DD_Message_t create_task_msg = { Msg_Create_DDT, createTask->task_handle,
 8003490:	2301      	movs	r3, #1
 8003492:	813b      	strh	r3, [r7, #8]
 8003494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80034a6:	763b      	strb	r3, [r7, #24]
			createTask,
			NULL, task_exists };


	debugPrint("\n\n| Task [%s] Released | current Time [0] | \n\n", createTask->task_name);
 80034a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	4619      	mov	r1, r3
 80034ae:	481a      	ldr	r0, [pc, #104]	; (8003518 <create_dd_task+0x148>)
 80034b0:	f001 f934 	bl	800471c <printf>





	if (uxQueueSpacesAvailable(xDDS_Msg_Queue) == 0) {
 80034b4:	4b19      	ldr	r3, [pc, #100]	; (800351c <create_dd_task+0x14c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fd fe97 	bl	80011ec <uxQueueSpacesAvailable>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d105      	bne.n	80034d0 <create_dd_task+0x100>
		xQueueReset(xDDS_Msg_Queue);
 80034c4:	4b15      	ldr	r3, [pc, #84]	; (800351c <create_dd_task+0x14c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2100      	movs	r1, #0
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fd fb2e 	bl	8000b2c <xQueueGenericReset>
	}

	if ( xQueueSend(xDDS_Msg_Queue, &create_task_msg,
 80034d0:	4b12      	ldr	r3, [pc, #72]	; (800351c <create_dd_task+0x14c>)
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	f107 0108 	add.w	r1, r7, #8
 80034d8:	2300      	movs	r3, #0
 80034da:	f04f 32ff 	mov.w	r2, #4294967295
 80034de:	f7fd fbe5 	bl	8000cac <xQueueGenericSend>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d007      	beq.n	80034f8 <create_dd_task+0x128>
			portMAX_DELAY) != pdPASS) // ensure the message was sent
	{
		printf(
 80034e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	4619      	mov	r1, r3
 80034ee:	480c      	ldr	r0, [pc, #48]	; (8003520 <create_dd_task+0x150>)
 80034f0:	f001 f914 	bl	800471c <printf>
				"\nTask [%s]  Unable to Release \n unable to send New Task Message sent to DDS Queue \n",
				createTask->task_name);
		return 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	e003      	b.n	8003500 <create_dd_task+0x130>
	}

	release_dd_task(createTask);
 80034f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034fa:	f000 f813 	bl	8003524 <release_dd_task>

	return 1;
 80034fe:	2301      	movs	r3, #1

}
 8003500:	4618      	mov	r0, r3
 8003502:	3730      	adds	r7, #48	; 0x30
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	08005164 	.word	0x08005164
 800350c:	200066cc 	.word	0x200066cc
 8003510:	200066e8 	.word	0x200066e8
 8003514:	200066d8 	.word	0x200066d8
 8003518:	080051a4 	.word	0x080051a4
 800351c:	200066d4 	.word	0x200066d4
 8003520:	080051d4 	.word	0x080051d4

08003524 <release_dd_task>:

uint32_t release_dd_task(pTaskHandle_t pTask) {
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]

	if (pTask == NULL) {
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d104      	bne.n	800353c <release_dd_task+0x18>

		printf(
 8003532:	4818      	ldr	r0, [pc, #96]	; (8003594 <release_dd_task+0x70>)
 8003534:	f001 fa84 	bl	8004a40 <puts>
				"ERROR: Request to create task with null pointer to task handle\n");
		return 0;
 8003538:	2300      	movs	r3, #0
 800353a:	e027      	b.n	800358c <release_dd_task+0x68>

	}

	DD_Message_t release_task_msg = { Msg_Release_DDT, pTask->task_handle,
 800353c:	f107 030c 	add.w	r3, r7, #12
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	60da      	str	r2, [r3, #12]
 800354a:	611a      	str	r2, [r3, #16]
 800354c:	2302      	movs	r3, #2
 800354e:	81bb      	strh	r3, [r7, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	613b      	str	r3, [r7, #16]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	617b      	str	r3, [r7, #20]
			pTask,
			NULL };

	if ( xQueueSend(xDDS_Msg_Queue, &release_task_msg,
 800355a:	4b0f      	ldr	r3, [pc, #60]	; (8003598 <release_dd_task+0x74>)
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	f107 010c 	add.w	r1, r7, #12
 8003562:	2300      	movs	r3, #0
 8003564:	f04f 32ff 	mov.w	r2, #4294967295
 8003568:	f7fd fba0 	bl	8000cac <xQueueGenericSend>
 800356c:	4603      	mov	r3, r0
 800356e:	2b01      	cmp	r3, #1
 8003570:	d007      	beq.n	8003582 <release_dd_task+0x5e>
			portMAX_DELAY) != pdPASS) // ensure the message was sent
	{
		printf(
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	4619      	mov	r1, r3
 8003578:	4808      	ldr	r0, [pc, #32]	; (800359c <release_dd_task+0x78>)
 800357a:	f001 f8cf 	bl	800471c <printf>
				"\nTask [%s]  Unable to Release \n unable to send New Task Message sent to DDS Queue \n",
				pTask->task_name);
		return 0;
 800357e:	2300      	movs	r3, #0
 8003580:	e004      	b.n	800358c <release_dd_task+0x68>
	}

	vTaskResume(pTask->task_handle);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f7fe fb28 	bl	8001bdc <vTaskResume>

}
 800358c:	4618      	mov	r0, r3
 800358e:	3720      	adds	r7, #32
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	08005164 	.word	0x08005164
 8003598:	200066d4 	.word	0x200066d4
 800359c:	080051d4 	.word	0x080051d4

080035a0 <complete_dd_task>:
//
//
//
//}

uint32_t complete_dd_task(pTaskHandle_t pTask) {
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b089      	sub	sp, #36	; 0x24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]

	if (pTask == NULL) {
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d104      	bne.n	80035b8 <complete_dd_task+0x18>

		printf(
 80035ae:	4819      	ldr	r0, [pc, #100]	; (8003614 <complete_dd_task+0x74>)
 80035b0:	f001 fa46 	bl	8004a40 <puts>
				"ERROR: Request to create task with null pointer to task handle\n");
		return 0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	e029      	b.n	800360c <complete_dd_task+0x6c>

	}

	DD_Message_t msg_Complete_Task = { Msg_Complete_DDT, pTask->task_handle,
 80035b8:	2308      	movs	r3, #8
 80035ba:	81bb      	strh	r3, [r7, #12]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	2300      	movs	r3, #0
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	2300      	movs	r3, #0
 80035cc:	773b      	strb	r3, [r7, #28]
			pTask,
			NULL,
			NULL };

	debugPrint("\n\n|Task [%s] Completed | current Time [%u] |\n\n",
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68dc      	ldr	r4, [r3, #12]
			pTask->task_name, (unsigned int) xTaskGetTickCount());
 80035d2:	f7fe fc55 	bl	8001e80 <xTaskGetTickCount>
 80035d6:	4603      	mov	r3, r0
	debugPrint("\n\n|Task [%s] Completed | current Time [%u] |\n\n",
 80035d8:	461a      	mov	r2, r3
 80035da:	4621      	mov	r1, r4
 80035dc:	480e      	ldr	r0, [pc, #56]	; (8003618 <complete_dd_task+0x78>)
 80035de:	f001 f89d 	bl	800471c <printf>

	vTaskSuspend(NULL);
 80035e2:	2000      	movs	r0, #0
 80035e4:	f7fe fa38 	bl	8001a58 <vTaskSuspend>

	if ( xQueueSend(xDDS_Msg_Queue, &msg_Complete_Task,portMAX_DELAY) != pdPASS) {
 80035e8:	4b0c      	ldr	r3, [pc, #48]	; (800361c <complete_dd_task+0x7c>)
 80035ea:	6818      	ldr	r0, [r3, #0]
 80035ec:	f107 010c 	add.w	r1, r7, #12
 80035f0:	2300      	movs	r3, #0
 80035f2:	f04f 32ff 	mov.w	r2, #4294967295
 80035f6:	f7fd fb59 	bl	8000cac <xQueueGenericSend>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d004      	beq.n	800360a <complete_dd_task+0x6a>
		printf(
 8003600:	4807      	ldr	r0, [pc, #28]	; (8003620 <complete_dd_task+0x80>)
 8003602:	f001 fa1d 	bl	8004a40 <puts>
				" ERROR While Sending Delete Msg to DDS Queue:  See DDS.c, Line 172 \n");
		return 0;
 8003606:	2300      	movs	r3, #0
 8003608:	e000      	b.n	800360c <complete_dd_task+0x6c>
	}

	return 1;
 800360a:	2301      	movs	r3, #1

}
 800360c:	4618      	mov	r0, r3
 800360e:	3724      	adds	r7, #36	; 0x24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd90      	pop	{r4, r7, pc}
 8003614:	08005164 	.word	0x08005164
 8003618:	08005228 	.word	0x08005228
 800361c:	200066d4 	.word	0x200066d4
 8003620:	08005258 	.word	0x08005258

08003624 <DDS_Init>:

	return 1;

}

void DDS_Init(void) {
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af02      	add	r7, sp, #8

	debugPrint("\n\n.............Initializing Task lists............:\n\n");
 800362a:	481f      	ldr	r0, [pc, #124]	; (80036a8 <DDS_Init+0x84>)
 800362c:	f001 fa08 	bl	8004a40 <puts>

	Init_DD_TaskList(&taskList_ACTIVE);
 8003630:	481e      	ldr	r0, [pc, #120]	; (80036ac <DDS_Init+0x88>)
 8003632:	f000 f9fd 	bl	8003a30 <Init_DD_TaskList>
	Init_DD_TaskList(&taskList_OVERDUE);
 8003636:	481e      	ldr	r0, [pc, #120]	; (80036b0 <DDS_Init+0x8c>)
 8003638:	f000 f9fa 	bl	8003a30 <Init_DD_TaskList>
	Init_DD_TaskList(&taskList_COMPLETED);
 800363c:	481d      	ldr	r0, [pc, #116]	; (80036b4 <DDS_Init+0x90>)
 800363e:	f000 f9f7 	bl	8003a30 <Init_DD_TaskList>

	// Crate Queue for DDS Communication
	xDDS_Msg_Queue = xQueueCreate(MAX_NUM_DDS_MSGS, sizeof(DD_Message_t));
 8003642:	2200      	movs	r2, #0
 8003644:	2114      	movs	r1, #20
 8003646:	2005      	movs	r0, #5
 8003648:	f7fd fad8 	bl	8000bfc <xQueueGenericCreate>
 800364c:	4602      	mov	r2, r0
 800364e:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <DDS_Init+0x94>)
 8003650:	601a      	str	r2, [r3, #0]
	vQueueAddToRegistry(xDDS_Msg_Queue, "DDS Queue");
 8003652:	4b19      	ldr	r3, [pc, #100]	; (80036b8 <DDS_Init+0x94>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4919      	ldr	r1, [pc, #100]	; (80036bc <DDS_Init+0x98>)
 8003658:	4618      	mov	r0, r3
 800365a:	f7fd fef9 	bl	8001450 <vQueueAddToRegistry>

	//Create  Queue for Monitor Messages
	xMonitor_Msg_Queue = xQueueCreate(MAX_NUM_MONITOR_MSGS,
 800365e:	2200      	movs	r2, #0
 8003660:	2114      	movs	r1, #20
 8003662:	2002      	movs	r0, #2
 8003664:	f7fd faca 	bl	8000bfc <xQueueGenericCreate>
 8003668:	4602      	mov	r2, r0
 800366a:	4b15      	ldr	r3, [pc, #84]	; (80036c0 <DDS_Init+0x9c>)
 800366c:	601a      	str	r2, [r3, #0]
			sizeof(DD_Message_t)); // Should only ever have 2 requests on the queue.
	vQueueAddToRegistry(xMonitor_Msg_Queue, "Monitor Queue");
 800366e:	4b14      	ldr	r3, [pc, #80]	; (80036c0 <DDS_Init+0x9c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4914      	ldr	r1, [pc, #80]	; (80036c4 <DDS_Init+0xa0>)
 8003674:	4618      	mov	r0, r3
 8003676:	f7fd feeb 	bl	8001450 <vQueueAddToRegistry>

	// create tasks for DDS and Monitor Functionality
	xTaskCreate(DDS_Task, "DDS Task", configMINIMAL_STACK_SIZE, NULL,
 800367a:	2300      	movs	r3, #0
 800367c:	9301      	str	r3, [sp, #4]
 800367e:	2305      	movs	r3, #5
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	2300      	movs	r3, #0
 8003684:	2282      	movs	r2, #130	; 0x82
 8003686:	4910      	ldr	r1, [pc, #64]	; (80036c8 <DDS_Init+0xa4>)
 8003688:	4810      	ldr	r0, [pc, #64]	; (80036cc <DDS_Init+0xa8>)
 800368a:	f7fd ff3d 	bl	8001508 <xTaskCreate>
	PrioirtyLevel_MAX, NULL);

# if MONITOR_MODE == 1
	xTaskCreate(MonitorTask, "Monitor Task", configMINIMAL_STACK_SIZE, NULL,
 800368e:	2300      	movs	r3, #0
 8003690:	9301      	str	r3, [sp, #4]
 8003692:	2301      	movs	r3, #1
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	2300      	movs	r3, #0
 8003698:	2282      	movs	r2, #130	; 0x82
 800369a:	490d      	ldr	r1, [pc, #52]	; (80036d0 <DDS_Init+0xac>)
 800369c:	480d      	ldr	r0, [pc, #52]	; (80036d4 <DDS_Init+0xb0>)
 800369e:	f7fd ff33 	bl	8001508 <xTaskCreate>
	PriorityLevel_MED, NULL);

#endif

}
 80036a2:	bf00      	nop
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	0800529c 	.word	0x0800529c
 80036ac:	200066cc 	.word	0x200066cc
 80036b0:	200066e8 	.word	0x200066e8
 80036b4:	200066d8 	.word	0x200066d8
 80036b8:	200066d4 	.word	0x200066d4
 80036bc:	080052d4 	.word	0x080052d4
 80036c0:	200066c0 	.word	0x200066c0
 80036c4:	080052e0 	.word	0x080052e0
 80036c8:	080052f0 	.word	0x080052f0
 80036cc:	080031c1 	.word	0x080031c1
 80036d0:	080052fc 	.word	0x080052fc
 80036d4:	080036d9 	.word	0x080036d9

080036d8 <MonitorTask>:
 *
 * F-Task to extract information from the DDS and report scheduling information.
 *
 */

void MonitorTask(void){
 80036d8:	b598      	push	{r3, r4, r7, lr}
 80036da:	af00      	add	r7, sp, #0

	vTaskDelay(10000);
 80036dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80036e0:	f7fe f8be 	bl	8001860 <vTaskDelay>

	while (1) {



		debugPrint("\n\n*****************************************************************************\n\n");
 80036e4:	480d      	ldr	r0, [pc, #52]	; (800371c <MonitorTask+0x44>)
 80036e6:	f001 f9ab 	bl	8004a40 <puts>
		debugPrint("\n\n\n.............................................................................:\n");
 80036ea:	480d      	ldr	r0, [pc, #52]	; (8003720 <MonitorTask+0x48>)
 80036ec:	f001 f9a8 	bl	8004a40 <puts>

		debugPrint("\n\n MONITORING TASK:\n Current Time: [%u]\n Priority Level: [%u] \n\n",
				(unsigned int) xTaskGetTickCount(),
 80036f0:	f7fe fbc6 	bl	8001e80 <xTaskGetTickCount>
 80036f4:	4604      	mov	r4, r0
				(unsigned int) uxTaskPriorityGet( NULL));
 80036f6:	2000      	movs	r0, #0
 80036f8:	f7fe f8e6 	bl	80018c8 <uxTaskPriorityGet>
 80036fc:	4603      	mov	r3, r0
		debugPrint("\n\n MONITORING TASK:\n Current Time: [%u]\n Priority Level: [%u] \n\n",
 80036fe:	461a      	mov	r2, r3
 8003700:	4621      	mov	r1, r4
 8003702:	4808      	ldr	r0, [pc, #32]	; (8003724 <MonitorTask+0x4c>)
 8003704:	f001 f80a 	bl	800471c <printf>

		get_active_dd_task_list();
 8003708:	f000 f838 	bl	800377c <get_active_dd_task_list>
		get_completed_dd_task_list();
 800370c:	f000 f890 	bl	8003830 <get_completed_dd_task_list>
		get_overdue_dd_task_list();
 8003710:	f000 f8e8 	bl	80038e4 <get_overdue_dd_task_list>

		vTaskDelay(100);
 8003714:	2064      	movs	r0, #100	; 0x64
 8003716:	f7fe f8a3 	bl	8001860 <vTaskDelay>
		debugPrint("\n\n*****************************************************************************\n\n");
 800371a:	e7e3      	b.n	80036e4 <MonitorTask+0xc>
 800371c:	0800530c 	.word	0x0800530c
 8003720:	08005360 	.word	0x08005360
 8003724:	080053b4 	.word	0x080053b4

08003728 <print_LL_Nodes>:
 * Input: pointer to linked list of task handles
 *
 *
 */

void print_LL_Nodes(pTaskListHandle_t LinkedList) {
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]




	if (LinkedList->head == NULL && LinkedList->tail == NULL) {
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d107      	bne.n	8003748 <print_LL_Nodes+0x20>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d103      	bne.n	8003748 <print_LL_Nodes+0x20>

		printf("\nNo Task In list!\n");
 8003740:	480c      	ldr	r0, [pc, #48]	; (8003774 <print_LL_Nodes+0x4c>)
 8003742:	f001 f97d 	bl	8004a40 <puts>

		return;
 8003746:	e012      	b.n	800376e <print_LL_Nodes+0x46>

	}


	pTaskHandle_t LL_index = LinkedList->head;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	60fb      	str	r3, [r7, #12]


	while (LL_index != NULL) {
 800374e:	e00a      	b.n	8003766 <print_LL_Nodes+0x3e>

		printf("\nTask: [%s], Deadline: [%u] \n", LL_index->task_name,
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	68d9      	ldr	r1, [r3, #12]
				(unsigned int) LL_index->absolute_deadline);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	699b      	ldr	r3, [r3, #24]
		printf("\nTask: [%s], Deadline: [%u] \n", LL_index->task_name,
 8003758:	461a      	mov	r2, r3
 800375a:	4807      	ldr	r0, [pc, #28]	; (8003778 <print_LL_Nodes+0x50>)
 800375c:	f000 ffde 	bl	800471c <printf>

		//vPortFree((void*) LL_index); // free memory block

		LL_index = LL_index->next;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	60fb      	str	r3, [r7, #12]
	while (LL_index != NULL) {
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1f1      	bne.n	8003750 <print_LL_Nodes+0x28>
		//delete_dd_task(LL_index);

	}
	return;
 800376c:	bf00      	nop

}
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	080053f8 	.word	0x080053f8
 8003778:	0800540c 	.word	0x0800540c

0800377c <get_active_dd_task_list>:
 * This function sends a message to a queue requesting the Active Task List from the DDS.
 * Once a response is received from the DDS, the function returns the list.
 *
 */

uint32_t get_active_dd_task_list(void) {
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0

	DD_Message_t msg_activeList = { Msg_ActiveList, NULL, NULL, NULL };
 8003782:	1d3b      	adds	r3, r7, #4
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	60da      	str	r2, [r3, #12]
 800378e:	611a      	str	r2, [r3, #16]
 8003790:	2332      	movs	r3, #50	; 0x32
 8003792:	80bb      	strh	r3, [r7, #4]

	if (xDDS_Msg_Queue != NULL) // Check that the queue exists
 8003794:	4b1f      	ldr	r3, [pc, #124]	; (8003814 <get_active_dd_task_list+0x98>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00f      	beq.n	80037bc <get_active_dd_task_list+0x40>
	{
		if ( xQueueSend(xDDS_Msg_Queue, &msg_activeList,portMAX_DELAY) != pdPASS) // ensure the message was sent
 800379c:	4b1d      	ldr	r3, [pc, #116]	; (8003814 <get_active_dd_task_list+0x98>)
 800379e:	6818      	ldr	r0, [r3, #0]
 80037a0:	1d39      	adds	r1, r7, #4
 80037a2:	2300      	movs	r3, #0
 80037a4:	f04f 32ff 	mov.w	r2, #4294967295
 80037a8:	f7fd fa80 	bl	8000cac <xQueueGenericSend>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d009      	beq.n	80037c6 <get_active_dd_task_list+0x4a>
		{

			printf(
 80037b2:	4819      	ldr	r0, [pc, #100]	; (8003818 <get_active_dd_task_list+0x9c>)
 80037b4:	f001 f944 	bl	8004a40 <puts>
					"\nERROR:Unable to send ACTIVE LIST message to DDS Msg Queue!\n");
			return 0;
 80037b8:	2300      	movs	r3, #0
 80037ba:	e026      	b.n	800380a <get_active_dd_task_list+0x8e>
		}
	} else {
		printf("ERROR: DD_Scheduler_Message_Queue is NULL.\n");
 80037bc:	4817      	ldr	r0, [pc, #92]	; (800381c <get_active_dd_task_list+0xa0>)
 80037be:	f001 f93f 	bl	8004a40 <puts>
		return 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	e021      	b.n	800380a <get_active_dd_task_list+0x8e>
	}

	if (xMonitor_Msg_Queue != NULL) // Check that the queue exists
 80037c6:	4b16      	ldr	r3, [pc, #88]	; (8003820 <get_active_dd_task_list+0xa4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d017      	beq.n	80037fe <get_active_dd_task_list+0x82>
	{
		if ( xQueueReceive(xMonitor_Msg_Queue,&msg_activeList,
 80037ce:	4b14      	ldr	r3, [pc, #80]	; (8003820 <get_active_dd_task_list+0xa4>)
 80037d0:	6818      	ldr	r0, [r3, #0]
 80037d2:	1d39      	adds	r1, r7, #4
 80037d4:	2300      	movs	r3, #0
 80037d6:	f04f 32ff 	mov.w	r2, #4294967295
 80037da:	f7fd fbf5 	bl	8000fc8 <xQueueGenericReceive>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d111      	bne.n	8003808 <get_active_dd_task_list+0x8c>
				portMAX_DELAY) == pdTRUE) {

			debugPrint(
 80037e4:	480f      	ldr	r0, [pc, #60]	; (8003824 <get_active_dd_task_list+0xa8>)
 80037e6:	f001 f92b 	bl	8004a40 <puts>
					"\n\n................ACTIVE TASKS ...................: \n\n");

			print_LL_Nodes(msg_activeList.pList);
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff ff9b 	bl	8003728 <print_LL_Nodes>
			debugPrint(
 80037f2:	480d      	ldr	r0, [pc, #52]	; (8003828 <get_active_dd_task_list+0xac>)
 80037f4:	f001 f924 	bl	8004a40 <puts>
					"\n\n.................................................\n\n");

			//vPortFree((void*)msg_activeList.pList);

			msg_activeList.pList = NULL;
 80037f8:	2300      	movs	r3, #0
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	e004      	b.n	8003808 <get_active_dd_task_list+0x8c>
		}
	} else {
		printf("ERROR: DD_Monitor_Message_Queue is NULL.\n");
 80037fe:	480b      	ldr	r0, [pc, #44]	; (800382c <get_active_dd_task_list+0xb0>)
 8003800:	f001 f91e 	bl	8004a40 <puts>
		return 0;
 8003804:	2300      	movs	r3, #0
 8003806:	e000      	b.n	800380a <get_active_dd_task_list+0x8e>
	}
	return 1;
 8003808:	2301      	movs	r3, #1

}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	200066d4 	.word	0x200066d4
 8003818:	0800542c 	.word	0x0800542c
 800381c:	08005468 	.word	0x08005468
 8003820:	200066c0 	.word	0x200066c0
 8003824:	08005494 	.word	0x08005494
 8003828:	080054cc 	.word	0x080054cc
 800382c:	08005504 	.word	0x08005504

08003830 <get_completed_dd_task_list>:
 *  Once a response is received from the DDS, the function returns the list.
 *
 *
 */

uint32_t get_completed_dd_task_list(void) {
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0

	DD_Message_t msg_completedList = { Msg_CompleteList, NULL, NULL, NULL };
 8003836:	1d3b      	adds	r3, r7, #4
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	605a      	str	r2, [r3, #4]
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	60da      	str	r2, [r3, #12]
 8003842:	611a      	str	r2, [r3, #16]
 8003844:	f44f 7394 	mov.w	r3, #296	; 0x128
 8003848:	80bb      	strh	r3, [r7, #4]

	if (xDDS_Msg_Queue != NULL) // Check that the queue exists
 800384a:	4b1f      	ldr	r3, [pc, #124]	; (80038c8 <get_completed_dd_task_list+0x98>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00f      	beq.n	8003872 <get_completed_dd_task_list+0x42>
	{
		if ( xQueueSend(xDDS_Msg_Queue, &msg_completedList,
 8003852:	4b1d      	ldr	r3, [pc, #116]	; (80038c8 <get_completed_dd_task_list+0x98>)
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	1d39      	adds	r1, r7, #4
 8003858:	2300      	movs	r3, #0
 800385a:	f04f 32ff 	mov.w	r2, #4294967295
 800385e:	f7fd fa25 	bl	8000cac <xQueueGenericSend>
 8003862:	4603      	mov	r3, r0
 8003864:	2b01      	cmp	r3, #1
 8003866:	d009      	beq.n	800387c <get_completed_dd_task_list+0x4c>
				portMAX_DELAY) != pdPASS) // ensure the message was sent
		{

			printf(
 8003868:	4818      	ldr	r0, [pc, #96]	; (80038cc <get_completed_dd_task_list+0x9c>)
 800386a:	f001 f8e9 	bl	8004a40 <puts>
					"\nERROR:Unable to send COMPLETED LIST message to DDS Msg Queue!\n");
			return 0;
 800386e:	2300      	movs	r3, #0
 8003870:	e026      	b.n	80038c0 <get_completed_dd_task_list+0x90>
		}
	} else {
		printf("ERROR: DD_Scheduler_Message_Queue is NULL.\n");
 8003872:	4817      	ldr	r0, [pc, #92]	; (80038d0 <get_completed_dd_task_list+0xa0>)
 8003874:	f001 f8e4 	bl	8004a40 <puts>
		return 0;
 8003878:	2300      	movs	r3, #0
 800387a:	e021      	b.n	80038c0 <get_completed_dd_task_list+0x90>
	}

	if (xMonitor_Msg_Queue != NULL) // Check that the queue exists
 800387c:	4b15      	ldr	r3, [pc, #84]	; (80038d4 <get_completed_dd_task_list+0xa4>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d017      	beq.n	80038b4 <get_completed_dd_task_list+0x84>
	{
		if ( xQueueReceive(xMonitor_Msg_Queue, &msg_completedList,
 8003884:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <get_completed_dd_task_list+0xa4>)
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	1d39      	adds	r1, r7, #4
 800388a:	2300      	movs	r3, #0
 800388c:	f04f 32ff 	mov.w	r2, #4294967295
 8003890:	f7fd fb9a 	bl	8000fc8 <xQueueGenericReceive>
 8003894:	4603      	mov	r3, r0
 8003896:	2b01      	cmp	r3, #1
 8003898:	d111      	bne.n	80038be <get_completed_dd_task_list+0x8e>
				portMAX_DELAY) == pdTRUE) {

			debugPrint(
 800389a:	480f      	ldr	r0, [pc, #60]	; (80038d8 <get_completed_dd_task_list+0xa8>)
 800389c:	f001 f8d0 	bl	8004a40 <puts>
					"\n\n................COMPLETED TASKS: .................: \n\n");

			print_LL_Nodes(msg_completedList.pList);
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff ff40 	bl	8003728 <print_LL_Nodes>

			debugPrint(
 80038a8:	480c      	ldr	r0, [pc, #48]	; (80038dc <get_completed_dd_task_list+0xac>)
 80038aa:	f001 f8c9 	bl	8004a40 <puts>
					"\n\n...................................................\n\n");

			//vPortFree((void*)msg_completedList.pList);

			msg_completedList.pList = NULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	613b      	str	r3, [r7, #16]
 80038b2:	e004      	b.n	80038be <get_completed_dd_task_list+0x8e>
		}
	} else {
		printf("ERROR: DD_Monitor_Message_Queue is NULL.\n");
 80038b4:	480a      	ldr	r0, [pc, #40]	; (80038e0 <get_completed_dd_task_list+0xb0>)
 80038b6:	f001 f8c3 	bl	8004a40 <puts>
		return 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	e000      	b.n	80038c0 <get_completed_dd_task_list+0x90>
	}
	return 1;
 80038be:	2301      	movs	r3, #1

}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	200066d4 	.word	0x200066d4
 80038cc:	08005530 	.word	0x08005530
 80038d0:	08005468 	.word	0x08005468
 80038d4:	200066c0 	.word	0x200066c0
 80038d8:	08005570 	.word	0x08005570
 80038dc:	080055a8 	.word	0x080055a8
 80038e0:	08005504 	.word	0x08005504

080038e4 <get_overdue_dd_task_list>:
 * This function sends a message to a queue requesting the Overdue Task List from the DDS.
 *  Once a response is received from the DDS, the function returns the list.
 *
 */

uint32_t get_overdue_dd_task_list(void) {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0

	DD_Message_t msg_overdueList = { Msg_OverDueList, NULL, NULL, NULL, NULL };
 80038ea:	2364      	movs	r3, #100	; 0x64
 80038ec:	80bb      	strh	r3, [r7, #4]
 80038ee:	2300      	movs	r3, #0
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	2300      	movs	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	2300      	movs	r3, #0
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	2300      	movs	r3, #0
 80038fc:	753b      	strb	r3, [r7, #20]
//
	if (xDDS_Msg_Queue != NULL) // Check that the queue exists
 80038fe:	4b1f      	ldr	r3, [pc, #124]	; (800397c <get_overdue_dd_task_list+0x98>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00f      	beq.n	8003926 <get_overdue_dd_task_list+0x42>
	{
		if ( xQueueSend(xDDS_Msg_Queue, &msg_overdueList,
 8003906:	4b1d      	ldr	r3, [pc, #116]	; (800397c <get_overdue_dd_task_list+0x98>)
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	1d39      	adds	r1, r7, #4
 800390c:	2300      	movs	r3, #0
 800390e:	f04f 32ff 	mov.w	r2, #4294967295
 8003912:	f7fd f9cb 	bl	8000cac <xQueueGenericSend>
 8003916:	4603      	mov	r3, r0
 8003918:	2b01      	cmp	r3, #1
 800391a:	d009      	beq.n	8003930 <get_overdue_dd_task_list+0x4c>
				portMAX_DELAY) != pdPASS) // ensure the message was sent
		{

			printf(
 800391c:	4818      	ldr	r0, [pc, #96]	; (8003980 <get_overdue_dd_task_list+0x9c>)
 800391e:	f001 f88f 	bl	8004a40 <puts>
					"\nERROR:Unable to send OVERDUE LIST message to DDS Msg Queue!\n");

			return 0;
 8003922:	2300      	movs	r3, #0
 8003924:	e026      	b.n	8003974 <get_overdue_dd_task_list+0x90>
		}
	} else {
		printf("ERROR: DD_Scheduler_Message_Queue is NULL.\n");
 8003926:	4817      	ldr	r0, [pc, #92]	; (8003984 <get_overdue_dd_task_list+0xa0>)
 8003928:	f001 f88a 	bl	8004a40 <puts>
		return 0;
 800392c:	2300      	movs	r3, #0
 800392e:	e021      	b.n	8003974 <get_overdue_dd_task_list+0x90>
	}

	if (xMonitor_Msg_Queue != NULL) // Check that the queue exists
 8003930:	4b15      	ldr	r3, [pc, #84]	; (8003988 <get_overdue_dd_task_list+0xa4>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d017      	beq.n	8003968 <get_overdue_dd_task_list+0x84>
	{
		if ( xQueueReceive(xMonitor_Msg_Queue, &msg_overdueList,
 8003938:	4b13      	ldr	r3, [pc, #76]	; (8003988 <get_overdue_dd_task_list+0xa4>)
 800393a:	6818      	ldr	r0, [r3, #0]
 800393c:	1d39      	adds	r1, r7, #4
 800393e:	2300      	movs	r3, #0
 8003940:	f04f 32ff 	mov.w	r2, #4294967295
 8003944:	f7fd fb40 	bl	8000fc8 <xQueueGenericReceive>
 8003948:	4603      	mov	r3, r0
 800394a:	2b01      	cmp	r3, #1
 800394c:	d111      	bne.n	8003972 <get_overdue_dd_task_list+0x8e>
				portMAX_DELAY) == pdTRUE) {

			debugPrint(
 800394e:	480f      	ldr	r0, [pc, #60]	; (800398c <get_overdue_dd_task_list+0xa8>)
 8003950:	f001 f876 	bl	8004a40 <puts>
					"\n\n................OVERDUE TASKS .................: \n\n");

			print_LL_Nodes(msg_overdueList.pList);
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff fee6 	bl	8003728 <print_LL_Nodes>

			//vPortFree((void*)msg_overdueList.pList);

			debugPrint(
 800395c:	480c      	ldr	r0, [pc, #48]	; (8003990 <get_overdue_dd_task_list+0xac>)
 800395e:	f001 f86f 	bl	8004a40 <puts>
					"\n\n................................................\n\n");

			msg_overdueList.pList = NULL;
 8003962:	2300      	movs	r3, #0
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	e004      	b.n	8003972 <get_overdue_dd_task_list+0x8e>
		}
	} else {
		printf("ERROR: DD_Monitor_Message_Queue is NULL.\n");
 8003968:	480a      	ldr	r0, [pc, #40]	; (8003994 <get_overdue_dd_task_list+0xb0>)
 800396a:	f001 f869 	bl	8004a40 <puts>
		return 0;
 800396e:	2300      	movs	r3, #0
 8003970:	e000      	b.n	8003974 <get_overdue_dd_task_list+0x90>
	}

	return 1;
 8003972:	2301      	movs	r3, #1

}
 8003974:	4618      	mov	r0, r3
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	200066d4 	.word	0x200066d4
 8003980:	080055e0 	.word	0x080055e0
 8003984:	08005468 	.word	0x08005468
 8003988:	200066c0 	.word	0x200066c0
 800398c:	08005620 	.word	0x08005620
 8003990:	08005658 	.word	0x08005658
 8003994:	08005504 	.word	0x08005504

08003998 <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 80039a2:	bf00      	nop
}
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 80039ae:	b480      	push	{r7}
 80039b0:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return 0;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
	...

080039c0 <free_NODE_From_LL>:
	vPortFree((void*) task_to_remove);

	return true;
}

void free_NODE_From_LL(pTaskListHandle_t taskList, pTaskHandle_t node) {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]

	if (node == NULL) {
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d103      	bne.n	80039d8 <free_NODE_From_LL+0x18>
		printf(
 80039d0:	4815      	ldr	r0, [pc, #84]	; (8003a28 <free_NODE_From_LL+0x68>)
 80039d2:	f001 f835 	bl	8004a40 <puts>
				"ERROR(DD_Task_Free): one of the pa1rameters passed was NULL.\n");
		return false;
 80039d6:	e023      	b.n	8003a20 <free_NODE_From_LL+0x60>
	}

	// return false if the task wasn't removed from active/overdue queue, or removed from active tasks.
	if (node->next != NULL || node->previous != NULL) {
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d103      	bne.n	80039e8 <free_NODE_From_LL+0x28>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <free_NODE_From_LL+0x30>
		printf(
 80039e8:	4810      	ldr	r0, [pc, #64]	; (8003a2c <free_NODE_From_LL+0x6c>)
 80039ea:	f001 f829 	bl	8004a40 <puts>
				"ERROR(DD_Task_Free): Forgot to remove task from list, not deleting it. Fix the code.\n");
		return false;
 80039ee:	e017      	b.n	8003a20 <free_NODE_From_LL+0x60>
	}

	pTaskHandle_t iterator = taskList->head;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	60fb      	str	r3, [r7, #12]

	while (iterator != NULL) {
 80039f6:	e00d      	b.n	8003a14 <free_NODE_From_LL+0x54>

		if (iterator->task_handle == node->task_handle) {
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d103      	bne.n	8003a0c <free_NODE_From_LL+0x4c>

			free((void*) node);
 8003a04:	6838      	ldr	r0, [r7, #0]
 8003a06:	f000 fef7 	bl	80047f8 <free>
			return;
 8003a0a:	e009      	b.n	8003a20 <free_NODE_From_LL+0x60>
		}

		if (iterator->task_handle == NULL) {
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d004      	beq.n	8003a1e <free_NODE_From_LL+0x5e>
	while (iterator != NULL) {
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1ee      	bne.n	80039f8 <free_NODE_From_LL+0x38>

			return;
		}
	}
	return;
 8003a1a:	bf00      	nop
 8003a1c:	e000      	b.n	8003a20 <free_NODE_From_LL+0x60>
			return;
 8003a1e:	bf00      	nop

}
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	0800568c 	.word	0x0800568c
 8003a2c:	080056cc 	.word	0x080056cc

08003a30 <Init_DD_TaskList>:

void Init_DD_TaskList(pTaskListHandle_t DDT_List) {
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
	// Check input parameters are not NULL

	if (DDT_List != NULL) {
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d006      	beq.n	8003a4c <Init_DD_TaskList+0x1c>

		DDT_List->head = NULL;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]
		DDT_List->tail = NULL;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	605a      	str	r2, [r3, #4]

		printf("ERROR! NULL Task List. Unable to instantiate linked list!");

	}

}
 8003a4a:	e002      	b.n	8003a52 <Init_DD_TaskList+0x22>
		printf("ERROR! NULL Task List. Unable to instantiate linked list!");
 8003a4c:	4803      	ldr	r0, [pc, #12]	; (8003a5c <Init_DD_TaskList+0x2c>)
 8003a4e:	f000 fe65 	bl	800471c <printf>
}
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	08005728 	.word	0x08005728

08003a60 <Insert_DDT_to_LL>:

// Insert task by deadline

void Insert_DDT_to_LL(pTaskHandle_t task, pTaskListHandle_t taskList) {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]

	if ((taskList->head == NULL) && (taskList->tail == NULL)) {
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d110      	bne.n	8003a94 <Insert_DDT_to_LL+0x34>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10c      	bne.n	8003a94 <Insert_DDT_to_LL+0x34>

		taskList->head = task;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	601a      	str	r2, [r3, #0]
		taskList->tail = task;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	605a      	str	r2, [r3, #4]
		vTaskPrioritySet(task->task_handle, PriorityLevel_HIGH); // Set high priority initally since it is the only task in LL
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2102      	movs	r1, #2
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fd ff35 	bl	80018fc <vTaskPrioritySet>

		return;
 8003a92:	e057      	b.n	8003b44 <Insert_DDT_to_LL+0xe4>

	}

	pTaskHandle_t LL_index = taskList->head;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	60fb      	str	r3, [r7, #12]
	uint32_t priority_index = uxTaskPriorityGet(LL_index->task_handle);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fd ff12 	bl	80018c8 <uxTaskPriorityGet>
 8003aa4:	60b8      	str	r0, [r7, #8]

	priority_index++;
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	60bb      	str	r3, [r7, #8]

	while (LL_index != NULL) {
 8003aac:	e047      	b.n	8003b3e <Insert_DDT_to_LL+0xde>

		// Check if deadline of new task is less than that of the current head of list
		if (task->absolute_deadline < LL_index->absolute_deadline) {
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699a      	ldr	r2, [r3, #24]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d218      	bcs.n	8003aec <Insert_DDT_to_LL+0x8c>

			// check if Linked list index is the head
			if (LL_index == taskList->head) {
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d102      	bne.n	8003aca <Insert_DDT_to_LL+0x6a>
				taskList->head = task; // If so, make the head of the list now the new task
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	601a      	str	r2, [r3, #0]
			}

			task->next = LL_index;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	621a      	str	r2, [r3, #32]
			task->previous = LL_index->previous;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	625a      	str	r2, [r3, #36]	; 0x24
			LL_index->previous = task;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	625a      	str	r2, [r3, #36]	; 0x24

			vTaskPrioritySet(task->task_handle, priority_index);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68b9      	ldr	r1, [r7, #8]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fd ff09 	bl	80018fc <vTaskPrioritySet>

			return;
 8003aea:	e02b      	b.n	8003b44 <Insert_DDT_to_LL+0xe4>

		} else {

			if (LL_index->next == NULL) { // reached end of list
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d118      	bne.n	8003b26 <Insert_DDT_to_LL+0xc6>
				task->next = NULL;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	621a      	str	r2, [r3, #32]
				task->previous = LL_index;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	625a      	str	r2, [r3, #36]	; 0x24
				LL_index->next = task;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	621a      	str	r2, [r3, #32]
				taskList->tail = task;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	605a      	str	r2, [r3, #4]

				vTaskPrioritySet(LL_index->task_handle, priority_index); // update the current cell's priority
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68b9      	ldr	r1, [r7, #8]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fd fef2 	bl	80018fc <vTaskPrioritySet>
				vTaskPrioritySet(task->task_handle, PriorityLevel_HIGH); // as the item is now the bottom, assign it bottom priority.
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2102      	movs	r1, #2
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fd feec 	bl	80018fc <vTaskPrioritySet>
				return;
 8003b24:	e00e      	b.n	8003b44 <Insert_DDT_to_LL+0xe4>

			}

			vTaskPrioritySet(LL_index->task_handle, priority_index);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fd fee5 	bl	80018fc <vTaskPrioritySet>
			priority_index--;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	60bb      	str	r3, [r7, #8]
			LL_index = LL_index->next;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	60fb      	str	r3, [r7, #12]
	while (LL_index != NULL) {
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1b4      	bne.n	8003aae <Insert_DDT_to_LL+0x4e>
		}

	}

}
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <remove_DDT_From_LL>:
 *
 *
 */

void remove_DDT_From_LL(pTaskListHandle_t linkedList,
		pTaskHandle_t taskToRemove, bool delete_node) {
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	4613      	mov	r3, r2
 8003b58:	71fb      	strb	r3, [r7, #7]

	if (linkedList == NULL) {
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d103      	bne.n	8003b68 <remove_DDT_From_LL+0x1c>

		printf("error... Attempting to mutate values from a null Linked list");
 8003b60:	484a      	ldr	r0, [pc, #296]	; (8003c8c <remove_DDT_From_LL+0x140>)
 8003b62:	f000 fddb 	bl	800471c <printf>

		return;
 8003b66:	e08e      	b.n	8003c86 <remove_DDT_From_LL+0x13a>

	}

	pTaskHandle_t LL_index = linkedList->head;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	617b      	str	r3, [r7, #20]

	if (LL_index == NULL) {
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d103      	bne.n	8003b7c <remove_DDT_From_LL+0x30>

		debugPrint("Unable to locate head of list\n");
 8003b74:	4846      	ldr	r0, [pc, #280]	; (8003c90 <remove_DDT_From_LL+0x144>)
 8003b76:	f000 ff63 	bl	8004a40 <puts>

		return;
 8003b7a:	e084      	b.n	8003c86 <remove_DDT_From_LL+0x13a>

	}

	//print_LL_Nodes(&linkedList);
	uint32_t priority_index = uxTaskPriorityGet(LL_index->task_handle); // grab the highest priority value
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fd fea1 	bl	80018c8 <uxTaskPriorityGet>
 8003b86:	6138      	str	r0, [r7, #16]

	while (LL_index != NULL) {
 8003b88:	e05c      	b.n	8003c44 <remove_DDT_From_LL+0xf8>

		if (LL_index->task_handle == taskToRemove->task_handle) {
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d14a      	bne.n	8003c2c <remove_DDT_From_LL+0xe0>

			// Insert Task to completed List

			if (linkedList->head->task_handle
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
					== linkedList->tail->task_handle) { // if head TH == tail TH, only one element in LL
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
			if (linkedList->head->task_handle
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d106      	bne.n	8003bb4 <remove_DDT_From_LL+0x68>

				linkedList->head = NULL;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]
				linkedList->tail = NULL;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	605a      	str	r2, [r3, #4]
 8003bb2:	e02b      	b.n	8003c0c <remove_DDT_From_LL+0xc0>
			}

			else if (taskToRemove->task_handle
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	681a      	ldr	r2, [r3, #0]
					== linkedList->head->task_handle) { // check if attempting to remove head
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
			else if (taskToRemove->task_handle
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d108      	bne.n	8003bd4 <remove_DDT_From_LL+0x88>
				linkedList->head = LL_index->next;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	6a12      	ldr	r2, [r2, #32]
 8003bc8:	601a      	str	r2, [r3, #0]
				LL_index->next->previous = NULL;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	625a      	str	r2, [r3, #36]	; 0x24
 8003bd2:	e01b      	b.n	8003c0c <remove_DDT_From_LL+0xc0>

			} else if (taskToRemove->task_handle =
					linkedList->tail->task_handle) { // Check if we are attempting to remove tail of list
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	681a      	ldr	r2, [r3, #0]
			} else if (taskToRemove->task_handle =
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d008      	beq.n	8003bf8 <remove_DDT_From_LL+0xac>

				linkedList->head = LL_index->previous;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bec:	601a      	str	r2, [r3, #0]
				LL_index->previous->next = NULL;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	621a      	str	r2, [r3, #32]
 8003bf6:	e009      	b.n	8003c0c <remove_DDT_From_LL+0xc0>

			}

			else { // Removing somewhere in the middle of the list

				LL_index->previous->next = LL_index->next;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	6a12      	ldr	r2, [r2, #32]
 8003c00:	621a      	str	r2, [r3, #32]
				LL_index->next->previous = LL_index->previous;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c0a:	625a      	str	r2, [r3, #36]	; 0x24

			}
			LL_index->previous = NULL;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	625a      	str	r2, [r3, #36]	; 0x24
			LL_index->next = NULL;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2200      	movs	r2, #0
 8003c16:	621a      	str	r2, [r3, #32]

			if (delete_node) {
 8003c18:	79fb      	ldrb	r3, [r7, #7]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d032      	beq.n	8003c84 <remove_DDT_From_LL+0x138>

				//Free_DDT_NODE(LL_index);

//				free((void*)LL_index);
				free_NODE_From_LL(&linkedList, LL_index);
 8003c1e:	f107 030c 	add.w	r3, r7, #12
 8003c22:	6979      	ldr	r1, [r7, #20]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff fecb 	bl	80039c0 <free_NODE_From_LL>
			}

			return;
 8003c2a:	e02b      	b.n	8003c84 <remove_DDT_From_LL+0x138>

		}

		priority_index--;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	613b      	str	r3, [r7, #16]

		vTaskPrioritySet(LL_index->task_handle, priority_index);
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6939      	ldr	r1, [r7, #16]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fd fe5f 	bl	80018fc <vTaskPrioritySet>

		LL_index = LL_index->next;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	617b      	str	r3, [r7, #20]
	while (LL_index != NULL) {
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d19f      	bne.n	8003b8a <remove_DDT_From_LL+0x3e>

	}

	LL_index = linkedList->tail;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	617b      	str	r3, [r7, #20]
	vTaskPrioritySet(LL_index->task_handle, PriorityLevel_HIGH);
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2102      	movs	r1, #2
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fd fe50 	bl	80018fc <vTaskPrioritySet>
	priority_index = PriorityLevel_HIGH;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	613b      	str	r3, [r7, #16]

	while (LL_index->previous != NULL) {
 8003c60:	e00b      	b.n	8003c7a <remove_DDT_From_LL+0x12e>
		priority_index++;
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	3301      	adds	r3, #1
 8003c66:	613b      	str	r3, [r7, #16]
		LL_index = LL_index->previous;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	617b      	str	r3, [r7, #20]
		vTaskPrioritySet(LL_index->task_handle, priority_index);
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6939      	ldr	r1, [r7, #16]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fd fe41 	bl	80018fc <vTaskPrioritySet>
	while (LL_index->previous != NULL) {
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1ef      	bne.n	8003c62 <remove_DDT_From_LL+0x116>
 8003c82:	e000      	b.n	8003c86 <remove_DDT_From_LL+0x13a>
			return;
 8003c84:	bf00      	nop
	}

}
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	08005764 	.word	0x08005764
 8003c90:	080057a4 	.word	0x080057a4

08003c94 <Sort_Overdue_From_Active>:

void Sort_Overdue_From_Active(pTaskListHandle_t Active_TaskList,
		pTaskListHandle_t Overdue_TaskList) {
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]

	// Check input parameters are not NULL

	if ((Active_TaskList == NULL) || (Overdue_TaskList == NULL)) {
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <Sort_Overdue_From_Active+0x16>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d103      	bne.n	8003cb2 <Sort_Overdue_From_Active+0x1e>
		printf(
 8003caa:	481f      	ldr	r0, [pc, #124]	; (8003d28 <Sort_Overdue_From_Active+0x94>)
 8003cac:	f000 fec8 	bl	8004a40 <puts>
				"ERROR(DD_TaskList_Transfer_Overdue): one of the parameters passed was NULL.\n");
		return;
 8003cb0:	e036      	b.n	8003d20 <Sort_Overdue_From_Active+0x8c>
//	if(Active_TaskList->head->next == NULL){
//		printf("WHAT THE FUUUUCK\n");
//		return;
//	}

	pTaskHandle_t LL_index = Active_TaskList->head;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	617b      	str	r3, [r7, #20]


	pTaskHandle_t tempNode;

	while (LL_index != NULL) {
 8003cb8:	e02d      	b.n	8003d16 <Sort_Overdue_From_Active+0x82>

		TickType_t currentTime = xTaskGetTickCount();
 8003cba:	f7fe f8e1 	bl	8001e80 <xTaskGetTickCount>
 8003cbe:	6138      	str	r0, [r7, #16]
//
//			free(LL_index);
//			return;
//		}

		if (LL_index->absolute_deadline < currentTime) { // Deadline has passed
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	699a      	ldr	r2, [r3, #24]
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d229      	bcs.n	8003d1e <Sort_Overdue_From_Active+0x8a>

			LL_index->task_state = OverdueState;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2216      	movs	r2, #22
 8003cce:	61da      	str	r2, [r3, #28]
//			print_LL_Nodes(&taskList_ACTIVE);




			if ((Overdue_TaskList->head == NULL)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10a      	bne.n	8003cee <Sort_Overdue_From_Active+0x5a>
					&& (Overdue_TaskList->tail == NULL)) { // Check if no items are in list
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d106      	bne.n	8003cee <Sort_Overdue_From_Active+0x5a>

				Overdue_TaskList->head = LL_index;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	601a      	str	r2, [r3, #0]
				Overdue_TaskList->tail = LL_index;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	605a      	str	r2, [r3, #4]
 8003cec:	e00b      	b.n	8003d06 <Sort_Overdue_From_Active+0x72>
			}

			else {

				tempNode = Overdue_TaskList->tail;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	60fb      	str	r3, [r7, #12]
				Overdue_TaskList->tail = LL_index;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	605a      	str	r2, [r3, #4]
				tempNode->next = LL_index;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	621a      	str	r2, [r3, #32]
				LL_index->previous = tempNode;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	625a      	str	r2, [r3, #36]	; 0x24

			}

			// Remove Node From Ative List

			remove_DDT_From_LL(&taskList_ACTIVE, LL_index, true);
 8003d06:	2201      	movs	r2, #1
 8003d08:	6979      	ldr	r1, [r7, #20]
 8003d0a:	4808      	ldr	r0, [pc, #32]	; (8003d2c <Sort_Overdue_From_Active+0x98>)
 8003d0c:	f7ff ff1e 	bl	8003b4c <remove_DDT_From_LL>
		} else {

			return;
		}

		LL_index = LL_index->next;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	617b      	str	r3, [r7, #20]
	while (LL_index != NULL) {
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1ce      	bne.n	8003cba <Sort_Overdue_From_Active+0x26>
 8003d1c:	e000      	b.n	8003d20 <Sort_Overdue_From_Active+0x8c>
			return;
 8003d1e:	bf00      	nop
//		printf("\n\OVERDUE AFTER: \n\n");
//		print_LL_Nodes(&taskList_OVERDUE);

	}

}
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	080057c4 	.word	0x080057c4
 8003d2c:	200066cc 	.word	0x200066cc

08003d30 <add_DDT_to_Completed>:

void add_DDT_to_Completed(pTaskHandle_t pTask) {
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]

	if (pTask == NULL) {
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d103      	bne.n	8003d46 <add_DDT_to_Completed+0x16>

		printf(
 8003d3e:	4826      	ldr	r0, [pc, #152]	; (8003dd8 <add_DDT_to_Completed+0xa8>)
 8003d40:	f000 fe7e 	bl	8004a40 <puts>
 8003d44:	e044      	b.n	8003dd0 <add_DDT_to_Completed+0xa0>

	}

	// Remove pTask from active list -- Dont delete the node

	pTaskListHandle_t completedList = &taskList_COMPLETED;
 8003d46:	4b25      	ldr	r3, [pc, #148]	; (8003ddc <add_DDT_to_Completed+0xac>)
 8003d48:	613b      	str	r3, [r7, #16]

	pTaskHandle_t iterator = completedList->head;
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	617b      	str	r3, [r7, #20]

	if (iterator == NULL) {
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d11b      	bne.n	8003d8e <add_DDT_to_Completed+0x5e>

		completedList->head = pTask;
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	601a      	str	r2, [r3, #0]
		completedList->tail = NULL;
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	605a      	str	r2, [r3, #4]
 8003d62:	e017      	b.n	8003d94 <add_DDT_to_Completed+0x64>

	} else {

		while (iterator != NULL) {

			if (iterator == completedList->head) {
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d102      	bne.n	8003d74 <add_DDT_to_Completed+0x44>

				completedList->head = pTask;
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	601a      	str	r2, [r3, #0]
			}

			pTask->next = iterator;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	621a      	str	r2, [r3, #32]
			pTask->previous = iterator->previous;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	625a      	str	r2, [r3, #36]	; 0x24
			iterator->previous = pTask;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	625a      	str	r2, [r3, #36]	; 0x24

			iterator = iterator->next;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	617b      	str	r3, [r7, #20]
		while (iterator != NULL) {
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e7      	bne.n	8003d64 <add_DDT_to_Completed+0x34>

		}

	}

	pTaskHandle_t taskExists_ACTIVE = task_exists_in_List(&taskList_ACTIVE,
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4812      	ldr	r0, [pc, #72]	; (8003de0 <add_DDT_to_Completed+0xb0>)
 8003d98:	f7ff faf4 	bl	8003384 <task_exists_in_List>
 8003d9c:	60f8      	str	r0, [r7, #12]
			pTask);

	pTaskHandle_t taskExists_OVERDUE = task_exists_in_List(&taskList_OVERDUE,
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	4810      	ldr	r0, [pc, #64]	; (8003de4 <add_DDT_to_Completed+0xb4>)
 8003da2:	f7ff faef 	bl	8003384 <task_exists_in_List>
 8003da6:	4603      	mov	r3, r0
 8003da8:	60bb      	str	r3, [r7, #8]
			pTask);

	if (taskExists_ACTIVE != NULL) {
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d005      	beq.n	8003dbc <add_DDT_to_Completed+0x8c>
		remove_DDT_From_LL(&taskList_ACTIVE, pTask, false);
 8003db0:	2200      	movs	r2, #0
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	480a      	ldr	r0, [pc, #40]	; (8003de0 <add_DDT_to_Completed+0xb0>)
 8003db6:	f7ff fec9 	bl	8003b4c <remove_DDT_From_LL>
 8003dba:	e009      	b.n	8003dd0 <add_DDT_to_Completed+0xa0>

	}

	else if (taskExists_OVERDUE != NULL) {
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d006      	beq.n	8003dd0 <add_DDT_to_Completed+0xa0>

		remove_DDT_From_LL(&taskExists_OVERDUE, pTask, false);
 8003dc2:	f107 0308 	add.w	r3, r7, #8
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff febe 	bl	8003b4c <remove_DDT_From_LL>

	}

}
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	08005810 	.word	0x08005810
 8003ddc:	200066d8 	.word	0x200066d8
 8003de0:	200066cc 	.word	0x200066cc
 8003de4:	200066e8 	.word	0x200066e8

08003de8 <Create_DD_Task_Node>:
 *  	1	                       100                          	500
 *  	2	                       200                              500
 *  	3	                       200                              500
 */

pTaskHandle_t Create_DD_Task_Node(void) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
	pTaskHandle_t taskNode = (pTaskHandle_t) pvPortMalloc(sizeof(dd_task_t));
 8003dee:	2028      	movs	r0, #40	; 0x28
 8003df0:	f7fc fcb6 	bl	8000760 <pvPortMalloc>
 8003df4:	6078      	str	r0, [r7, #4]

	taskNode->task_handle = NULL;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
	taskNode->task_function = NULL;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	605a      	str	r2, [r3, #4]
	taskNode->task_name = "";
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a0c      	ldr	r2, [pc, #48]	; (8003e38 <Create_DD_Task_Node+0x50>)
 8003e06:	60da      	str	r2, [r3, #12]
	taskNode->task_type = DD_PERIODIC;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	721a      	strb	r2, [r3, #8]
	taskNode->release_time = 0;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	611a      	str	r2, [r3, #16]
	taskNode->absolute_deadline = 0;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	619a      	str	r2, [r3, #24]
	taskNode->task_state = 0;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	61da      	str	r2, [r3, #28]
	taskNode->next = NULL;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	621a      	str	r2, [r3, #32]
	taskNode->previous = NULL;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	625a      	str	r2, [r3, #36]	; 0x24

	return taskNode;
 8003e2c:	687b      	ldr	r3, [r7, #4]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	08005850 	.word	0x08005850

08003e3c <Periodic_Task_Routine>:
 *
 *

 */

void Periodic_Task_Routine(void *pvParameters) {
 8003e3c:	b5b0      	push	{r4, r5, r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]

	pTaskHandle_t taskNode = (pTaskHandle_t) pvParameters;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	617b      	str	r3, [r7, #20]

	TickType_t currentTime = 0;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60bb      	str	r3, [r7, #8]
	TickType_t lastTick = 0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	61fb      	str	r3, [r7, #28]
	TickType_t relativeDeadline = 0;
 8003e50:	2300      	movs	r3, #0
 8003e52:	613b      	str	r3, [r7, #16]
	TickType_t absDeadline = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]

	uint32_t tickCounter = 0;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	61bb      	str	r3, [r7, #24]

	while (1) {

		if (taskNode->task_state == ActiveState) {
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d1fb      	bne.n	8003e5c <Periodic_Task_Routine+0x20>

			currentTime = xTaskGetTickCount();
 8003e64:	f7fe f80c 	bl	8001e80 <xTaskGetTickCount>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	60bb      	str	r3, [r7, #8]

			absDeadline = taskNode->absolute_deadline;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	60fb      	str	r3, [r7, #12]

			debugPrint(
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	68dc      	ldr	r4, [r3, #12]
 8003e76:	68bd      	ldr	r5, [r7, #8]
					"\n|Executing Task [%s] | Time = %u | Priority = %u | \n",
					taskNode->task_name, (unsigned int) currentTime,
					(unsigned int) uxTaskPriorityGet( NULL));
 8003e78:	2000      	movs	r0, #0
 8003e7a:	f7fd fd25 	bl	80018c8 <uxTaskPriorityGet>
 8003e7e:	4603      	mov	r3, r0
			debugPrint(
 8003e80:	462a      	mov	r2, r5
 8003e82:	4621      	mov	r1, r4
 8003e84:	4816      	ldr	r0, [pc, #88]	; (8003ee0 <Periodic_Task_Routine+0xa4>)
 8003e86:	f000 fc49 	bl	800471c <printf>

			lastTick = currentTime;
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	61fb      	str	r3, [r7, #28]

			tickCounter = 0;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61bb      	str	r3, [r7, #24]

			// Simulating execution time.
			while (tickCounter < taskNode->execution_time) {
 8003e92:	e00c      	b.n	8003eae <Periodic_Task_Routine+0x72>

				currentTime = xTaskGetTickCount();
 8003e94:	f7fd fff4 	bl	8001e80 <xTaskGetTickCount>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	60bb      	str	r3, [r7, #8]

				if (currentTime != lastTick) {
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d002      	beq.n	8003eaa <Periodic_Task_Routine+0x6e>

					tickCounter++;
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	61bb      	str	r3, [r7, #24]

				}

				lastTick = currentTime;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	61fb      	str	r3, [r7, #28]
			while (tickCounter < taskNode->execution_time) {
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	695a      	ldr	r2, [r3, #20]
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d8ed      	bhi.n	8003e94 <Periodic_Task_Routine+0x58>
			}

			relativeDeadline = absDeadline - currentTime;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	613b      	str	r3, [r7, #16]

			vTaskDelayUntil(&currentTime, relativeDeadline);
 8003ec0:	f107 0308 	add.w	r3, r7, #8
 8003ec4:	6939      	ldr	r1, [r7, #16]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fd fc50 	bl	800176c <vTaskDelayUntil>

			taskNode->next = NULL;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	621a      	str	r2, [r3, #32]
			taskNode->previous = NULL;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	625a      	str	r2, [r3, #36]	; 0x24
			complete_dd_task(taskNode);
 8003ed8:	6978      	ldr	r0, [r7, #20]
 8003eda:	f7ff fb61 	bl	80035a0 <complete_dd_task>
		if (taskNode->task_state == ActiveState) {
 8003ede:	e7bd      	b.n	8003e5c <Periodic_Task_Routine+0x20>
 8003ee0:	08005854 	.word	0x08005854

08003ee4 <Task1_Generator>:
 *
 *
 *
 */

void Task1_Generator(void *pvParameters) {
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]

	pTaskHandle_t newTask = Create_DD_Task_Node();
 8003eec:	f7ff ff7c 	bl	8003de8 <Create_DD_Task_Node>
 8003ef0:	6178      	str	r0, [r7, #20]

	TickType_t deadline = task1_PERIOD;
 8003ef2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003ef6:	613b      	str	r3, [r7, #16]

	newTask->task_function = Periodic_Task_Routine;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	4a0f      	ldr	r2, [pc, #60]	; (8003f38 <Task1_Generator+0x54>)
 8003efc:	605a      	str	r2, [r3, #4]
	newTask->task_name = "Task1";
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	4a0e      	ldr	r2, [pc, #56]	; (8003f3c <Task1_Generator+0x58>)
 8003f02:	60da      	str	r2, [r3, #12]
	newTask->task_type = DD_PERIODIC;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2200      	movs	r2, #0
 8003f08:	721a      	strb	r2, [r3, #8]
	newTask->execution_time = task1_ET;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f10:	615a      	str	r2, [r3, #20]

	TickType_t currentTime = xTaskGetTickCount();
 8003f12:	f7fd ffb5 	bl	8001e80 <xTaskGetTickCount>
 8003f16:	60f8      	str	r0, [r7, #12]
	newTask->release_time = currentTime;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	611a      	str	r2, [r3, #16]
	newTask->absolute_deadline = currentTime + deadline;
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	441a      	add	r2, r3
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	619a      	str	r2, [r3, #24]

	while (1) {

		create_dd_task(newTask);
 8003f28:	6978      	ldr	r0, [r7, #20]
 8003f2a:	f7ff fa51 	bl	80033d0 <create_dd_task>
		vTaskDelay(deadline);
 8003f2e:	6938      	ldr	r0, [r7, #16]
 8003f30:	f7fd fc96 	bl	8001860 <vTaskDelay>
		create_dd_task(newTask);
 8003f34:	e7f8      	b.n	8003f28 <Task1_Generator+0x44>
 8003f36:	bf00      	nop
 8003f38:	08003e3d 	.word	0x08003e3d
 8003f3c:	0800588c 	.word	0x0800588c

08003f40 <Task2_Generator>:

	}
}

void Task2_Generator(void *pvParameters) {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]

	TickType_t deadline = task2_PERIOD;
 8003f48:	f241 7370 	movw	r3, #6000	; 0x1770
 8003f4c:	617b      	str	r3, [r7, #20]
	pTaskHandle_t newTask = Create_DD_Task_Node();
 8003f4e:	f7ff ff4b 	bl	8003de8 <Create_DD_Task_Node>
 8003f52:	6138      	str	r0, [r7, #16]

	newTask->task_function = Periodic_Task_Routine;
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4a0f      	ldr	r2, [pc, #60]	; (8003f94 <Task2_Generator+0x54>)
 8003f58:	605a      	str	r2, [r3, #4]
	newTask->task_name = "Task2";
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	4a0e      	ldr	r2, [pc, #56]	; (8003f98 <Task2_Generator+0x58>)
 8003f5e:	60da      	str	r2, [r3, #12]
	newTask->task_type = DD_PERIODIC;
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	2200      	movs	r2, #0
 8003f64:	721a      	strb	r2, [r3, #8]
	newTask->execution_time = task2_ET;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f6c:	615a      	str	r2, [r3, #20]

	TickType_t currentTime = xTaskGetTickCount();
 8003f6e:	f7fd ff87 	bl	8001e80 <xTaskGetTickCount>
 8003f72:	60f8      	str	r0, [r7, #12]
	newTask->release_time = currentTime;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	611a      	str	r2, [r3, #16]
	newTask->absolute_deadline = currentTime + deadline;
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	441a      	add	r2, r3
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	619a      	str	r2, [r3, #24]

	while (1) {

		create_dd_task(newTask);
 8003f84:	6938      	ldr	r0, [r7, #16]
 8003f86:	f7ff fa23 	bl	80033d0 <create_dd_task>

		vTaskDelay(deadline);
 8003f8a:	6978      	ldr	r0, [r7, #20]
 8003f8c:	f7fd fc68 	bl	8001860 <vTaskDelay>
		create_dd_task(newTask);
 8003f90:	e7f8      	b.n	8003f84 <Task2_Generator+0x44>
 8003f92:	bf00      	nop
 8003f94:	08003e3d 	.word	0x08003e3d
 8003f98:	08005894 	.word	0x08005894

08003f9c <Task3_Generator>:

	}
}

void Task3_Generator(void *pvParameters) {
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
	TickType_t deadline = task3_PERIOD;
 8003fa4:	f242 3328 	movw	r3, #9000	; 0x2328
 8003fa8:	617b      	str	r3, [r7, #20]
	pTaskHandle_t newTask = Create_DD_Task_Node();
 8003faa:	f7ff ff1d 	bl	8003de8 <Create_DD_Task_Node>
 8003fae:	6138      	str	r0, [r7, #16]

	newTask->task_function = Periodic_Task_Routine;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	4a0f      	ldr	r2, [pc, #60]	; (8003ff0 <Task3_Generator+0x54>)
 8003fb4:	605a      	str	r2, [r3, #4]
	newTask->task_name = "Task3";
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	4a0e      	ldr	r2, [pc, #56]	; (8003ff4 <Task3_Generator+0x58>)
 8003fba:	60da      	str	r2, [r3, #12]
	newTask->task_type = DD_PERIODIC;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	721a      	strb	r2, [r3, #8]
	newTask->execution_time = task3_ET;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fc8:	615a      	str	r2, [r3, #20]

	TickType_t currentTime = xTaskGetTickCount();
 8003fca:	f7fd ff59 	bl	8001e80 <xTaskGetTickCount>
 8003fce:	60f8      	str	r0, [r7, #12]
	newTask->release_time = currentTime;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	611a      	str	r2, [r3, #16]
	newTask->absolute_deadline = currentTime + deadline;
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	441a      	add	r2, r3
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	619a      	str	r2, [r3, #24]

	while (1) {

		create_dd_task(newTask);
 8003fe0:	6938      	ldr	r0, [r7, #16]
 8003fe2:	f7ff f9f5 	bl	80033d0 <create_dd_task>

		vTaskDelay(deadline);
 8003fe6:	6978      	ldr	r0, [r7, #20]
 8003fe8:	f7fd fc3a 	bl	8001860 <vTaskDelay>
		create_dd_task(newTask);
 8003fec:	e7f8      	b.n	8003fe0 <Task3_Generator+0x44>
 8003fee:	bf00      	nop
 8003ff0:	08003e3d 	.word	0x08003e3d
 8003ff4:	0800589c 	.word	0x0800589c

08003ff8 <Read_User_Defined_Tasks>:
TaskHandle_t taskHandle2;
TaskHandle_t taskHandle3;



void Read_User_Defined_Tasks(void){
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af02      	add	r7, sp, #8

	xTaskCreate(Task1_Generator,"_Task_1", configMINIMAL_STACK_SIZE, NULL, PriorityLevel_MED, &taskHandle1);
 8003ffe:	4b10      	ldr	r3, [pc, #64]	; (8004040 <Read_User_Defined_Tasks+0x48>)
 8004000:	9301      	str	r3, [sp, #4]
 8004002:	2301      	movs	r3, #1
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	2300      	movs	r3, #0
 8004008:	2282      	movs	r2, #130	; 0x82
 800400a:	490e      	ldr	r1, [pc, #56]	; (8004044 <Read_User_Defined_Tasks+0x4c>)
 800400c:	480e      	ldr	r0, [pc, #56]	; (8004048 <Read_User_Defined_Tasks+0x50>)
 800400e:	f7fd fa7b 	bl	8001508 <xTaskCreate>
	xTaskCreate(Task2_Generator,"_Task_2", configMINIMAL_STACK_SIZE, NULL, PriorityLevel_MED, &taskHandle2);
 8004012:	4b0e      	ldr	r3, [pc, #56]	; (800404c <Read_User_Defined_Tasks+0x54>)
 8004014:	9301      	str	r3, [sp, #4]
 8004016:	2301      	movs	r3, #1
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	2300      	movs	r3, #0
 800401c:	2282      	movs	r2, #130	; 0x82
 800401e:	490c      	ldr	r1, [pc, #48]	; (8004050 <Read_User_Defined_Tasks+0x58>)
 8004020:	480c      	ldr	r0, [pc, #48]	; (8004054 <Read_User_Defined_Tasks+0x5c>)
 8004022:	f7fd fa71 	bl	8001508 <xTaskCreate>
	xTaskCreate(Task3_Generator,"_Task_3", configMINIMAL_STACK_SIZE, NULL, PriorityLevel_MED, &taskHandle3);
 8004026:	4b0c      	ldr	r3, [pc, #48]	; (8004058 <Read_User_Defined_Tasks+0x60>)
 8004028:	9301      	str	r3, [sp, #4]
 800402a:	2301      	movs	r3, #1
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	2300      	movs	r3, #0
 8004030:	2282      	movs	r2, #130	; 0x82
 8004032:	490a      	ldr	r1, [pc, #40]	; (800405c <Read_User_Defined_Tasks+0x64>)
 8004034:	480a      	ldr	r0, [pc, #40]	; (8004060 <Read_User_Defined_Tasks+0x68>)
 8004036:	f7fd fa67 	bl	8001508 <xTaskCreate>

}
 800403a:	bf00      	nop
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	200066e0 	.word	0x200066e0
 8004044:	080058a4 	.word	0x080058a4
 8004048:	08003ee5 	.word	0x08003ee5
 800404c:	200066c8 	.word	0x200066c8
 8004050:	080058ac 	.word	0x080058ac
 8004054:	08003f41 	.word	0x08003f41
 8004058:	200066c4 	.word	0x200066c4
 800405c:	080058b4 	.word	0x080058b4
 8004060:	08003f9d 	.word	0x08003f9d

08004064 <main>:



int main(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0

	DDS_Init(); //Initalize DDS
 8004068:	f7ff fadc 	bl	8003624 <DDS_Init>
	Read_User_Defined_Tasks(); // Read User defined task
 800406c:	f7ff ffc4 	bl	8003ff8 <Read_User_Defined_Tasks>
    vTaskStartScheduler(); // Start Scheduler
 8004070:	f7fd fe10 	bl	8001c94 <vTaskStartScheduler>
 8004074:	2300      	movs	r3, #0

}
 8004076:	4618      	mov	r0, r3
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <vApplicationMallocFailedHook>:




void vApplicationMallocFailedHook( void )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software 
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

	printf("MALLOC FAILED DIPSHIT\n");
 8004080:	4801      	ldr	r0, [pc, #4]	; (8004088 <vApplicationMallocFailedHook+0xc>)
 8004082:	f000 fcdd 	bl	8004a40 <puts>
	for( ;; );
 8004086:	e7fe      	b.n	8004086 <vApplicationMallocFailedHook+0xa>
 8004088:	080058bc 	.word	0x080058bc

0800408c <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected.  pxCurrentTCB can be
	inspected in the debugger if the task name passed into this function is
	corrupt. */

	printf("STATIC STACK OVERFLOW DIPSHIT!\n");
 8004096:	4802      	ldr	r0, [pc, #8]	; (80040a0 <vApplicationStackOverflowHook+0x14>)
 8004098:	f000 fcd2 	bl	8004a40 <puts>
	for( ;; );
 800409c:	e7fe      	b.n	800409c <vApplicationStackOverflowHook+0x10>
 800409e:	bf00      	nop
 80040a0:	080058d4 	.word	0x080058d4

080040a4 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
	FreeRTOSConfig.h.

	This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amount of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 80040aa:	f7fc fc77 	bl	800099c <xPortGetFreeHeapSize>
 80040ae:	4603      	mov	r3, r0
 80040b0:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 80040b2:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 80040b4:	bf00      	nop
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80040bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80040be:	e003      	b.n	80040c8 <LoopCopyDataInit>

080040c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80040c0:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80040c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80040c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80040c6:	3104      	adds	r1, #4

080040c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80040c8:	480a      	ldr	r0, [pc, #40]	; (80040f4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80040ca:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80040cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80040ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80040d0:	d3f6      	bcc.n	80040c0 <CopyDataInit>
  ldr  r2, =_sbss
 80040d2:	4a0a      	ldr	r2, [pc, #40]	; (80040fc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80040d4:	e002      	b.n	80040dc <LoopFillZerobss>

080040d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80040d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80040d8:	f842 3b04 	str.w	r3, [r2], #4

080040dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80040dc:	4b08      	ldr	r3, [pc, #32]	; (8004100 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80040de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80040e0:	d3f9      	bcc.n	80040d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80040e2:	f000 f8f3 	bl	80042cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040e6:	f000 fb63 	bl	80047b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040ea:	f7ff ffbb 	bl	8004064 <main>
  bx  lr    
 80040ee:	4770      	bx	lr
  ldr  r3, =_sidata
 80040f0:	08005978 	.word	0x08005978
  ldr  r0, =_sdata
 80040f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80040f8:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 80040fc:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8004100:	200066f4 	.word	0x200066f4

08004104 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004104:	e7fe      	b.n	8004104 <ADC_IRQHandler>

08004106 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8004106:	b480      	push	{r7}
 8004108:	af00      	add	r7, sp, #0
}
 800410a:	bf00      	nop
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8004118:	e7fe      	b.n	8004118 <HardFault_Handler+0x4>

0800411a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800411a:	b480      	push	{r7}
 800411c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800411e:	e7fe      	b.n	800411e <MemManage_Handler+0x4>

08004120 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8004124:	e7fe      	b.n	8004124 <BusFault_Handler+0x4>

08004126 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8004126:	b480      	push	{r7}
 8004128:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800412a:	e7fe      	b.n	800412a <UsageFault_Handler+0x4>

0800412c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
}
 8004130:	bf00      	nop
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
	...

0800413c <ITM_SendChar>:

    \param [in]     ch  Character to transmit
    \return             Character to transmit
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8004144:	4b13      	ldr	r3, [pc, #76]	; (8004194 <ITM_SendChar+0x58>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d01a      	beq.n	8004186 <ITM_SendChar+0x4a>
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8004150:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004154:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004158:	f003 0301 	and.w	r3, r3, #1
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 800415c:	2b00      	cmp	r3, #0
 800415e:	d012      	beq.n	8004186 <ITM_SendChar+0x4a>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 8004160:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004164:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004168:	f003 0301 	and.w	r3, r3, #1
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <ITM_SendChar+0x4a>
  {
    while (ITM->PORT[0].u32 == 0);
 8004170:	bf00      	nop
 8004172:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0fa      	beq.n	8004172 <ITM_SendChar+0x36>
    ITM->PORT[0].u8 = (uint8_t) ch;
 800417c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004186:	687b      	ldr	r3, [r7, #4]
}
 8004188:	4618      	mov	r0, r3
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	e000edf0 	.word	0xe000edf0

08004198 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int file, char *ptr, int len)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 /* Implement your write code here, this is used by
puts and printf for example */
 int i=0;
 80041a4:	2300      	movs	r3, #0
 80041a6:	617b      	str	r3, [r7, #20]
 for(i=0 ; i<len ; i++)
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	e009      	b.n	80041c2 <_write+0x2a>
	 ITM_SendChar((*ptr++));
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	1c5a      	adds	r2, r3, #1
 80041b2:	60ba      	str	r2, [r7, #8]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff ffc0 	bl	800413c <ITM_SendChar>
 for(i=0 ; i<len ; i++)
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	3301      	adds	r3, #1
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	dbf1      	blt.n	80041ae <_write+0x16>
 return len;
 80041ca:	687b      	ldr	r3, [r7, #4]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <_sbrk>:


void * _sbrk(int32_t incr)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 80041dc:	4b0b      	ldr	r3, [pc, #44]	; (800420c <_sbrk+0x38>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d102      	bne.n	80041ea <_sbrk+0x16>
		heap_end = & end;
 80041e4:	4b09      	ldr	r3, [pc, #36]	; (800420c <_sbrk+0x38>)
 80041e6:	4a0a      	ldr	r2, [pc, #40]	; (8004210 <_sbrk+0x3c>)
 80041e8:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 80041ea:	4b08      	ldr	r3, [pc, #32]	; (800420c <_sbrk+0x38>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <_sbrk+0x38>)
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4413      	add	r3, r2
 80041f8:	4a04      	ldr	r2, [pc, #16]	; (800420c <_sbrk+0x38>)
 80041fa:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 80041fc:	68fb      	ldr	r3, [r7, #12]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	200065f8 	.word	0x200065f8
 8004210:	200066f4 	.word	0x200066f4

08004214 <_close>:

int _close(int32_t file)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 800421c:	4b05      	ldr	r3, [pc, #20]	; (8004234 <_close+0x20>)
 800421e:	2258      	movs	r2, #88	; 0x58
 8004220:	601a      	str	r2, [r3, #0]
	return -1;
 8004222:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004226:	4618      	mov	r0, r3
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	200066f0 	.word	0x200066f0

08004238 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 8004242:	4b05      	ldr	r3, [pc, #20]	; (8004258 <_fstat+0x20>)
 8004244:	2258      	movs	r2, #88	; 0x58
 8004246:	601a      	str	r2, [r3, #0]
	return -1;
 8004248:	f04f 33ff 	mov.w	r3, #4294967295
}
 800424c:	4618      	mov	r0, r3
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	200066f0 	.word	0x200066f0

0800425c <_isatty>:

int _isatty(int32_t file)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8004264:	4b04      	ldr	r3, [pc, #16]	; (8004278 <_isatty+0x1c>)
 8004266:	2258      	movs	r2, #88	; 0x58
 8004268:	601a      	str	r2, [r3, #0]
	return 0;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	200066f0 	.word	0x200066f0

0800427c <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8004288:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <_lseek+0x24>)
 800428a:	2258      	movs	r2, #88	; 0x58
 800428c:	601a      	str	r2, [r3, #0]
	return -1;
 800428e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	200066f0 	.word	0x200066f0

080042a4 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 80042b0:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <_read+0x24>)
 80042b2:	2258      	movs	r2, #88	; 0x58
 80042b4:	601a      	str	r2, [r3, #0]
	return -1;
 80042b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	200066f0 	.word	0x200066f0

080042cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042d0:	4a16      	ldr	r2, [pc, #88]	; (800432c <SystemInit+0x60>)
 80042d2:	4b16      	ldr	r3, [pc, #88]	; (800432c <SystemInit+0x60>)
 80042d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80042e0:	4a13      	ldr	r2, [pc, #76]	; (8004330 <SystemInit+0x64>)
 80042e2:	4b13      	ldr	r3, [pc, #76]	; (8004330 <SystemInit+0x64>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f043 0301 	orr.w	r3, r3, #1
 80042ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80042ec:	4b10      	ldr	r3, [pc, #64]	; (8004330 <SystemInit+0x64>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80042f2:	4a0f      	ldr	r2, [pc, #60]	; (8004330 <SystemInit+0x64>)
 80042f4:	4b0e      	ldr	r3, [pc, #56]	; (8004330 <SystemInit+0x64>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80042fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004300:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004302:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <SystemInit+0x64>)
 8004304:	4a0b      	ldr	r2, [pc, #44]	; (8004334 <SystemInit+0x68>)
 8004306:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004308:	4a09      	ldr	r2, [pc, #36]	; (8004330 <SystemInit+0x64>)
 800430a:	4b09      	ldr	r3, [pc, #36]	; (8004330 <SystemInit+0x64>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004312:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004314:	4b06      	ldr	r3, [pc, #24]	; (8004330 <SystemInit+0x64>)
 8004316:	2200      	movs	r2, #0
 8004318:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800431a:	f000 f80d 	bl	8004338 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800431e:	4b03      	ldr	r3, [pc, #12]	; (800432c <SystemInit+0x60>)
 8004320:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004324:	609a      	str	r2, [r3, #8]
#endif
}
 8004326:	bf00      	nop
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	e000ed00 	.word	0xe000ed00
 8004330:	40023800 	.word	0x40023800
 8004334:	24003010 	.word	0x24003010

08004338 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	607b      	str	r3, [r7, #4]
 8004342:	2300      	movs	r3, #0
 8004344:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8004346:	4a36      	ldr	r2, [pc, #216]	; (8004420 <SetSysClock+0xe8>)
 8004348:	4b35      	ldr	r3, [pc, #212]	; (8004420 <SetSysClock+0xe8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004350:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004352:	4b33      	ldr	r3, [pc, #204]	; (8004420 <SetSysClock+0xe8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3301      	adds	r3, #1
 8004360:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d103      	bne.n	8004370 <SetSysClock+0x38>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800436e:	d1f0      	bne.n	8004352 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004370:	4b2b      	ldr	r3, [pc, #172]	; (8004420 <SetSysClock+0xe8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800437c:	2301      	movs	r3, #1
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	e001      	b.n	8004386 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8004382:	2300      	movs	r3, #0
 8004384:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d142      	bne.n	8004412 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800438c:	4a24      	ldr	r2, [pc, #144]	; (8004420 <SetSysClock+0xe8>)
 800438e:	4b24      	ldr	r3, [pc, #144]	; (8004420 <SetSysClock+0xe8>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004396:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8004398:	4a22      	ldr	r2, [pc, #136]	; (8004424 <SetSysClock+0xec>)
 800439a:	4b22      	ldr	r3, [pc, #136]	; (8004424 <SetSysClock+0xec>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043a2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80043a4:	4a1e      	ldr	r2, [pc, #120]	; (8004420 <SetSysClock+0xe8>)
 80043a6:	4b1e      	ldr	r3, [pc, #120]	; (8004420 <SetSysClock+0xe8>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80043ac:	4a1c      	ldr	r2, [pc, #112]	; (8004420 <SetSysClock+0xe8>)
 80043ae:	4b1c      	ldr	r3, [pc, #112]	; (8004420 <SetSysClock+0xe8>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80043b8:	4a19      	ldr	r2, [pc, #100]	; (8004420 <SetSysClock+0xe8>)
 80043ba:	4b19      	ldr	r3, [pc, #100]	; (8004420 <SetSysClock+0xe8>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80043c2:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80043c4:	4b16      	ldr	r3, [pc, #88]	; (8004420 <SetSysClock+0xe8>)
 80043c6:	4a18      	ldr	r2, [pc, #96]	; (8004428 <SetSysClock+0xf0>)
 80043c8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80043ca:	4a15      	ldr	r2, [pc, #84]	; (8004420 <SetSysClock+0xe8>)
 80043cc:	4b14      	ldr	r3, [pc, #80]	; (8004420 <SetSysClock+0xe8>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043d4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80043d6:	bf00      	nop
 80043d8:	4b11      	ldr	r3, [pc, #68]	; (8004420 <SetSysClock+0xe8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0f9      	beq.n	80043d8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80043e4:	4b11      	ldr	r3, [pc, #68]	; (800442c <SetSysClock+0xf4>)
 80043e6:	f240 6205 	movw	r2, #1541	; 0x605
 80043ea:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80043ec:	4a0c      	ldr	r2, [pc, #48]	; (8004420 <SetSysClock+0xe8>)
 80043ee:	4b0c      	ldr	r3, [pc, #48]	; (8004420 <SetSysClock+0xe8>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f023 0303 	bic.w	r3, r3, #3
 80043f6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80043f8:	4a09      	ldr	r2, [pc, #36]	; (8004420 <SetSysClock+0xe8>)
 80043fa:	4b09      	ldr	r3, [pc, #36]	; (8004420 <SetSysClock+0xe8>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f043 0302 	orr.w	r3, r3, #2
 8004402:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8004404:	bf00      	nop
 8004406:	4b06      	ldr	r3, [pc, #24]	; (8004420 <SetSysClock+0xe8>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 030c 	and.w	r3, r3, #12
 800440e:	2b08      	cmp	r3, #8
 8004410:	d1f9      	bne.n	8004406 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40023800 	.word	0x40023800
 8004424:	40007000 	.word	0x40007000
 8004428:	07405408 	.word	0x07405408
 800442c:	40023c00 	.word	0x40023c00

08004430 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
	int div = 1;
 800443c:	2301      	movs	r3, #1
 800443e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8004440:	e004      	b.n	800444c <ts_itoa+0x1c>
		div *= base;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	fb02 f303 	mul.w	r3, r2, r3
 800444a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	fbb2 f2f3 	udiv	r2, r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	429a      	cmp	r2, r3
 8004458:	d2f3      	bcs.n	8004442 <ts_itoa+0x12>

	while (div != 0)
 800445a:	e029      	b.n	80044b0 <ts_itoa+0x80>
	{
		int num = d/div;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	fbb2 f3f3 	udiv	r3, r2, r3
 8004464:	613b      	str	r3, [r7, #16]
		d = d%div;
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	fbb3 f1f2 	udiv	r1, r3, r2
 800446e:	fb02 f201 	mul.w	r2, r2, r1
 8004472:	1a9b      	subs	r3, r3, r2
 8004474:	60bb      	str	r3, [r7, #8]
		div /= base;
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	fb92 f3f3 	sdiv	r3, r2, r3
 800447e:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	2b09      	cmp	r3, #9
 8004484:	dd0a      	ble.n	800449c <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	1c59      	adds	r1, r3, #1
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	6011      	str	r1, [r2, #0]
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	3237      	adds	r2, #55	; 0x37
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	701a      	strb	r2, [r3, #0]
 800449a:	e009      	b.n	80044b0 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	1c59      	adds	r1, r3, #1
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	6011      	str	r1, [r2, #0]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	b2d2      	uxtb	r2, r2
 80044aa:	3230      	adds	r2, #48	; 0x30
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1d2      	bne.n	800445c <ts_itoa+0x2c>
	}
}
 80044b6:	bf00      	nop
 80044b8:	371c      	adds	r7, #28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b088      	sub	sp, #32
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80044d2:	e07d      	b.n	80045d0 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b25      	cmp	r3, #37	; 0x25
 80044da:	d171      	bne.n	80045c0 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	3301      	adds	r3, #1
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	2b64      	cmp	r3, #100	; 0x64
 80044e8:	d01e      	beq.n	8004528 <ts_formatstring+0x66>
 80044ea:	2b64      	cmp	r3, #100	; 0x64
 80044ec:	dc06      	bgt.n	80044fc <ts_formatstring+0x3a>
 80044ee:	2b58      	cmp	r3, #88	; 0x58
 80044f0:	d050      	beq.n	8004594 <ts_formatstring+0xd2>
 80044f2:	2b63      	cmp	r3, #99	; 0x63
 80044f4:	d00e      	beq.n	8004514 <ts_formatstring+0x52>
 80044f6:	2b25      	cmp	r3, #37	; 0x25
 80044f8:	d058      	beq.n	80045ac <ts_formatstring+0xea>
 80044fa:	e05d      	b.n	80045b8 <ts_formatstring+0xf6>
 80044fc:	2b73      	cmp	r3, #115	; 0x73
 80044fe:	d02b      	beq.n	8004558 <ts_formatstring+0x96>
 8004500:	2b73      	cmp	r3, #115	; 0x73
 8004502:	dc02      	bgt.n	800450a <ts_formatstring+0x48>
 8004504:	2b69      	cmp	r3, #105	; 0x69
 8004506:	d00f      	beq.n	8004528 <ts_formatstring+0x66>
 8004508:	e056      	b.n	80045b8 <ts_formatstring+0xf6>
 800450a:	2b75      	cmp	r3, #117	; 0x75
 800450c:	d037      	beq.n	800457e <ts_formatstring+0xbc>
 800450e:	2b78      	cmp	r3, #120	; 0x78
 8004510:	d040      	beq.n	8004594 <ts_formatstring+0xd2>
 8004512:	e051      	b.n	80045b8 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	60fa      	str	r2, [r7, #12]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	1d11      	adds	r1, r2, #4
 800451e:	6079      	str	r1, [r7, #4]
 8004520:	6812      	ldr	r2, [r2, #0]
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	701a      	strb	r2, [r3, #0]
				break;
 8004526:	e047      	b.n	80045b8 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	1d1a      	adds	r2, r3, #4
 800452c:	607a      	str	r2, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	2b00      	cmp	r3, #0
 8004536:	da07      	bge.n	8004548 <ts_formatstring+0x86>
					{
						val *= -1;
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	425b      	negs	r3, r3
 800453c:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	60fa      	str	r2, [r7, #12]
 8004544:	222d      	movs	r2, #45	; 0x2d
 8004546:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8004548:	69f9      	ldr	r1, [r7, #28]
 800454a:	f107 030c 	add.w	r3, r7, #12
 800454e:	220a      	movs	r2, #10
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff ff6d 	bl	8004430 <ts_itoa>
				}
				break;
 8004556:	e02f      	b.n	80045b8 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	1d1a      	adds	r2, r3, #4
 800455c:	607a      	str	r2, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8004562:	e007      	b.n	8004574 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	60fa      	str	r2, [r7, #12]
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	1c51      	adds	r1, r2, #1
 800456e:	61b9      	str	r1, [r7, #24]
 8004570:	7812      	ldrb	r2, [r2, #0]
 8004572:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1f3      	bne.n	8004564 <ts_formatstring+0xa2>
					}
				}
				break;
 800457c:	e01c      	b.n	80045b8 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	1d1a      	adds	r2, r3, #4
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	6819      	ldr	r1, [r3, #0]
 8004586:	f107 030c 	add.w	r3, r7, #12
 800458a:	220a      	movs	r2, #10
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff ff4f 	bl	8004430 <ts_itoa>
				break;
 8004592:	e011      	b.n	80045b8 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	1d1a      	adds	r2, r3, #4
 8004598:	607a      	str	r2, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4619      	mov	r1, r3
 800459e:	f107 030c 	add.w	r3, r7, #12
 80045a2:	2210      	movs	r2, #16
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff ff43 	bl	8004430 <ts_itoa>
				break;
 80045aa:	e005      	b.n	80045b8 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	60fa      	str	r2, [r7, #12]
 80045b2:	2225      	movs	r2, #37	; 0x25
 80045b4:	701a      	strb	r2, [r3, #0]
				  break;
 80045b6:	bf00      	nop
			}
			fmt++;
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	3301      	adds	r3, #1
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	e007      	b.n	80045d0 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	60fa      	str	r2, [r7, #12]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	1c51      	adds	r1, r2, #1
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	7812      	ldrb	r2, [r2, #0]
 80045ce:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f47f af7d 	bne.w	80044d4 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	461a      	mov	r2, r3
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	1ad3      	subs	r3, r2, r3
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3720      	adds	r7, #32
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
	int length = 0;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 80045fe:	e081      	b.n	8004704 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b25      	cmp	r3, #37	; 0x25
 8004606:	d177      	bne.n	80046f8 <ts_formatlength+0x108>
		{
			++fmt;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3301      	adds	r3, #1
 800460c:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	3b58      	subs	r3, #88	; 0x58
 8004614:	2b20      	cmp	r3, #32
 8004616:	d86a      	bhi.n	80046ee <ts_formatlength+0xfe>
 8004618:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <ts_formatlength+0x30>)
 800461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461e:	bf00      	nop
 8004620:	080046e1 	.word	0x080046e1
 8004624:	080046ef 	.word	0x080046ef
 8004628:	080046ef 	.word	0x080046ef
 800462c:	080046ef 	.word	0x080046ef
 8004630:	080046ef 	.word	0x080046ef
 8004634:	080046ef 	.word	0x080046ef
 8004638:	080046ef 	.word	0x080046ef
 800463c:	080046ef 	.word	0x080046ef
 8004640:	080046ef 	.word	0x080046ef
 8004644:	080046ef 	.word	0x080046ef
 8004648:	080046ef 	.word	0x080046ef
 800464c:	080046a5 	.word	0x080046a5
 8004650:	080046b3 	.word	0x080046b3
 8004654:	080046ef 	.word	0x080046ef
 8004658:	080046ef 	.word	0x080046ef
 800465c:	080046ef 	.word	0x080046ef
 8004660:	080046ef 	.word	0x080046ef
 8004664:	080046b3 	.word	0x080046b3
 8004668:	080046ef 	.word	0x080046ef
 800466c:	080046ef 	.word	0x080046ef
 8004670:	080046ef 	.word	0x080046ef
 8004674:	080046ef 	.word	0x080046ef
 8004678:	080046ef 	.word	0x080046ef
 800467c:	080046ef 	.word	0x080046ef
 8004680:	080046ef 	.word	0x080046ef
 8004684:	080046ef 	.word	0x080046ef
 8004688:	080046ef 	.word	0x080046ef
 800468c:	080046c1 	.word	0x080046c1
 8004690:	080046ef 	.word	0x080046ef
 8004694:	080046b3 	.word	0x080046b3
 8004698:	080046ef 	.word	0x080046ef
 800469c:	080046ef 	.word	0x080046ef
 80046a0:	080046e1 	.word	0x080046e1
			{
			  case 'c':
		  		  va_arg(va, int);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	3304      	adds	r3, #4
 80046a8:	603b      	str	r3, [r7, #0]
				  ++length;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3301      	adds	r3, #1
 80046ae:	60fb      	str	r3, [r7, #12]
				  break;
 80046b0:	e025      	b.n	80046fe <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	330b      	adds	r3, #11
 80046b6:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	3304      	adds	r3, #4
 80046bc:	603b      	str	r3, [r7, #0]
				  break;
 80046be:	e01e      	b.n	80046fe <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	1d1a      	adds	r2, r3, #4
 80046c4:	603a      	str	r2, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 80046ca:	e002      	b.n	80046d2 <ts_formatlength+0xe2>
			  			  ++length;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	3301      	adds	r3, #1
 80046d0:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	60ba      	str	r2, [r7, #8]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f6      	bne.n	80046cc <ts_formatlength+0xdc>
			  	  }
				  break;
 80046de:	e00e      	b.n	80046fe <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3308      	adds	r3, #8
 80046e4:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	3304      	adds	r3, #4
 80046ea:	603b      	str	r3, [r7, #0]
				  break;
 80046ec:	e007      	b.n	80046fe <ts_formatlength+0x10e>
			  default:
				  ++length;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	3301      	adds	r3, #1
 80046f2:	60fb      	str	r3, [r7, #12]
				  break;
 80046f4:	bf00      	nop
 80046f6:	e002      	b.n	80046fe <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	3301      	adds	r3, #1
 80046fc:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	3301      	adds	r3, #1
 8004702:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	f47f af79 	bne.w	8004600 <ts_formatlength+0x10>
	}
	return length;
 800470e:	68fb      	ldr	r3, [r7, #12]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <printf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int printf(const char *fmt, ...)
{
 800471c:	b40f      	push	{r0, r1, r2, r3}
 800471e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
	int length = 0;
 8004726:	2300      	movs	r3, #0
 8004728:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 800472a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800472e:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8004730:	6839      	ldr	r1, [r7, #0]
 8004732:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004734:	f7ff ff5c 	bl	80045f0 <ts_formatlength>
 8004738:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 800473a:	466b      	mov	r3, sp
 800473c:	461e      	mov	r6, r3
		char buf[length];
 800473e:	68f9      	ldr	r1, [r7, #12]
 8004740:	1e4b      	subs	r3, r1, #1
 8004742:	60bb      	str	r3, [r7, #8]
 8004744:	460b      	mov	r3, r1
 8004746:	461a      	mov	r2, r3
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8004750:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8004754:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8004758:	460b      	mov	r3, r1
 800475a:	461a      	mov	r2, r3
 800475c:	f04f 0300 	mov.w	r3, #0
 8004760:	00dd      	lsls	r5, r3, #3
 8004762:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004766:	00d4      	lsls	r4, r2, #3
 8004768:	460b      	mov	r3, r1
 800476a:	3307      	adds	r3, #7
 800476c:	08db      	lsrs	r3, r3, #3
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	ebad 0d03 	sub.w	sp, sp, r3
 8004774:	466b      	mov	r3, sp
 8004776:	3300      	adds	r3, #0
 8004778:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 800477a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800477e:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff fe9b 	bl	80044c2 <ts_formatstring>
 800478c:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	4619      	mov	r1, r3
 8004794:	2001      	movs	r0, #1
 8004796:	f7ff fcff 	bl	8004198 <_write>
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 800479e:	68fb      	ldr	r3, [r7, #12]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047aa:	b004      	add	sp, #16
 80047ac:	4770      	bx	lr
	...

080047b0 <__libc_init_array>:
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	4e0d      	ldr	r6, [pc, #52]	; (80047e8 <__libc_init_array+0x38>)
 80047b4:	4c0d      	ldr	r4, [pc, #52]	; (80047ec <__libc_init_array+0x3c>)
 80047b6:	1ba4      	subs	r4, r4, r6
 80047b8:	10a4      	asrs	r4, r4, #2
 80047ba:	2500      	movs	r5, #0
 80047bc:	42a5      	cmp	r5, r4
 80047be:	d109      	bne.n	80047d4 <__libc_init_array+0x24>
 80047c0:	4e0b      	ldr	r6, [pc, #44]	; (80047f0 <__libc_init_array+0x40>)
 80047c2:	4c0c      	ldr	r4, [pc, #48]	; (80047f4 <__libc_init_array+0x44>)
 80047c4:	f001 f8c8 	bl	8005958 <_init>
 80047c8:	1ba4      	subs	r4, r4, r6
 80047ca:	10a4      	asrs	r4, r4, #2
 80047cc:	2500      	movs	r5, #0
 80047ce:	42a5      	cmp	r5, r4
 80047d0:	d105      	bne.n	80047de <__libc_init_array+0x2e>
 80047d2:	bd70      	pop	{r4, r5, r6, pc}
 80047d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047d8:	4798      	blx	r3
 80047da:	3501      	adds	r5, #1
 80047dc:	e7ee      	b.n	80047bc <__libc_init_array+0xc>
 80047de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047e2:	4798      	blx	r3
 80047e4:	3501      	adds	r5, #1
 80047e6:	e7f2      	b.n	80047ce <__libc_init_array+0x1e>
 80047e8:	08005970 	.word	0x08005970
 80047ec:	08005970 	.word	0x08005970
 80047f0:	08005970 	.word	0x08005970
 80047f4:	08005974 	.word	0x08005974

080047f8 <free>:
 80047f8:	4b02      	ldr	r3, [pc, #8]	; (8004804 <free+0xc>)
 80047fa:	4601      	mov	r1, r0
 80047fc:	6818      	ldr	r0, [r3, #0]
 80047fe:	f000 b817 	b.w	8004830 <_free_r>
 8004802:	bf00      	nop
 8004804:	20000018 	.word	0x20000018

08004808 <memcpy>:
 8004808:	b510      	push	{r4, lr}
 800480a:	1e43      	subs	r3, r0, #1
 800480c:	440a      	add	r2, r1
 800480e:	4291      	cmp	r1, r2
 8004810:	d100      	bne.n	8004814 <memcpy+0xc>
 8004812:	bd10      	pop	{r4, pc}
 8004814:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004818:	f803 4f01 	strb.w	r4, [r3, #1]!
 800481c:	e7f7      	b.n	800480e <memcpy+0x6>

0800481e <memset>:
 800481e:	4402      	add	r2, r0
 8004820:	4603      	mov	r3, r0
 8004822:	4293      	cmp	r3, r2
 8004824:	d100      	bne.n	8004828 <memset+0xa>
 8004826:	4770      	bx	lr
 8004828:	f803 1b01 	strb.w	r1, [r3], #1
 800482c:	e7f9      	b.n	8004822 <memset+0x4>
	...

08004830 <_free_r>:
 8004830:	b538      	push	{r3, r4, r5, lr}
 8004832:	4605      	mov	r5, r0
 8004834:	2900      	cmp	r1, #0
 8004836:	d045      	beq.n	80048c4 <_free_r+0x94>
 8004838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800483c:	1f0c      	subs	r4, r1, #4
 800483e:	2b00      	cmp	r3, #0
 8004840:	bfb8      	it	lt
 8004842:	18e4      	addlt	r4, r4, r3
 8004844:	f000 fbb4 	bl	8004fb0 <__malloc_lock>
 8004848:	4a1f      	ldr	r2, [pc, #124]	; (80048c8 <_free_r+0x98>)
 800484a:	6813      	ldr	r3, [r2, #0]
 800484c:	4610      	mov	r0, r2
 800484e:	b933      	cbnz	r3, 800485e <_free_r+0x2e>
 8004850:	6063      	str	r3, [r4, #4]
 8004852:	6014      	str	r4, [r2, #0]
 8004854:	4628      	mov	r0, r5
 8004856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800485a:	f000 bbaa 	b.w	8004fb2 <__malloc_unlock>
 800485e:	42a3      	cmp	r3, r4
 8004860:	d90c      	bls.n	800487c <_free_r+0x4c>
 8004862:	6821      	ldr	r1, [r4, #0]
 8004864:	1862      	adds	r2, r4, r1
 8004866:	4293      	cmp	r3, r2
 8004868:	bf04      	itt	eq
 800486a:	681a      	ldreq	r2, [r3, #0]
 800486c:	685b      	ldreq	r3, [r3, #4]
 800486e:	6063      	str	r3, [r4, #4]
 8004870:	bf04      	itt	eq
 8004872:	1852      	addeq	r2, r2, r1
 8004874:	6022      	streq	r2, [r4, #0]
 8004876:	6004      	str	r4, [r0, #0]
 8004878:	e7ec      	b.n	8004854 <_free_r+0x24>
 800487a:	4613      	mov	r3, r2
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	b10a      	cbz	r2, 8004884 <_free_r+0x54>
 8004880:	42a2      	cmp	r2, r4
 8004882:	d9fa      	bls.n	800487a <_free_r+0x4a>
 8004884:	6819      	ldr	r1, [r3, #0]
 8004886:	1858      	adds	r0, r3, r1
 8004888:	42a0      	cmp	r0, r4
 800488a:	d10b      	bne.n	80048a4 <_free_r+0x74>
 800488c:	6820      	ldr	r0, [r4, #0]
 800488e:	4401      	add	r1, r0
 8004890:	1858      	adds	r0, r3, r1
 8004892:	4282      	cmp	r2, r0
 8004894:	6019      	str	r1, [r3, #0]
 8004896:	d1dd      	bne.n	8004854 <_free_r+0x24>
 8004898:	6810      	ldr	r0, [r2, #0]
 800489a:	6852      	ldr	r2, [r2, #4]
 800489c:	605a      	str	r2, [r3, #4]
 800489e:	4401      	add	r1, r0
 80048a0:	6019      	str	r1, [r3, #0]
 80048a2:	e7d7      	b.n	8004854 <_free_r+0x24>
 80048a4:	d902      	bls.n	80048ac <_free_r+0x7c>
 80048a6:	230c      	movs	r3, #12
 80048a8:	602b      	str	r3, [r5, #0]
 80048aa:	e7d3      	b.n	8004854 <_free_r+0x24>
 80048ac:	6820      	ldr	r0, [r4, #0]
 80048ae:	1821      	adds	r1, r4, r0
 80048b0:	428a      	cmp	r2, r1
 80048b2:	bf04      	itt	eq
 80048b4:	6811      	ldreq	r1, [r2, #0]
 80048b6:	6852      	ldreq	r2, [r2, #4]
 80048b8:	6062      	str	r2, [r4, #4]
 80048ba:	bf04      	itt	eq
 80048bc:	1809      	addeq	r1, r1, r0
 80048be:	6021      	streq	r1, [r4, #0]
 80048c0:	605c      	str	r4, [r3, #4]
 80048c2:	e7c7      	b.n	8004854 <_free_r+0x24>
 80048c4:	bd38      	pop	{r3, r4, r5, pc}
 80048c6:	bf00      	nop
 80048c8:	200065fc 	.word	0x200065fc

080048cc <_malloc_r>:
 80048cc:	b570      	push	{r4, r5, r6, lr}
 80048ce:	1ccd      	adds	r5, r1, #3
 80048d0:	f025 0503 	bic.w	r5, r5, #3
 80048d4:	3508      	adds	r5, #8
 80048d6:	2d0c      	cmp	r5, #12
 80048d8:	bf38      	it	cc
 80048da:	250c      	movcc	r5, #12
 80048dc:	2d00      	cmp	r5, #0
 80048de:	4606      	mov	r6, r0
 80048e0:	db01      	blt.n	80048e6 <_malloc_r+0x1a>
 80048e2:	42a9      	cmp	r1, r5
 80048e4:	d903      	bls.n	80048ee <_malloc_r+0x22>
 80048e6:	230c      	movs	r3, #12
 80048e8:	6033      	str	r3, [r6, #0]
 80048ea:	2000      	movs	r0, #0
 80048ec:	bd70      	pop	{r4, r5, r6, pc}
 80048ee:	f000 fb5f 	bl	8004fb0 <__malloc_lock>
 80048f2:	4a23      	ldr	r2, [pc, #140]	; (8004980 <_malloc_r+0xb4>)
 80048f4:	6814      	ldr	r4, [r2, #0]
 80048f6:	4621      	mov	r1, r4
 80048f8:	b991      	cbnz	r1, 8004920 <_malloc_r+0x54>
 80048fa:	4c22      	ldr	r4, [pc, #136]	; (8004984 <_malloc_r+0xb8>)
 80048fc:	6823      	ldr	r3, [r4, #0]
 80048fe:	b91b      	cbnz	r3, 8004908 <_malloc_r+0x3c>
 8004900:	4630      	mov	r0, r6
 8004902:	f000 f8a5 	bl	8004a50 <_sbrk_r>
 8004906:	6020      	str	r0, [r4, #0]
 8004908:	4629      	mov	r1, r5
 800490a:	4630      	mov	r0, r6
 800490c:	f000 f8a0 	bl	8004a50 <_sbrk_r>
 8004910:	1c43      	adds	r3, r0, #1
 8004912:	d126      	bne.n	8004962 <_malloc_r+0x96>
 8004914:	230c      	movs	r3, #12
 8004916:	6033      	str	r3, [r6, #0]
 8004918:	4630      	mov	r0, r6
 800491a:	f000 fb4a 	bl	8004fb2 <__malloc_unlock>
 800491e:	e7e4      	b.n	80048ea <_malloc_r+0x1e>
 8004920:	680b      	ldr	r3, [r1, #0]
 8004922:	1b5b      	subs	r3, r3, r5
 8004924:	d41a      	bmi.n	800495c <_malloc_r+0x90>
 8004926:	2b0b      	cmp	r3, #11
 8004928:	d90f      	bls.n	800494a <_malloc_r+0x7e>
 800492a:	600b      	str	r3, [r1, #0]
 800492c:	50cd      	str	r5, [r1, r3]
 800492e:	18cc      	adds	r4, r1, r3
 8004930:	4630      	mov	r0, r6
 8004932:	f000 fb3e 	bl	8004fb2 <__malloc_unlock>
 8004936:	f104 000b 	add.w	r0, r4, #11
 800493a:	1d23      	adds	r3, r4, #4
 800493c:	f020 0007 	bic.w	r0, r0, #7
 8004940:	1ac3      	subs	r3, r0, r3
 8004942:	d01b      	beq.n	800497c <_malloc_r+0xb0>
 8004944:	425a      	negs	r2, r3
 8004946:	50e2      	str	r2, [r4, r3]
 8004948:	bd70      	pop	{r4, r5, r6, pc}
 800494a:	428c      	cmp	r4, r1
 800494c:	bf0d      	iteet	eq
 800494e:	6863      	ldreq	r3, [r4, #4]
 8004950:	684b      	ldrne	r3, [r1, #4]
 8004952:	6063      	strne	r3, [r4, #4]
 8004954:	6013      	streq	r3, [r2, #0]
 8004956:	bf18      	it	ne
 8004958:	460c      	movne	r4, r1
 800495a:	e7e9      	b.n	8004930 <_malloc_r+0x64>
 800495c:	460c      	mov	r4, r1
 800495e:	6849      	ldr	r1, [r1, #4]
 8004960:	e7ca      	b.n	80048f8 <_malloc_r+0x2c>
 8004962:	1cc4      	adds	r4, r0, #3
 8004964:	f024 0403 	bic.w	r4, r4, #3
 8004968:	42a0      	cmp	r0, r4
 800496a:	d005      	beq.n	8004978 <_malloc_r+0xac>
 800496c:	1a21      	subs	r1, r4, r0
 800496e:	4630      	mov	r0, r6
 8004970:	f000 f86e 	bl	8004a50 <_sbrk_r>
 8004974:	3001      	adds	r0, #1
 8004976:	d0cd      	beq.n	8004914 <_malloc_r+0x48>
 8004978:	6025      	str	r5, [r4, #0]
 800497a:	e7d9      	b.n	8004930 <_malloc_r+0x64>
 800497c:	bd70      	pop	{r4, r5, r6, pc}
 800497e:	bf00      	nop
 8004980:	200065fc 	.word	0x200065fc
 8004984:	20006600 	.word	0x20006600

08004988 <_puts_r>:
 8004988:	b570      	push	{r4, r5, r6, lr}
 800498a:	460e      	mov	r6, r1
 800498c:	4605      	mov	r5, r0
 800498e:	b118      	cbz	r0, 8004998 <_puts_r+0x10>
 8004990:	6983      	ldr	r3, [r0, #24]
 8004992:	b90b      	cbnz	r3, 8004998 <_puts_r+0x10>
 8004994:	f000 fa1e 	bl	8004dd4 <__sinit>
 8004998:	69ab      	ldr	r3, [r5, #24]
 800499a:	68ac      	ldr	r4, [r5, #8]
 800499c:	b913      	cbnz	r3, 80049a4 <_puts_r+0x1c>
 800499e:	4628      	mov	r0, r5
 80049a0:	f000 fa18 	bl	8004dd4 <__sinit>
 80049a4:	4b23      	ldr	r3, [pc, #140]	; (8004a34 <_puts_r+0xac>)
 80049a6:	429c      	cmp	r4, r3
 80049a8:	d117      	bne.n	80049da <_puts_r+0x52>
 80049aa:	686c      	ldr	r4, [r5, #4]
 80049ac:	89a3      	ldrh	r3, [r4, #12]
 80049ae:	071b      	lsls	r3, r3, #28
 80049b0:	d51d      	bpl.n	80049ee <_puts_r+0x66>
 80049b2:	6923      	ldr	r3, [r4, #16]
 80049b4:	b1db      	cbz	r3, 80049ee <_puts_r+0x66>
 80049b6:	3e01      	subs	r6, #1
 80049b8:	68a3      	ldr	r3, [r4, #8]
 80049ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80049be:	3b01      	subs	r3, #1
 80049c0:	60a3      	str	r3, [r4, #8]
 80049c2:	b9e9      	cbnz	r1, 8004a00 <_puts_r+0x78>
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	da2e      	bge.n	8004a26 <_puts_r+0x9e>
 80049c8:	4622      	mov	r2, r4
 80049ca:	210a      	movs	r1, #10
 80049cc:	4628      	mov	r0, r5
 80049ce:	f000 f84f 	bl	8004a70 <__swbuf_r>
 80049d2:	3001      	adds	r0, #1
 80049d4:	d011      	beq.n	80049fa <_puts_r+0x72>
 80049d6:	200a      	movs	r0, #10
 80049d8:	bd70      	pop	{r4, r5, r6, pc}
 80049da:	4b17      	ldr	r3, [pc, #92]	; (8004a38 <_puts_r+0xb0>)
 80049dc:	429c      	cmp	r4, r3
 80049de:	d101      	bne.n	80049e4 <_puts_r+0x5c>
 80049e0:	68ac      	ldr	r4, [r5, #8]
 80049e2:	e7e3      	b.n	80049ac <_puts_r+0x24>
 80049e4:	4b15      	ldr	r3, [pc, #84]	; (8004a3c <_puts_r+0xb4>)
 80049e6:	429c      	cmp	r4, r3
 80049e8:	bf08      	it	eq
 80049ea:	68ec      	ldreq	r4, [r5, #12]
 80049ec:	e7de      	b.n	80049ac <_puts_r+0x24>
 80049ee:	4621      	mov	r1, r4
 80049f0:	4628      	mov	r0, r5
 80049f2:	f000 f88f 	bl	8004b14 <__swsetup_r>
 80049f6:	2800      	cmp	r0, #0
 80049f8:	d0dd      	beq.n	80049b6 <_puts_r+0x2e>
 80049fa:	f04f 30ff 	mov.w	r0, #4294967295
 80049fe:	bd70      	pop	{r4, r5, r6, pc}
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	da04      	bge.n	8004a0e <_puts_r+0x86>
 8004a04:	69a2      	ldr	r2, [r4, #24]
 8004a06:	4293      	cmp	r3, r2
 8004a08:	db06      	blt.n	8004a18 <_puts_r+0x90>
 8004a0a:	290a      	cmp	r1, #10
 8004a0c:	d004      	beq.n	8004a18 <_puts_r+0x90>
 8004a0e:	6823      	ldr	r3, [r4, #0]
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	6022      	str	r2, [r4, #0]
 8004a14:	7019      	strb	r1, [r3, #0]
 8004a16:	e7cf      	b.n	80049b8 <_puts_r+0x30>
 8004a18:	4622      	mov	r2, r4
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	f000 f828 	bl	8004a70 <__swbuf_r>
 8004a20:	3001      	adds	r0, #1
 8004a22:	d1c9      	bne.n	80049b8 <_puts_r+0x30>
 8004a24:	e7e9      	b.n	80049fa <_puts_r+0x72>
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	200a      	movs	r0, #10
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	6022      	str	r2, [r4, #0]
 8004a2e:	7018      	strb	r0, [r3, #0]
 8004a30:	bd70      	pop	{r4, r5, r6, pc}
 8004a32:	bf00      	nop
 8004a34:	08005914 	.word	0x08005914
 8004a38:	08005934 	.word	0x08005934
 8004a3c:	080058f4 	.word	0x080058f4

08004a40 <puts>:
 8004a40:	4b02      	ldr	r3, [pc, #8]	; (8004a4c <puts+0xc>)
 8004a42:	4601      	mov	r1, r0
 8004a44:	6818      	ldr	r0, [r3, #0]
 8004a46:	f7ff bf9f 	b.w	8004988 <_puts_r>
 8004a4a:	bf00      	nop
 8004a4c:	20000018 	.word	0x20000018

08004a50 <_sbrk_r>:
 8004a50:	b538      	push	{r3, r4, r5, lr}
 8004a52:	4c06      	ldr	r4, [pc, #24]	; (8004a6c <_sbrk_r+0x1c>)
 8004a54:	2300      	movs	r3, #0
 8004a56:	4605      	mov	r5, r0
 8004a58:	4608      	mov	r0, r1
 8004a5a:	6023      	str	r3, [r4, #0]
 8004a5c:	f7ff fbba 	bl	80041d4 <_sbrk>
 8004a60:	1c43      	adds	r3, r0, #1
 8004a62:	d102      	bne.n	8004a6a <_sbrk_r+0x1a>
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	b103      	cbz	r3, 8004a6a <_sbrk_r+0x1a>
 8004a68:	602b      	str	r3, [r5, #0]
 8004a6a:	bd38      	pop	{r3, r4, r5, pc}
 8004a6c:	200066f0 	.word	0x200066f0

08004a70 <__swbuf_r>:
 8004a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a72:	460e      	mov	r6, r1
 8004a74:	4614      	mov	r4, r2
 8004a76:	4605      	mov	r5, r0
 8004a78:	b118      	cbz	r0, 8004a82 <__swbuf_r+0x12>
 8004a7a:	6983      	ldr	r3, [r0, #24]
 8004a7c:	b90b      	cbnz	r3, 8004a82 <__swbuf_r+0x12>
 8004a7e:	f000 f9a9 	bl	8004dd4 <__sinit>
 8004a82:	4b21      	ldr	r3, [pc, #132]	; (8004b08 <__swbuf_r+0x98>)
 8004a84:	429c      	cmp	r4, r3
 8004a86:	d12a      	bne.n	8004ade <__swbuf_r+0x6e>
 8004a88:	686c      	ldr	r4, [r5, #4]
 8004a8a:	69a3      	ldr	r3, [r4, #24]
 8004a8c:	60a3      	str	r3, [r4, #8]
 8004a8e:	89a3      	ldrh	r3, [r4, #12]
 8004a90:	071a      	lsls	r2, r3, #28
 8004a92:	d52e      	bpl.n	8004af2 <__swbuf_r+0x82>
 8004a94:	6923      	ldr	r3, [r4, #16]
 8004a96:	b363      	cbz	r3, 8004af2 <__swbuf_r+0x82>
 8004a98:	6923      	ldr	r3, [r4, #16]
 8004a9a:	6820      	ldr	r0, [r4, #0]
 8004a9c:	1ac0      	subs	r0, r0, r3
 8004a9e:	6963      	ldr	r3, [r4, #20]
 8004aa0:	b2f6      	uxtb	r6, r6
 8004aa2:	4298      	cmp	r0, r3
 8004aa4:	4637      	mov	r7, r6
 8004aa6:	db04      	blt.n	8004ab2 <__swbuf_r+0x42>
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	4628      	mov	r0, r5
 8004aac:	f000 f928 	bl	8004d00 <_fflush_r>
 8004ab0:	bb28      	cbnz	r0, 8004afe <__swbuf_r+0x8e>
 8004ab2:	68a3      	ldr	r3, [r4, #8]
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	60a3      	str	r3, [r4, #8]
 8004ab8:	6823      	ldr	r3, [r4, #0]
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	6022      	str	r2, [r4, #0]
 8004abe:	701e      	strb	r6, [r3, #0]
 8004ac0:	6963      	ldr	r3, [r4, #20]
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	4298      	cmp	r0, r3
 8004ac6:	d004      	beq.n	8004ad2 <__swbuf_r+0x62>
 8004ac8:	89a3      	ldrh	r3, [r4, #12]
 8004aca:	07db      	lsls	r3, r3, #31
 8004acc:	d519      	bpl.n	8004b02 <__swbuf_r+0x92>
 8004ace:	2e0a      	cmp	r6, #10
 8004ad0:	d117      	bne.n	8004b02 <__swbuf_r+0x92>
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	f000 f913 	bl	8004d00 <_fflush_r>
 8004ada:	b190      	cbz	r0, 8004b02 <__swbuf_r+0x92>
 8004adc:	e00f      	b.n	8004afe <__swbuf_r+0x8e>
 8004ade:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <__swbuf_r+0x9c>)
 8004ae0:	429c      	cmp	r4, r3
 8004ae2:	d101      	bne.n	8004ae8 <__swbuf_r+0x78>
 8004ae4:	68ac      	ldr	r4, [r5, #8]
 8004ae6:	e7d0      	b.n	8004a8a <__swbuf_r+0x1a>
 8004ae8:	4b09      	ldr	r3, [pc, #36]	; (8004b10 <__swbuf_r+0xa0>)
 8004aea:	429c      	cmp	r4, r3
 8004aec:	bf08      	it	eq
 8004aee:	68ec      	ldreq	r4, [r5, #12]
 8004af0:	e7cb      	b.n	8004a8a <__swbuf_r+0x1a>
 8004af2:	4621      	mov	r1, r4
 8004af4:	4628      	mov	r0, r5
 8004af6:	f000 f80d 	bl	8004b14 <__swsetup_r>
 8004afa:	2800      	cmp	r0, #0
 8004afc:	d0cc      	beq.n	8004a98 <__swbuf_r+0x28>
 8004afe:	f04f 37ff 	mov.w	r7, #4294967295
 8004b02:	4638      	mov	r0, r7
 8004b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b06:	bf00      	nop
 8004b08:	08005914 	.word	0x08005914
 8004b0c:	08005934 	.word	0x08005934
 8004b10:	080058f4 	.word	0x080058f4

08004b14 <__swsetup_r>:
 8004b14:	4b32      	ldr	r3, [pc, #200]	; (8004be0 <__swsetup_r+0xcc>)
 8004b16:	b570      	push	{r4, r5, r6, lr}
 8004b18:	681d      	ldr	r5, [r3, #0]
 8004b1a:	4606      	mov	r6, r0
 8004b1c:	460c      	mov	r4, r1
 8004b1e:	b125      	cbz	r5, 8004b2a <__swsetup_r+0x16>
 8004b20:	69ab      	ldr	r3, [r5, #24]
 8004b22:	b913      	cbnz	r3, 8004b2a <__swsetup_r+0x16>
 8004b24:	4628      	mov	r0, r5
 8004b26:	f000 f955 	bl	8004dd4 <__sinit>
 8004b2a:	4b2e      	ldr	r3, [pc, #184]	; (8004be4 <__swsetup_r+0xd0>)
 8004b2c:	429c      	cmp	r4, r3
 8004b2e:	d10f      	bne.n	8004b50 <__swsetup_r+0x3c>
 8004b30:	686c      	ldr	r4, [r5, #4]
 8004b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	0715      	lsls	r5, r2, #28
 8004b3a:	d42c      	bmi.n	8004b96 <__swsetup_r+0x82>
 8004b3c:	06d0      	lsls	r0, r2, #27
 8004b3e:	d411      	bmi.n	8004b64 <__swsetup_r+0x50>
 8004b40:	2209      	movs	r2, #9
 8004b42:	6032      	str	r2, [r6, #0]
 8004b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b48:	81a3      	strh	r3, [r4, #12]
 8004b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4e:	bd70      	pop	{r4, r5, r6, pc}
 8004b50:	4b25      	ldr	r3, [pc, #148]	; (8004be8 <__swsetup_r+0xd4>)
 8004b52:	429c      	cmp	r4, r3
 8004b54:	d101      	bne.n	8004b5a <__swsetup_r+0x46>
 8004b56:	68ac      	ldr	r4, [r5, #8]
 8004b58:	e7eb      	b.n	8004b32 <__swsetup_r+0x1e>
 8004b5a:	4b24      	ldr	r3, [pc, #144]	; (8004bec <__swsetup_r+0xd8>)
 8004b5c:	429c      	cmp	r4, r3
 8004b5e:	bf08      	it	eq
 8004b60:	68ec      	ldreq	r4, [r5, #12]
 8004b62:	e7e6      	b.n	8004b32 <__swsetup_r+0x1e>
 8004b64:	0751      	lsls	r1, r2, #29
 8004b66:	d512      	bpl.n	8004b8e <__swsetup_r+0x7a>
 8004b68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b6a:	b141      	cbz	r1, 8004b7e <__swsetup_r+0x6a>
 8004b6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b70:	4299      	cmp	r1, r3
 8004b72:	d002      	beq.n	8004b7a <__swsetup_r+0x66>
 8004b74:	4630      	mov	r0, r6
 8004b76:	f7ff fe5b 	bl	8004830 <_free_r>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	6363      	str	r3, [r4, #52]	; 0x34
 8004b7e:	89a3      	ldrh	r3, [r4, #12]
 8004b80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b84:	81a3      	strh	r3, [r4, #12]
 8004b86:	2300      	movs	r3, #0
 8004b88:	6063      	str	r3, [r4, #4]
 8004b8a:	6923      	ldr	r3, [r4, #16]
 8004b8c:	6023      	str	r3, [r4, #0]
 8004b8e:	89a3      	ldrh	r3, [r4, #12]
 8004b90:	f043 0308 	orr.w	r3, r3, #8
 8004b94:	81a3      	strh	r3, [r4, #12]
 8004b96:	6923      	ldr	r3, [r4, #16]
 8004b98:	b94b      	cbnz	r3, 8004bae <__swsetup_r+0x9a>
 8004b9a:	89a3      	ldrh	r3, [r4, #12]
 8004b9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba4:	d003      	beq.n	8004bae <__swsetup_r+0x9a>
 8004ba6:	4621      	mov	r1, r4
 8004ba8:	4630      	mov	r0, r6
 8004baa:	f000 f9c1 	bl	8004f30 <__smakebuf_r>
 8004bae:	89a2      	ldrh	r2, [r4, #12]
 8004bb0:	f012 0301 	ands.w	r3, r2, #1
 8004bb4:	d00c      	beq.n	8004bd0 <__swsetup_r+0xbc>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60a3      	str	r3, [r4, #8]
 8004bba:	6963      	ldr	r3, [r4, #20]
 8004bbc:	425b      	negs	r3, r3
 8004bbe:	61a3      	str	r3, [r4, #24]
 8004bc0:	6923      	ldr	r3, [r4, #16]
 8004bc2:	b953      	cbnz	r3, 8004bda <__swsetup_r+0xc6>
 8004bc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bc8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004bcc:	d1ba      	bne.n	8004b44 <__swsetup_r+0x30>
 8004bce:	bd70      	pop	{r4, r5, r6, pc}
 8004bd0:	0792      	lsls	r2, r2, #30
 8004bd2:	bf58      	it	pl
 8004bd4:	6963      	ldrpl	r3, [r4, #20]
 8004bd6:	60a3      	str	r3, [r4, #8]
 8004bd8:	e7f2      	b.n	8004bc0 <__swsetup_r+0xac>
 8004bda:	2000      	movs	r0, #0
 8004bdc:	e7f7      	b.n	8004bce <__swsetup_r+0xba>
 8004bde:	bf00      	nop
 8004be0:	20000018 	.word	0x20000018
 8004be4:	08005914 	.word	0x08005914
 8004be8:	08005934 	.word	0x08005934
 8004bec:	080058f4 	.word	0x080058f4

08004bf0 <__sflush_r>:
 8004bf0:	898a      	ldrh	r2, [r1, #12]
 8004bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf6:	4605      	mov	r5, r0
 8004bf8:	0710      	lsls	r0, r2, #28
 8004bfa:	460c      	mov	r4, r1
 8004bfc:	d45a      	bmi.n	8004cb4 <__sflush_r+0xc4>
 8004bfe:	684b      	ldr	r3, [r1, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	dc05      	bgt.n	8004c10 <__sflush_r+0x20>
 8004c04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	dc02      	bgt.n	8004c10 <__sflush_r+0x20>
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c12:	2e00      	cmp	r6, #0
 8004c14:	d0f9      	beq.n	8004c0a <__sflush_r+0x1a>
 8004c16:	2300      	movs	r3, #0
 8004c18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c1c:	682f      	ldr	r7, [r5, #0]
 8004c1e:	602b      	str	r3, [r5, #0]
 8004c20:	d033      	beq.n	8004c8a <__sflush_r+0x9a>
 8004c22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c24:	89a3      	ldrh	r3, [r4, #12]
 8004c26:	075a      	lsls	r2, r3, #29
 8004c28:	d505      	bpl.n	8004c36 <__sflush_r+0x46>
 8004c2a:	6863      	ldr	r3, [r4, #4]
 8004c2c:	1ac0      	subs	r0, r0, r3
 8004c2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c30:	b10b      	cbz	r3, 8004c36 <__sflush_r+0x46>
 8004c32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c34:	1ac0      	subs	r0, r0, r3
 8004c36:	2300      	movs	r3, #0
 8004c38:	4602      	mov	r2, r0
 8004c3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c3c:	6a21      	ldr	r1, [r4, #32]
 8004c3e:	4628      	mov	r0, r5
 8004c40:	47b0      	blx	r6
 8004c42:	1c43      	adds	r3, r0, #1
 8004c44:	89a3      	ldrh	r3, [r4, #12]
 8004c46:	d106      	bne.n	8004c56 <__sflush_r+0x66>
 8004c48:	6829      	ldr	r1, [r5, #0]
 8004c4a:	291d      	cmp	r1, #29
 8004c4c:	d84b      	bhi.n	8004ce6 <__sflush_r+0xf6>
 8004c4e:	4a2b      	ldr	r2, [pc, #172]	; (8004cfc <__sflush_r+0x10c>)
 8004c50:	40ca      	lsrs	r2, r1
 8004c52:	07d6      	lsls	r6, r2, #31
 8004c54:	d547      	bpl.n	8004ce6 <__sflush_r+0xf6>
 8004c56:	2200      	movs	r2, #0
 8004c58:	6062      	str	r2, [r4, #4]
 8004c5a:	04d9      	lsls	r1, r3, #19
 8004c5c:	6922      	ldr	r2, [r4, #16]
 8004c5e:	6022      	str	r2, [r4, #0]
 8004c60:	d504      	bpl.n	8004c6c <__sflush_r+0x7c>
 8004c62:	1c42      	adds	r2, r0, #1
 8004c64:	d101      	bne.n	8004c6a <__sflush_r+0x7a>
 8004c66:	682b      	ldr	r3, [r5, #0]
 8004c68:	b903      	cbnz	r3, 8004c6c <__sflush_r+0x7c>
 8004c6a:	6560      	str	r0, [r4, #84]	; 0x54
 8004c6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c6e:	602f      	str	r7, [r5, #0]
 8004c70:	2900      	cmp	r1, #0
 8004c72:	d0ca      	beq.n	8004c0a <__sflush_r+0x1a>
 8004c74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c78:	4299      	cmp	r1, r3
 8004c7a:	d002      	beq.n	8004c82 <__sflush_r+0x92>
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	f7ff fdd7 	bl	8004830 <_free_r>
 8004c82:	2000      	movs	r0, #0
 8004c84:	6360      	str	r0, [r4, #52]	; 0x34
 8004c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c8a:	6a21      	ldr	r1, [r4, #32]
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	4628      	mov	r0, r5
 8004c90:	47b0      	blx	r6
 8004c92:	1c41      	adds	r1, r0, #1
 8004c94:	d1c6      	bne.n	8004c24 <__sflush_r+0x34>
 8004c96:	682b      	ldr	r3, [r5, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0c3      	beq.n	8004c24 <__sflush_r+0x34>
 8004c9c:	2b1d      	cmp	r3, #29
 8004c9e:	d001      	beq.n	8004ca4 <__sflush_r+0xb4>
 8004ca0:	2b16      	cmp	r3, #22
 8004ca2:	d101      	bne.n	8004ca8 <__sflush_r+0xb8>
 8004ca4:	602f      	str	r7, [r5, #0]
 8004ca6:	e7b0      	b.n	8004c0a <__sflush_r+0x1a>
 8004ca8:	89a3      	ldrh	r3, [r4, #12]
 8004caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cae:	81a3      	strh	r3, [r4, #12]
 8004cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cb4:	690f      	ldr	r7, [r1, #16]
 8004cb6:	2f00      	cmp	r7, #0
 8004cb8:	d0a7      	beq.n	8004c0a <__sflush_r+0x1a>
 8004cba:	0793      	lsls	r3, r2, #30
 8004cbc:	680e      	ldr	r6, [r1, #0]
 8004cbe:	bf08      	it	eq
 8004cc0:	694b      	ldreq	r3, [r1, #20]
 8004cc2:	600f      	str	r7, [r1, #0]
 8004cc4:	bf18      	it	ne
 8004cc6:	2300      	movne	r3, #0
 8004cc8:	eba6 0807 	sub.w	r8, r6, r7
 8004ccc:	608b      	str	r3, [r1, #8]
 8004cce:	f1b8 0f00 	cmp.w	r8, #0
 8004cd2:	dd9a      	ble.n	8004c0a <__sflush_r+0x1a>
 8004cd4:	4643      	mov	r3, r8
 8004cd6:	463a      	mov	r2, r7
 8004cd8:	6a21      	ldr	r1, [r4, #32]
 8004cda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004cdc:	4628      	mov	r0, r5
 8004cde:	47b0      	blx	r6
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	dc07      	bgt.n	8004cf4 <__sflush_r+0x104>
 8004ce4:	89a3      	ldrh	r3, [r4, #12]
 8004ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cea:	81a3      	strh	r3, [r4, #12]
 8004cec:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cf4:	4407      	add	r7, r0
 8004cf6:	eba8 0800 	sub.w	r8, r8, r0
 8004cfa:	e7e8      	b.n	8004cce <__sflush_r+0xde>
 8004cfc:	20400001 	.word	0x20400001

08004d00 <_fflush_r>:
 8004d00:	b538      	push	{r3, r4, r5, lr}
 8004d02:	690b      	ldr	r3, [r1, #16]
 8004d04:	4605      	mov	r5, r0
 8004d06:	460c      	mov	r4, r1
 8004d08:	b1db      	cbz	r3, 8004d42 <_fflush_r+0x42>
 8004d0a:	b118      	cbz	r0, 8004d14 <_fflush_r+0x14>
 8004d0c:	6983      	ldr	r3, [r0, #24]
 8004d0e:	b90b      	cbnz	r3, 8004d14 <_fflush_r+0x14>
 8004d10:	f000 f860 	bl	8004dd4 <__sinit>
 8004d14:	4b0c      	ldr	r3, [pc, #48]	; (8004d48 <_fflush_r+0x48>)
 8004d16:	429c      	cmp	r4, r3
 8004d18:	d109      	bne.n	8004d2e <_fflush_r+0x2e>
 8004d1a:	686c      	ldr	r4, [r5, #4]
 8004d1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d20:	b17b      	cbz	r3, 8004d42 <_fflush_r+0x42>
 8004d22:	4621      	mov	r1, r4
 8004d24:	4628      	mov	r0, r5
 8004d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d2a:	f7ff bf61 	b.w	8004bf0 <__sflush_r>
 8004d2e:	4b07      	ldr	r3, [pc, #28]	; (8004d4c <_fflush_r+0x4c>)
 8004d30:	429c      	cmp	r4, r3
 8004d32:	d101      	bne.n	8004d38 <_fflush_r+0x38>
 8004d34:	68ac      	ldr	r4, [r5, #8]
 8004d36:	e7f1      	b.n	8004d1c <_fflush_r+0x1c>
 8004d38:	4b05      	ldr	r3, [pc, #20]	; (8004d50 <_fflush_r+0x50>)
 8004d3a:	429c      	cmp	r4, r3
 8004d3c:	bf08      	it	eq
 8004d3e:	68ec      	ldreq	r4, [r5, #12]
 8004d40:	e7ec      	b.n	8004d1c <_fflush_r+0x1c>
 8004d42:	2000      	movs	r0, #0
 8004d44:	bd38      	pop	{r3, r4, r5, pc}
 8004d46:	bf00      	nop
 8004d48:	08005914 	.word	0x08005914
 8004d4c:	08005934 	.word	0x08005934
 8004d50:	080058f4 	.word	0x080058f4

08004d54 <_cleanup_r>:
 8004d54:	4901      	ldr	r1, [pc, #4]	; (8004d5c <_cleanup_r+0x8>)
 8004d56:	f000 b8a9 	b.w	8004eac <_fwalk_reent>
 8004d5a:	bf00      	nop
 8004d5c:	08004d01 	.word	0x08004d01

08004d60 <std.isra.0>:
 8004d60:	2300      	movs	r3, #0
 8004d62:	b510      	push	{r4, lr}
 8004d64:	4604      	mov	r4, r0
 8004d66:	6003      	str	r3, [r0, #0]
 8004d68:	6043      	str	r3, [r0, #4]
 8004d6a:	6083      	str	r3, [r0, #8]
 8004d6c:	8181      	strh	r1, [r0, #12]
 8004d6e:	6643      	str	r3, [r0, #100]	; 0x64
 8004d70:	81c2      	strh	r2, [r0, #14]
 8004d72:	6103      	str	r3, [r0, #16]
 8004d74:	6143      	str	r3, [r0, #20]
 8004d76:	6183      	str	r3, [r0, #24]
 8004d78:	4619      	mov	r1, r3
 8004d7a:	2208      	movs	r2, #8
 8004d7c:	305c      	adds	r0, #92	; 0x5c
 8004d7e:	f7ff fd4e 	bl	800481e <memset>
 8004d82:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <std.isra.0+0x38>)
 8004d84:	6263      	str	r3, [r4, #36]	; 0x24
 8004d86:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <std.isra.0+0x3c>)
 8004d88:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d8a:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <std.isra.0+0x40>)
 8004d8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d8e:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <std.isra.0+0x44>)
 8004d90:	6224      	str	r4, [r4, #32]
 8004d92:	6323      	str	r3, [r4, #48]	; 0x30
 8004d94:	bd10      	pop	{r4, pc}
 8004d96:	bf00      	nop
 8004d98:	08004fb5 	.word	0x08004fb5
 8004d9c:	08004fd7 	.word	0x08004fd7
 8004da0:	0800500f 	.word	0x0800500f
 8004da4:	08005033 	.word	0x08005033

08004da8 <__sfmoreglue>:
 8004da8:	b570      	push	{r4, r5, r6, lr}
 8004daa:	1e4a      	subs	r2, r1, #1
 8004dac:	2568      	movs	r5, #104	; 0x68
 8004dae:	4355      	muls	r5, r2
 8004db0:	460e      	mov	r6, r1
 8004db2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004db6:	f7ff fd89 	bl	80048cc <_malloc_r>
 8004dba:	4604      	mov	r4, r0
 8004dbc:	b140      	cbz	r0, 8004dd0 <__sfmoreglue+0x28>
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	e880 0042 	stmia.w	r0, {r1, r6}
 8004dc4:	300c      	adds	r0, #12
 8004dc6:	60a0      	str	r0, [r4, #8]
 8004dc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004dcc:	f7ff fd27 	bl	800481e <memset>
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	bd70      	pop	{r4, r5, r6, pc}

08004dd4 <__sinit>:
 8004dd4:	6983      	ldr	r3, [r0, #24]
 8004dd6:	b510      	push	{r4, lr}
 8004dd8:	4604      	mov	r4, r0
 8004dda:	bb33      	cbnz	r3, 8004e2a <__sinit+0x56>
 8004ddc:	6483      	str	r3, [r0, #72]	; 0x48
 8004dde:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004de0:	6503      	str	r3, [r0, #80]	; 0x50
 8004de2:	4b12      	ldr	r3, [pc, #72]	; (8004e2c <__sinit+0x58>)
 8004de4:	4a12      	ldr	r2, [pc, #72]	; (8004e30 <__sinit+0x5c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6282      	str	r2, [r0, #40]	; 0x28
 8004dea:	4298      	cmp	r0, r3
 8004dec:	bf04      	itt	eq
 8004dee:	2301      	moveq	r3, #1
 8004df0:	6183      	streq	r3, [r0, #24]
 8004df2:	f000 f81f 	bl	8004e34 <__sfp>
 8004df6:	6060      	str	r0, [r4, #4]
 8004df8:	4620      	mov	r0, r4
 8004dfa:	f000 f81b 	bl	8004e34 <__sfp>
 8004dfe:	60a0      	str	r0, [r4, #8]
 8004e00:	4620      	mov	r0, r4
 8004e02:	f000 f817 	bl	8004e34 <__sfp>
 8004e06:	2200      	movs	r2, #0
 8004e08:	60e0      	str	r0, [r4, #12]
 8004e0a:	2104      	movs	r1, #4
 8004e0c:	6860      	ldr	r0, [r4, #4]
 8004e0e:	f7ff ffa7 	bl	8004d60 <std.isra.0>
 8004e12:	2201      	movs	r2, #1
 8004e14:	2109      	movs	r1, #9
 8004e16:	68a0      	ldr	r0, [r4, #8]
 8004e18:	f7ff ffa2 	bl	8004d60 <std.isra.0>
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	2112      	movs	r1, #18
 8004e20:	68e0      	ldr	r0, [r4, #12]
 8004e22:	f7ff ff9d 	bl	8004d60 <std.isra.0>
 8004e26:	2301      	movs	r3, #1
 8004e28:	61a3      	str	r3, [r4, #24]
 8004e2a:	bd10      	pop	{r4, pc}
 8004e2c:	08005954 	.word	0x08005954
 8004e30:	08004d55 	.word	0x08004d55

08004e34 <__sfp>:
 8004e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e36:	4b1c      	ldr	r3, [pc, #112]	; (8004ea8 <__sfp+0x74>)
 8004e38:	681e      	ldr	r6, [r3, #0]
 8004e3a:	69b3      	ldr	r3, [r6, #24]
 8004e3c:	4607      	mov	r7, r0
 8004e3e:	b913      	cbnz	r3, 8004e46 <__sfp+0x12>
 8004e40:	4630      	mov	r0, r6
 8004e42:	f7ff ffc7 	bl	8004dd4 <__sinit>
 8004e46:	3648      	adds	r6, #72	; 0x48
 8004e48:	68b4      	ldr	r4, [r6, #8]
 8004e4a:	6873      	ldr	r3, [r6, #4]
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	d503      	bpl.n	8004e58 <__sfp+0x24>
 8004e50:	6833      	ldr	r3, [r6, #0]
 8004e52:	b133      	cbz	r3, 8004e62 <__sfp+0x2e>
 8004e54:	6836      	ldr	r6, [r6, #0]
 8004e56:	e7f7      	b.n	8004e48 <__sfp+0x14>
 8004e58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e5c:	b16d      	cbz	r5, 8004e7a <__sfp+0x46>
 8004e5e:	3468      	adds	r4, #104	; 0x68
 8004e60:	e7f4      	b.n	8004e4c <__sfp+0x18>
 8004e62:	2104      	movs	r1, #4
 8004e64:	4638      	mov	r0, r7
 8004e66:	f7ff ff9f 	bl	8004da8 <__sfmoreglue>
 8004e6a:	6030      	str	r0, [r6, #0]
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	d1f1      	bne.n	8004e54 <__sfp+0x20>
 8004e70:	230c      	movs	r3, #12
 8004e72:	603b      	str	r3, [r7, #0]
 8004e74:	4604      	mov	r4, r0
 8004e76:	4620      	mov	r0, r4
 8004e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e7e:	81e3      	strh	r3, [r4, #14]
 8004e80:	2301      	movs	r3, #1
 8004e82:	81a3      	strh	r3, [r4, #12]
 8004e84:	6665      	str	r5, [r4, #100]	; 0x64
 8004e86:	6025      	str	r5, [r4, #0]
 8004e88:	60a5      	str	r5, [r4, #8]
 8004e8a:	6065      	str	r5, [r4, #4]
 8004e8c:	6125      	str	r5, [r4, #16]
 8004e8e:	6165      	str	r5, [r4, #20]
 8004e90:	61a5      	str	r5, [r4, #24]
 8004e92:	2208      	movs	r2, #8
 8004e94:	4629      	mov	r1, r5
 8004e96:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e9a:	f7ff fcc0 	bl	800481e <memset>
 8004e9e:	6365      	str	r5, [r4, #52]	; 0x34
 8004ea0:	63a5      	str	r5, [r4, #56]	; 0x38
 8004ea2:	64a5      	str	r5, [r4, #72]	; 0x48
 8004ea4:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004ea6:	e7e6      	b.n	8004e76 <__sfp+0x42>
 8004ea8:	08005954 	.word	0x08005954

08004eac <_fwalk_reent>:
 8004eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004eb0:	4680      	mov	r8, r0
 8004eb2:	4689      	mov	r9, r1
 8004eb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004eb8:	2600      	movs	r6, #0
 8004eba:	b914      	cbnz	r4, 8004ec2 <_fwalk_reent+0x16>
 8004ebc:	4630      	mov	r0, r6
 8004ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ec2:	68a5      	ldr	r5, [r4, #8]
 8004ec4:	6867      	ldr	r7, [r4, #4]
 8004ec6:	3f01      	subs	r7, #1
 8004ec8:	d501      	bpl.n	8004ece <_fwalk_reent+0x22>
 8004eca:	6824      	ldr	r4, [r4, #0]
 8004ecc:	e7f5      	b.n	8004eba <_fwalk_reent+0xe>
 8004ece:	89ab      	ldrh	r3, [r5, #12]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d907      	bls.n	8004ee4 <_fwalk_reent+0x38>
 8004ed4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	d003      	beq.n	8004ee4 <_fwalk_reent+0x38>
 8004edc:	4629      	mov	r1, r5
 8004ede:	4640      	mov	r0, r8
 8004ee0:	47c8      	blx	r9
 8004ee2:	4306      	orrs	r6, r0
 8004ee4:	3568      	adds	r5, #104	; 0x68
 8004ee6:	e7ee      	b.n	8004ec6 <_fwalk_reent+0x1a>

08004ee8 <__swhatbuf_r>:
 8004ee8:	b570      	push	{r4, r5, r6, lr}
 8004eea:	460e      	mov	r6, r1
 8004eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ef0:	2900      	cmp	r1, #0
 8004ef2:	b090      	sub	sp, #64	; 0x40
 8004ef4:	4614      	mov	r4, r2
 8004ef6:	461d      	mov	r5, r3
 8004ef8:	da07      	bge.n	8004f0a <__swhatbuf_r+0x22>
 8004efa:	2300      	movs	r3, #0
 8004efc:	602b      	str	r3, [r5, #0]
 8004efe:	89b3      	ldrh	r3, [r6, #12]
 8004f00:	061a      	lsls	r2, r3, #24
 8004f02:	d410      	bmi.n	8004f26 <__swhatbuf_r+0x3e>
 8004f04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f08:	e00e      	b.n	8004f28 <__swhatbuf_r+0x40>
 8004f0a:	aa01      	add	r2, sp, #4
 8004f0c:	f000 f8b8 	bl	8005080 <_fstat_r>
 8004f10:	2800      	cmp	r0, #0
 8004f12:	dbf2      	blt.n	8004efa <__swhatbuf_r+0x12>
 8004f14:	9a02      	ldr	r2, [sp, #8]
 8004f16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f1e:	425a      	negs	r2, r3
 8004f20:	415a      	adcs	r2, r3
 8004f22:	602a      	str	r2, [r5, #0]
 8004f24:	e7ee      	b.n	8004f04 <__swhatbuf_r+0x1c>
 8004f26:	2340      	movs	r3, #64	; 0x40
 8004f28:	2000      	movs	r0, #0
 8004f2a:	6023      	str	r3, [r4, #0]
 8004f2c:	b010      	add	sp, #64	; 0x40
 8004f2e:	bd70      	pop	{r4, r5, r6, pc}

08004f30 <__smakebuf_r>:
 8004f30:	898b      	ldrh	r3, [r1, #12]
 8004f32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f34:	079d      	lsls	r5, r3, #30
 8004f36:	4606      	mov	r6, r0
 8004f38:	460c      	mov	r4, r1
 8004f3a:	d507      	bpl.n	8004f4c <__smakebuf_r+0x1c>
 8004f3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f40:	6023      	str	r3, [r4, #0]
 8004f42:	6123      	str	r3, [r4, #16]
 8004f44:	2301      	movs	r3, #1
 8004f46:	6163      	str	r3, [r4, #20]
 8004f48:	b002      	add	sp, #8
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}
 8004f4c:	ab01      	add	r3, sp, #4
 8004f4e:	466a      	mov	r2, sp
 8004f50:	f7ff ffca 	bl	8004ee8 <__swhatbuf_r>
 8004f54:	9900      	ldr	r1, [sp, #0]
 8004f56:	4605      	mov	r5, r0
 8004f58:	4630      	mov	r0, r6
 8004f5a:	f7ff fcb7 	bl	80048cc <_malloc_r>
 8004f5e:	b948      	cbnz	r0, 8004f74 <__smakebuf_r+0x44>
 8004f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f64:	059a      	lsls	r2, r3, #22
 8004f66:	d4ef      	bmi.n	8004f48 <__smakebuf_r+0x18>
 8004f68:	f023 0303 	bic.w	r3, r3, #3
 8004f6c:	f043 0302 	orr.w	r3, r3, #2
 8004f70:	81a3      	strh	r3, [r4, #12]
 8004f72:	e7e3      	b.n	8004f3c <__smakebuf_r+0xc>
 8004f74:	4b0d      	ldr	r3, [pc, #52]	; (8004fac <__smakebuf_r+0x7c>)
 8004f76:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f78:	89a3      	ldrh	r3, [r4, #12]
 8004f7a:	6020      	str	r0, [r4, #0]
 8004f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f80:	81a3      	strh	r3, [r4, #12]
 8004f82:	9b00      	ldr	r3, [sp, #0]
 8004f84:	6163      	str	r3, [r4, #20]
 8004f86:	9b01      	ldr	r3, [sp, #4]
 8004f88:	6120      	str	r0, [r4, #16]
 8004f8a:	b15b      	cbz	r3, 8004fa4 <__smakebuf_r+0x74>
 8004f8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f90:	4630      	mov	r0, r6
 8004f92:	f000 f887 	bl	80050a4 <_isatty_r>
 8004f96:	b128      	cbz	r0, 8004fa4 <__smakebuf_r+0x74>
 8004f98:	89a3      	ldrh	r3, [r4, #12]
 8004f9a:	f023 0303 	bic.w	r3, r3, #3
 8004f9e:	f043 0301 	orr.w	r3, r3, #1
 8004fa2:	81a3      	strh	r3, [r4, #12]
 8004fa4:	89a3      	ldrh	r3, [r4, #12]
 8004fa6:	431d      	orrs	r5, r3
 8004fa8:	81a5      	strh	r5, [r4, #12]
 8004faa:	e7cd      	b.n	8004f48 <__smakebuf_r+0x18>
 8004fac:	08004d55 	.word	0x08004d55

08004fb0 <__malloc_lock>:
 8004fb0:	4770      	bx	lr

08004fb2 <__malloc_unlock>:
 8004fb2:	4770      	bx	lr

08004fb4 <__sread>:
 8004fb4:	b510      	push	{r4, lr}
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fbc:	f000 f894 	bl	80050e8 <_read_r>
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	bfab      	itete	ge
 8004fc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004fc6:	89a3      	ldrhlt	r3, [r4, #12]
 8004fc8:	181b      	addge	r3, r3, r0
 8004fca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004fce:	bfac      	ite	ge
 8004fd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004fd2:	81a3      	strhlt	r3, [r4, #12]
 8004fd4:	bd10      	pop	{r4, pc}

08004fd6 <__swrite>:
 8004fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fda:	461f      	mov	r7, r3
 8004fdc:	898b      	ldrh	r3, [r1, #12]
 8004fde:	05db      	lsls	r3, r3, #23
 8004fe0:	4605      	mov	r5, r0
 8004fe2:	460c      	mov	r4, r1
 8004fe4:	4616      	mov	r6, r2
 8004fe6:	d505      	bpl.n	8004ff4 <__swrite+0x1e>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	2200      	movs	r2, #0
 8004fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ff0:	f000 f868 	bl	80050c4 <_lseek_r>
 8004ff4:	89a3      	ldrh	r3, [r4, #12]
 8004ff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ffa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ffe:	81a3      	strh	r3, [r4, #12]
 8005000:	4632      	mov	r2, r6
 8005002:	463b      	mov	r3, r7
 8005004:	4628      	mov	r0, r5
 8005006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800500a:	f000 b817 	b.w	800503c <_write_r>

0800500e <__sseek>:
 800500e:	b510      	push	{r4, lr}
 8005010:	460c      	mov	r4, r1
 8005012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005016:	f000 f855 	bl	80050c4 <_lseek_r>
 800501a:	1c43      	adds	r3, r0, #1
 800501c:	89a3      	ldrh	r3, [r4, #12]
 800501e:	bf15      	itete	ne
 8005020:	6560      	strne	r0, [r4, #84]	; 0x54
 8005022:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005026:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800502a:	81a3      	strheq	r3, [r4, #12]
 800502c:	bf18      	it	ne
 800502e:	81a3      	strhne	r3, [r4, #12]
 8005030:	bd10      	pop	{r4, pc}

08005032 <__sclose>:
 8005032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005036:	f000 b813 	b.w	8005060 <_close_r>
	...

0800503c <_write_r>:
 800503c:	b538      	push	{r3, r4, r5, lr}
 800503e:	4c07      	ldr	r4, [pc, #28]	; (800505c <_write_r+0x20>)
 8005040:	4605      	mov	r5, r0
 8005042:	4608      	mov	r0, r1
 8005044:	4611      	mov	r1, r2
 8005046:	2200      	movs	r2, #0
 8005048:	6022      	str	r2, [r4, #0]
 800504a:	461a      	mov	r2, r3
 800504c:	f7ff f8a4 	bl	8004198 <_write>
 8005050:	1c43      	adds	r3, r0, #1
 8005052:	d102      	bne.n	800505a <_write_r+0x1e>
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	b103      	cbz	r3, 800505a <_write_r+0x1e>
 8005058:	602b      	str	r3, [r5, #0]
 800505a:	bd38      	pop	{r3, r4, r5, pc}
 800505c:	200066f0 	.word	0x200066f0

08005060 <_close_r>:
 8005060:	b538      	push	{r3, r4, r5, lr}
 8005062:	4c06      	ldr	r4, [pc, #24]	; (800507c <_close_r+0x1c>)
 8005064:	2300      	movs	r3, #0
 8005066:	4605      	mov	r5, r0
 8005068:	4608      	mov	r0, r1
 800506a:	6023      	str	r3, [r4, #0]
 800506c:	f7ff f8d2 	bl	8004214 <_close>
 8005070:	1c43      	adds	r3, r0, #1
 8005072:	d102      	bne.n	800507a <_close_r+0x1a>
 8005074:	6823      	ldr	r3, [r4, #0]
 8005076:	b103      	cbz	r3, 800507a <_close_r+0x1a>
 8005078:	602b      	str	r3, [r5, #0]
 800507a:	bd38      	pop	{r3, r4, r5, pc}
 800507c:	200066f0 	.word	0x200066f0

08005080 <_fstat_r>:
 8005080:	b538      	push	{r3, r4, r5, lr}
 8005082:	4c07      	ldr	r4, [pc, #28]	; (80050a0 <_fstat_r+0x20>)
 8005084:	2300      	movs	r3, #0
 8005086:	4605      	mov	r5, r0
 8005088:	4608      	mov	r0, r1
 800508a:	4611      	mov	r1, r2
 800508c:	6023      	str	r3, [r4, #0]
 800508e:	f7ff f8d3 	bl	8004238 <_fstat>
 8005092:	1c43      	adds	r3, r0, #1
 8005094:	d102      	bne.n	800509c <_fstat_r+0x1c>
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	b103      	cbz	r3, 800509c <_fstat_r+0x1c>
 800509a:	602b      	str	r3, [r5, #0]
 800509c:	bd38      	pop	{r3, r4, r5, pc}
 800509e:	bf00      	nop
 80050a0:	200066f0 	.word	0x200066f0

080050a4 <_isatty_r>:
 80050a4:	b538      	push	{r3, r4, r5, lr}
 80050a6:	4c06      	ldr	r4, [pc, #24]	; (80050c0 <_isatty_r+0x1c>)
 80050a8:	2300      	movs	r3, #0
 80050aa:	4605      	mov	r5, r0
 80050ac:	4608      	mov	r0, r1
 80050ae:	6023      	str	r3, [r4, #0]
 80050b0:	f7ff f8d4 	bl	800425c <_isatty>
 80050b4:	1c43      	adds	r3, r0, #1
 80050b6:	d102      	bne.n	80050be <_isatty_r+0x1a>
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	b103      	cbz	r3, 80050be <_isatty_r+0x1a>
 80050bc:	602b      	str	r3, [r5, #0]
 80050be:	bd38      	pop	{r3, r4, r5, pc}
 80050c0:	200066f0 	.word	0x200066f0

080050c4 <_lseek_r>:
 80050c4:	b538      	push	{r3, r4, r5, lr}
 80050c6:	4c07      	ldr	r4, [pc, #28]	; (80050e4 <_lseek_r+0x20>)
 80050c8:	4605      	mov	r5, r0
 80050ca:	4608      	mov	r0, r1
 80050cc:	4611      	mov	r1, r2
 80050ce:	2200      	movs	r2, #0
 80050d0:	6022      	str	r2, [r4, #0]
 80050d2:	461a      	mov	r2, r3
 80050d4:	f7ff f8d2 	bl	800427c <_lseek>
 80050d8:	1c43      	adds	r3, r0, #1
 80050da:	d102      	bne.n	80050e2 <_lseek_r+0x1e>
 80050dc:	6823      	ldr	r3, [r4, #0]
 80050de:	b103      	cbz	r3, 80050e2 <_lseek_r+0x1e>
 80050e0:	602b      	str	r3, [r5, #0]
 80050e2:	bd38      	pop	{r3, r4, r5, pc}
 80050e4:	200066f0 	.word	0x200066f0

080050e8 <_read_r>:
 80050e8:	b538      	push	{r3, r4, r5, lr}
 80050ea:	4c07      	ldr	r4, [pc, #28]	; (8005108 <_read_r+0x20>)
 80050ec:	4605      	mov	r5, r0
 80050ee:	4608      	mov	r0, r1
 80050f0:	4611      	mov	r1, r2
 80050f2:	2200      	movs	r2, #0
 80050f4:	6022      	str	r2, [r4, #0]
 80050f6:	461a      	mov	r2, r3
 80050f8:	f7ff f8d4 	bl	80042a4 <_read>
 80050fc:	1c43      	adds	r3, r0, #1
 80050fe:	d102      	bne.n	8005106 <_read_r+0x1e>
 8005100:	6823      	ldr	r3, [r4, #0]
 8005102:	b103      	cbz	r3, 8005106 <_read_r+0x1e>
 8005104:	602b      	str	r3, [r5, #0]
 8005106:	bd38      	pop	{r3, r4, r5, pc}
 8005108:	200066f0 	.word	0x200066f0
 800510c:	454c4449 	.word	0x454c4449
 8005110:	00000000 	.word	0x00000000
 8005114:	20726d54 	.word	0x20726d54
 8005118:	00637653 	.word	0x00637653
 800511c:	51726d54 	.word	0x51726d54
 8005120:	00000000 	.word	0x00000000
 8005124:	2a2a0a0a 	.word	0x2a2a0a0a
 8005128:	2a2a2a2a 	.word	0x2a2a2a2a
 800512c:	2a2a2a2a 	.word	0x2a2a2a2a
 8005130:	2a2a2a2a 	.word	0x2a2a2a2a
 8005134:	2a2a2a2a 	.word	0x2a2a2a2a
 8005138:	20202a2a 	.word	0x20202a2a
 800513c:	72617453 	.word	0x72617453
 8005140:	676e6974 	.word	0x676e6974
 8005144:	68635320 	.word	0x68635320
 8005148:	6c756465 	.word	0x6c756465
 800514c:	20207265 	.word	0x20207265
 8005150:	2a2a2a2a 	.word	0x2a2a2a2a
 8005154:	2a2a2a2a 	.word	0x2a2a2a2a
 8005158:	2a2a2a2a 	.word	0x2a2a2a2a
 800515c:	2a2a2a2a 	.word	0x2a2a2a2a
 8005160:	0000000a 	.word	0x0000000a
 8005164:	4f525245 	.word	0x4f525245
 8005168:	52203a52 	.word	0x52203a52
 800516c:	65757165 	.word	0x65757165
 8005170:	74207473 	.word	0x74207473
 8005174:	7263206f 	.word	0x7263206f
 8005178:	65746165 	.word	0x65746165
 800517c:	73617420 	.word	0x73617420
 8005180:	6977206b 	.word	0x6977206b
 8005184:	6e206874 	.word	0x6e206874
 8005188:	206c6c75 	.word	0x206c6c75
 800518c:	6e696f70 	.word	0x6e696f70
 8005190:	20726574 	.word	0x20726574
 8005194:	74206f74 	.word	0x74206f74
 8005198:	206b7361 	.word	0x206b7361
 800519c:	646e6168 	.word	0x646e6168
 80051a0:	0000656c 	.word	0x0000656c
 80051a4:	207c0a0a 	.word	0x207c0a0a
 80051a8:	6b736154 	.word	0x6b736154
 80051ac:	73255b20 	.word	0x73255b20
 80051b0:	6552205d 	.word	0x6552205d
 80051b4:	7361656c 	.word	0x7361656c
 80051b8:	7c206465 	.word	0x7c206465
 80051bc:	72756320 	.word	0x72756320
 80051c0:	746e6572 	.word	0x746e6572
 80051c4:	6d695420 	.word	0x6d695420
 80051c8:	305b2065 	.word	0x305b2065
 80051cc:	207c205d 	.word	0x207c205d
 80051d0:	00000a0a 	.word	0x00000a0a
 80051d4:	7361540a 	.word	0x7361540a
 80051d8:	255b206b 	.word	0x255b206b
 80051dc:	20205d73 	.word	0x20205d73
 80051e0:	62616e55 	.word	0x62616e55
 80051e4:	7420656c 	.word	0x7420656c
 80051e8:	6552206f 	.word	0x6552206f
 80051ec:	7361656c 	.word	0x7361656c
 80051f0:	200a2065 	.word	0x200a2065
 80051f4:	62616e75 	.word	0x62616e75
 80051f8:	7420656c 	.word	0x7420656c
 80051fc:	6573206f 	.word	0x6573206f
 8005200:	4e20646e 	.word	0x4e20646e
 8005204:	54207765 	.word	0x54207765
 8005208:	206b7361 	.word	0x206b7361
 800520c:	7373654d 	.word	0x7373654d
 8005210:	20656761 	.word	0x20656761
 8005214:	746e6573 	.word	0x746e6573
 8005218:	206f7420 	.word	0x206f7420
 800521c:	20534444 	.word	0x20534444
 8005220:	75657551 	.word	0x75657551
 8005224:	000a2065 	.word	0x000a2065
 8005228:	547c0a0a 	.word	0x547c0a0a
 800522c:	206b7361 	.word	0x206b7361
 8005230:	5d73255b 	.word	0x5d73255b
 8005234:	6d6f4320 	.word	0x6d6f4320
 8005238:	74656c70 	.word	0x74656c70
 800523c:	7c206465 	.word	0x7c206465
 8005240:	72756320 	.word	0x72756320
 8005244:	746e6572 	.word	0x746e6572
 8005248:	6d695420 	.word	0x6d695420
 800524c:	255b2065 	.word	0x255b2065
 8005250:	7c205d75 	.word	0x7c205d75
 8005254:	00000a0a 	.word	0x00000a0a
 8005258:	52524520 	.word	0x52524520
 800525c:	5720524f 	.word	0x5720524f
 8005260:	656c6968 	.word	0x656c6968
 8005264:	6e655320 	.word	0x6e655320
 8005268:	676e6964 	.word	0x676e6964
 800526c:	6c654420 	.word	0x6c654420
 8005270:	20657465 	.word	0x20657465
 8005274:	2067734d 	.word	0x2067734d
 8005278:	44206f74 	.word	0x44206f74
 800527c:	51205344 	.word	0x51205344
 8005280:	65756575 	.word	0x65756575
 8005284:	5320203a 	.word	0x5320203a
 8005288:	44206565 	.word	0x44206565
 800528c:	632e5344 	.word	0x632e5344
 8005290:	694c202c 	.word	0x694c202c
 8005294:	3120656e 	.word	0x3120656e
 8005298:	00203237 	.word	0x00203237
 800529c:	2e2e0a0a 	.word	0x2e2e0a0a
 80052a0:	2e2e2e2e 	.word	0x2e2e2e2e
 80052a4:	2e2e2e2e 	.word	0x2e2e2e2e
 80052a8:	492e2e2e 	.word	0x492e2e2e
 80052ac:	6974696e 	.word	0x6974696e
 80052b0:	7a696c61 	.word	0x7a696c61
 80052b4:	20676e69 	.word	0x20676e69
 80052b8:	6b736154 	.word	0x6b736154
 80052bc:	73696c20 	.word	0x73696c20
 80052c0:	2e2e7374 	.word	0x2e2e7374
 80052c4:	2e2e2e2e 	.word	0x2e2e2e2e
 80052c8:	2e2e2e2e 	.word	0x2e2e2e2e
 80052cc:	0a3a2e2e 	.word	0x0a3a2e2e
 80052d0:	00000000 	.word	0x00000000
 80052d4:	20534444 	.word	0x20534444
 80052d8:	75657551 	.word	0x75657551
 80052dc:	00000065 	.word	0x00000065
 80052e0:	696e6f4d 	.word	0x696e6f4d
 80052e4:	20726f74 	.word	0x20726f74
 80052e8:	75657551 	.word	0x75657551
 80052ec:	00000065 	.word	0x00000065
 80052f0:	20534444 	.word	0x20534444
 80052f4:	6b736154 	.word	0x6b736154
 80052f8:	00000000 	.word	0x00000000
 80052fc:	696e6f4d 	.word	0x696e6f4d
 8005300:	20726f74 	.word	0x20726f74
 8005304:	6b736154 	.word	0x6b736154
 8005308:	00000000 	.word	0x00000000
 800530c:	2a2a0a0a 	.word	0x2a2a0a0a
 8005310:	2a2a2a2a 	.word	0x2a2a2a2a
 8005314:	2a2a2a2a 	.word	0x2a2a2a2a
 8005318:	2a2a2a2a 	.word	0x2a2a2a2a
 800531c:	2a2a2a2a 	.word	0x2a2a2a2a
 8005320:	2a2a2a2a 	.word	0x2a2a2a2a
 8005324:	2a2a2a2a 	.word	0x2a2a2a2a
 8005328:	2a2a2a2a 	.word	0x2a2a2a2a
 800532c:	2a2a2a2a 	.word	0x2a2a2a2a
 8005330:	2a2a2a2a 	.word	0x2a2a2a2a
 8005334:	2a2a2a2a 	.word	0x2a2a2a2a
 8005338:	2a2a2a2a 	.word	0x2a2a2a2a
 800533c:	2a2a2a2a 	.word	0x2a2a2a2a
 8005340:	2a2a2a2a 	.word	0x2a2a2a2a
 8005344:	2a2a2a2a 	.word	0x2a2a2a2a
 8005348:	2a2a2a2a 	.word	0x2a2a2a2a
 800534c:	2a2a2a2a 	.word	0x2a2a2a2a
 8005350:	2a2a2a2a 	.word	0x2a2a2a2a
 8005354:	2a2a2a2a 	.word	0x2a2a2a2a
 8005358:	0a2a2a2a 	.word	0x0a2a2a2a
 800535c:	00000000 	.word	0x00000000
 8005360:	2e0a0a0a 	.word	0x2e0a0a0a
 8005364:	2e2e2e2e 	.word	0x2e2e2e2e
 8005368:	2e2e2e2e 	.word	0x2e2e2e2e
 800536c:	2e2e2e2e 	.word	0x2e2e2e2e
 8005370:	2e2e2e2e 	.word	0x2e2e2e2e
 8005374:	2e2e2e2e 	.word	0x2e2e2e2e
 8005378:	2e2e2e2e 	.word	0x2e2e2e2e
 800537c:	2e2e2e2e 	.word	0x2e2e2e2e
 8005380:	2e2e2e2e 	.word	0x2e2e2e2e
 8005384:	2e2e2e2e 	.word	0x2e2e2e2e
 8005388:	2e2e2e2e 	.word	0x2e2e2e2e
 800538c:	2e2e2e2e 	.word	0x2e2e2e2e
 8005390:	2e2e2e2e 	.word	0x2e2e2e2e
 8005394:	2e2e2e2e 	.word	0x2e2e2e2e
 8005398:	2e2e2e2e 	.word	0x2e2e2e2e
 800539c:	2e2e2e2e 	.word	0x2e2e2e2e
 80053a0:	2e2e2e2e 	.word	0x2e2e2e2e
 80053a4:	2e2e2e2e 	.word	0x2e2e2e2e
 80053a8:	2e2e2e2e 	.word	0x2e2e2e2e
 80053ac:	2e2e2e2e 	.word	0x2e2e2e2e
 80053b0:	0000003a 	.word	0x0000003a
 80053b4:	4d200a0a 	.word	0x4d200a0a
 80053b8:	54494e4f 	.word	0x54494e4f
 80053bc:	4e49524f 	.word	0x4e49524f
 80053c0:	41542047 	.word	0x41542047
 80053c4:	0a3a4b53 	.word	0x0a3a4b53
 80053c8:	72754320 	.word	0x72754320
 80053cc:	746e6572 	.word	0x746e6572
 80053d0:	6d695420 	.word	0x6d695420
 80053d4:	5b203a65 	.word	0x5b203a65
 80053d8:	0a5d7525 	.word	0x0a5d7525
 80053dc:	69725020 	.word	0x69725020
 80053e0:	7469726f 	.word	0x7469726f
 80053e4:	654c2079 	.word	0x654c2079
 80053e8:	3a6c6576 	.word	0x3a6c6576
 80053ec:	75255b20 	.word	0x75255b20
 80053f0:	0a0a205d 	.word	0x0a0a205d
 80053f4:	00000000 	.word	0x00000000
 80053f8:	206f4e0a 	.word	0x206f4e0a
 80053fc:	6b736154 	.word	0x6b736154
 8005400:	206e4920 	.word	0x206e4920
 8005404:	7473696c 	.word	0x7473696c
 8005408:	00000021 	.word	0x00000021
 800540c:	7361540a 	.word	0x7361540a
 8005410:	5b203a6b 	.word	0x5b203a6b
 8005414:	2c5d7325 	.word	0x2c5d7325
 8005418:	61654420 	.word	0x61654420
 800541c:	6e696c64 	.word	0x6e696c64
 8005420:	5b203a65 	.word	0x5b203a65
 8005424:	205d7525 	.word	0x205d7525
 8005428:	0000000a 	.word	0x0000000a
 800542c:	5252450a 	.word	0x5252450a
 8005430:	553a524f 	.word	0x553a524f
 8005434:	6c62616e 	.word	0x6c62616e
 8005438:	6f742065 	.word	0x6f742065
 800543c:	6e657320 	.word	0x6e657320
 8005440:	43412064 	.word	0x43412064
 8005444:	45564954 	.word	0x45564954
 8005448:	53494c20 	.word	0x53494c20
 800544c:	656d2054 	.word	0x656d2054
 8005450:	67617373 	.word	0x67617373
 8005454:	6f742065 	.word	0x6f742065
 8005458:	53444420 	.word	0x53444420
 800545c:	67734d20 	.word	0x67734d20
 8005460:	65755120 	.word	0x65755120
 8005464:	00216575 	.word	0x00216575
 8005468:	4f525245 	.word	0x4f525245
 800546c:	44203a52 	.word	0x44203a52
 8005470:	63535f44 	.word	0x63535f44
 8005474:	75646568 	.word	0x75646568
 8005478:	5f72656c 	.word	0x5f72656c
 800547c:	7373654d 	.word	0x7373654d
 8005480:	5f656761 	.word	0x5f656761
 8005484:	75657551 	.word	0x75657551
 8005488:	73692065 	.word	0x73692065
 800548c:	4c554e20 	.word	0x4c554e20
 8005490:	00002e4c 	.word	0x00002e4c
 8005494:	2e2e0a0a 	.word	0x2e2e0a0a
 8005498:	2e2e2e2e 	.word	0x2e2e2e2e
 800549c:	2e2e2e2e 	.word	0x2e2e2e2e
 80054a0:	2e2e2e2e 	.word	0x2e2e2e2e
 80054a4:	43412e2e 	.word	0x43412e2e
 80054a8:	45564954 	.word	0x45564954
 80054ac:	53415420 	.word	0x53415420
 80054b0:	2e20534b 	.word	0x2e20534b
 80054b4:	2e2e2e2e 	.word	0x2e2e2e2e
 80054b8:	2e2e2e2e 	.word	0x2e2e2e2e
 80054bc:	2e2e2e2e 	.word	0x2e2e2e2e
 80054c0:	2e2e2e2e 	.word	0x2e2e2e2e
 80054c4:	203a2e2e 	.word	0x203a2e2e
 80054c8:	0000000a 	.word	0x0000000a
 80054cc:	2e2e0a0a 	.word	0x2e2e0a0a
 80054d0:	2e2e2e2e 	.word	0x2e2e2e2e
 80054d4:	2e2e2e2e 	.word	0x2e2e2e2e
 80054d8:	2e2e2e2e 	.word	0x2e2e2e2e
 80054dc:	2e2e2e2e 	.word	0x2e2e2e2e
 80054e0:	2e2e2e2e 	.word	0x2e2e2e2e
 80054e4:	2e2e2e2e 	.word	0x2e2e2e2e
 80054e8:	2e2e2e2e 	.word	0x2e2e2e2e
 80054ec:	2e2e2e2e 	.word	0x2e2e2e2e
 80054f0:	2e2e2e2e 	.word	0x2e2e2e2e
 80054f4:	2e2e2e2e 	.word	0x2e2e2e2e
 80054f8:	2e2e2e2e 	.word	0x2e2e2e2e
 80054fc:	0a2e2e2e 	.word	0x0a2e2e2e
 8005500:	00000000 	.word	0x00000000
 8005504:	4f525245 	.word	0x4f525245
 8005508:	44203a52 	.word	0x44203a52
 800550c:	6f4d5f44 	.word	0x6f4d5f44
 8005510:	6f74696e 	.word	0x6f74696e
 8005514:	654d5f72 	.word	0x654d5f72
 8005518:	67617373 	.word	0x67617373
 800551c:	75515f65 	.word	0x75515f65
 8005520:	20657565 	.word	0x20657565
 8005524:	4e207369 	.word	0x4e207369
 8005528:	2e4c4c55 	.word	0x2e4c4c55
 800552c:	00000000 	.word	0x00000000
 8005530:	5252450a 	.word	0x5252450a
 8005534:	553a524f 	.word	0x553a524f
 8005538:	6c62616e 	.word	0x6c62616e
 800553c:	6f742065 	.word	0x6f742065
 8005540:	6e657320 	.word	0x6e657320
 8005544:	4f432064 	.word	0x4f432064
 8005548:	454c504d 	.word	0x454c504d
 800554c:	20444554 	.word	0x20444554
 8005550:	5453494c 	.word	0x5453494c
 8005554:	73656d20 	.word	0x73656d20
 8005558:	65676173 	.word	0x65676173
 800555c:	206f7420 	.word	0x206f7420
 8005560:	20534444 	.word	0x20534444
 8005564:	2067734d 	.word	0x2067734d
 8005568:	75657551 	.word	0x75657551
 800556c:	00002165 	.word	0x00002165
 8005570:	2e2e0a0a 	.word	0x2e2e0a0a
 8005574:	2e2e2e2e 	.word	0x2e2e2e2e
 8005578:	2e2e2e2e 	.word	0x2e2e2e2e
 800557c:	2e2e2e2e 	.word	0x2e2e2e2e
 8005580:	4f432e2e 	.word	0x4f432e2e
 8005584:	454c504d 	.word	0x454c504d
 8005588:	20444554 	.word	0x20444554
 800558c:	4b534154 	.word	0x4b534154
 8005590:	2e203a53 	.word	0x2e203a53
 8005594:	2e2e2e2e 	.word	0x2e2e2e2e
 8005598:	2e2e2e2e 	.word	0x2e2e2e2e
 800559c:	2e2e2e2e 	.word	0x2e2e2e2e
 80055a0:	2e2e2e2e 	.word	0x2e2e2e2e
 80055a4:	000a203a 	.word	0x000a203a
 80055a8:	2e2e0a0a 	.word	0x2e2e0a0a
 80055ac:	2e2e2e2e 	.word	0x2e2e2e2e
 80055b0:	2e2e2e2e 	.word	0x2e2e2e2e
 80055b4:	2e2e2e2e 	.word	0x2e2e2e2e
 80055b8:	2e2e2e2e 	.word	0x2e2e2e2e
 80055bc:	2e2e2e2e 	.word	0x2e2e2e2e
 80055c0:	2e2e2e2e 	.word	0x2e2e2e2e
 80055c4:	2e2e2e2e 	.word	0x2e2e2e2e
 80055c8:	2e2e2e2e 	.word	0x2e2e2e2e
 80055cc:	2e2e2e2e 	.word	0x2e2e2e2e
 80055d0:	2e2e2e2e 	.word	0x2e2e2e2e
 80055d4:	2e2e2e2e 	.word	0x2e2e2e2e
 80055d8:	2e2e2e2e 	.word	0x2e2e2e2e
 80055dc:	00000a2e 	.word	0x00000a2e
 80055e0:	5252450a 	.word	0x5252450a
 80055e4:	553a524f 	.word	0x553a524f
 80055e8:	6c62616e 	.word	0x6c62616e
 80055ec:	6f742065 	.word	0x6f742065
 80055f0:	6e657320 	.word	0x6e657320
 80055f4:	564f2064 	.word	0x564f2064
 80055f8:	55445245 	.word	0x55445245
 80055fc:	494c2045 	.word	0x494c2045
 8005600:	6d205453 	.word	0x6d205453
 8005604:	61737365 	.word	0x61737365
 8005608:	74206567 	.word	0x74206567
 800560c:	4444206f 	.word	0x4444206f
 8005610:	734d2053 	.word	0x734d2053
 8005614:	75512067 	.word	0x75512067
 8005618:	21657565 	.word	0x21657565
 800561c:	00000000 	.word	0x00000000
 8005620:	2e2e0a0a 	.word	0x2e2e0a0a
 8005624:	2e2e2e2e 	.word	0x2e2e2e2e
 8005628:	2e2e2e2e 	.word	0x2e2e2e2e
 800562c:	2e2e2e2e 	.word	0x2e2e2e2e
 8005630:	564f2e2e 	.word	0x564f2e2e
 8005634:	55445245 	.word	0x55445245
 8005638:	41542045 	.word	0x41542045
 800563c:	20534b53 	.word	0x20534b53
 8005640:	2e2e2e2e 	.word	0x2e2e2e2e
 8005644:	2e2e2e2e 	.word	0x2e2e2e2e
 8005648:	2e2e2e2e 	.word	0x2e2e2e2e
 800564c:	2e2e2e2e 	.word	0x2e2e2e2e
 8005650:	0a203a2e 	.word	0x0a203a2e
 8005654:	00000000 	.word	0x00000000
 8005658:	2e2e0a0a 	.word	0x2e2e0a0a
 800565c:	2e2e2e2e 	.word	0x2e2e2e2e
 8005660:	2e2e2e2e 	.word	0x2e2e2e2e
 8005664:	2e2e2e2e 	.word	0x2e2e2e2e
 8005668:	2e2e2e2e 	.word	0x2e2e2e2e
 800566c:	2e2e2e2e 	.word	0x2e2e2e2e
 8005670:	2e2e2e2e 	.word	0x2e2e2e2e
 8005674:	2e2e2e2e 	.word	0x2e2e2e2e
 8005678:	2e2e2e2e 	.word	0x2e2e2e2e
 800567c:	2e2e2e2e 	.word	0x2e2e2e2e
 8005680:	2e2e2e2e 	.word	0x2e2e2e2e
 8005684:	2e2e2e2e 	.word	0x2e2e2e2e
 8005688:	000a2e2e 	.word	0x000a2e2e
 800568c:	4f525245 	.word	0x4f525245
 8005690:	44442852 	.word	0x44442852
 8005694:	7361545f 	.word	0x7361545f
 8005698:	72465f6b 	.word	0x72465f6b
 800569c:	3a296565 	.word	0x3a296565
 80056a0:	656e6f20 	.word	0x656e6f20
 80056a4:	20666f20 	.word	0x20666f20
 80056a8:	20656874 	.word	0x20656874
 80056ac:	72316170 	.word	0x72316170
 80056b0:	74656d61 	.word	0x74656d61
 80056b4:	20737265 	.word	0x20737265
 80056b8:	73736170 	.word	0x73736170
 80056bc:	77206465 	.word	0x77206465
 80056c0:	4e207361 	.word	0x4e207361
 80056c4:	2e4c4c55 	.word	0x2e4c4c55
 80056c8:	00000000 	.word	0x00000000
 80056cc:	4f525245 	.word	0x4f525245
 80056d0:	44442852 	.word	0x44442852
 80056d4:	7361545f 	.word	0x7361545f
 80056d8:	72465f6b 	.word	0x72465f6b
 80056dc:	3a296565 	.word	0x3a296565
 80056e0:	726f4620 	.word	0x726f4620
 80056e4:	20746f67 	.word	0x20746f67
 80056e8:	72206f74 	.word	0x72206f74
 80056ec:	766f6d65 	.word	0x766f6d65
 80056f0:	61742065 	.word	0x61742065
 80056f4:	66206b73 	.word	0x66206b73
 80056f8:	206d6f72 	.word	0x206d6f72
 80056fc:	7473696c 	.word	0x7473696c
 8005700:	6f6e202c 	.word	0x6f6e202c
 8005704:	65642074 	.word	0x65642074
 8005708:	6974656c 	.word	0x6974656c
 800570c:	6920676e 	.word	0x6920676e
 8005710:	46202e74 	.word	0x46202e74
 8005714:	74207869 	.word	0x74207869
 8005718:	63206568 	.word	0x63206568
 800571c:	2e65646f 	.word	0x2e65646f
	...
 8005728:	4f525245 	.word	0x4f525245
 800572c:	4e202152 	.word	0x4e202152
 8005730:	204c4c55 	.word	0x204c4c55
 8005734:	6b736154 	.word	0x6b736154
 8005738:	73694c20 	.word	0x73694c20
 800573c:	55202e74 	.word	0x55202e74
 8005740:	6c62616e 	.word	0x6c62616e
 8005744:	6f742065 	.word	0x6f742065
 8005748:	736e6920 	.word	0x736e6920
 800574c:	746e6174 	.word	0x746e6174
 8005750:	65746169 	.word	0x65746169
 8005754:	6e696c20 	.word	0x6e696c20
 8005758:	2064656b 	.word	0x2064656b
 800575c:	7473696c 	.word	0x7473696c
 8005760:	00000021 	.word	0x00000021
 8005764:	6f727265 	.word	0x6f727265
 8005768:	2e2e2e72 	.word	0x2e2e2e72
 800576c:	74744120 	.word	0x74744120
 8005770:	74706d65 	.word	0x74706d65
 8005774:	20676e69 	.word	0x20676e69
 8005778:	6d206f74 	.word	0x6d206f74
 800577c:	74617475 	.word	0x74617475
 8005780:	61762065 	.word	0x61762065
 8005784:	7365756c 	.word	0x7365756c
 8005788:	6f726620 	.word	0x6f726620
 800578c:	2061206d 	.word	0x2061206d
 8005790:	6c6c756e 	.word	0x6c6c756e
 8005794:	6e694c20 	.word	0x6e694c20
 8005798:	2064656b 	.word	0x2064656b
 800579c:	7473696c 	.word	0x7473696c
 80057a0:	00000000 	.word	0x00000000
 80057a4:	62616e55 	.word	0x62616e55
 80057a8:	7420656c 	.word	0x7420656c
 80057ac:	6f6c206f 	.word	0x6f6c206f
 80057b0:	65746163 	.word	0x65746163
 80057b4:	61656820 	.word	0x61656820
 80057b8:	666f2064 	.word	0x666f2064
 80057bc:	73696c20 	.word	0x73696c20
 80057c0:	00000074 	.word	0x00000074
 80057c4:	4f525245 	.word	0x4f525245
 80057c8:	44442852 	.word	0x44442852
 80057cc:	7361545f 	.word	0x7361545f
 80057d0:	73694c6b 	.word	0x73694c6b
 80057d4:	72545f74 	.word	0x72545f74
 80057d8:	66736e61 	.word	0x66736e61
 80057dc:	4f5f7265 	.word	0x4f5f7265
 80057e0:	64726576 	.word	0x64726576
 80057e4:	3a296575 	.word	0x3a296575
 80057e8:	656e6f20 	.word	0x656e6f20
 80057ec:	20666f20 	.word	0x20666f20
 80057f0:	20656874 	.word	0x20656874
 80057f4:	61726170 	.word	0x61726170
 80057f8:	6574656d 	.word	0x6574656d
 80057fc:	70207372 	.word	0x70207372
 8005800:	65737361 	.word	0x65737361
 8005804:	61772064 	.word	0x61772064
 8005808:	554e2073 	.word	0x554e2073
 800580c:	002e4c4c 	.word	0x002e4c4c
 8005810:	4f525245 	.word	0x4f525245
 8005814:	52203a52 	.word	0x52203a52
 8005818:	65757165 	.word	0x65757165
 800581c:	74207473 	.word	0x74207473
 8005820:	7263206f 	.word	0x7263206f
 8005824:	65746165 	.word	0x65746165
 8005828:	73617420 	.word	0x73617420
 800582c:	6977206b 	.word	0x6977206b
 8005830:	6e206874 	.word	0x6e206874
 8005834:	206c6c75 	.word	0x206c6c75
 8005838:	6e696f70 	.word	0x6e696f70
 800583c:	20726574 	.word	0x20726574
 8005840:	74206f74 	.word	0x74206f74
 8005844:	206b7361 	.word	0x206b7361
 8005848:	646e6168 	.word	0x646e6168
 800584c:	0000656c 	.word	0x0000656c
 8005850:	00000000 	.word	0x00000000
 8005854:	78457c0a 	.word	0x78457c0a
 8005858:	74756365 	.word	0x74756365
 800585c:	20676e69 	.word	0x20676e69
 8005860:	6b736154 	.word	0x6b736154
 8005864:	73255b20 	.word	0x73255b20
 8005868:	207c205d 	.word	0x207c205d
 800586c:	656d6954 	.word	0x656d6954
 8005870:	25203d20 	.word	0x25203d20
 8005874:	207c2075 	.word	0x207c2075
 8005878:	6f697250 	.word	0x6f697250
 800587c:	79746972 	.word	0x79746972
 8005880:	25203d20 	.word	0x25203d20
 8005884:	207c2075 	.word	0x207c2075
 8005888:	0000000a 	.word	0x0000000a
 800588c:	6b736154 	.word	0x6b736154
 8005890:	00000031 	.word	0x00000031
 8005894:	6b736154 	.word	0x6b736154
 8005898:	00000032 	.word	0x00000032
 800589c:	6b736154 	.word	0x6b736154
 80058a0:	00000033 	.word	0x00000033
 80058a4:	7361545f 	.word	0x7361545f
 80058a8:	00315f6b 	.word	0x00315f6b
 80058ac:	7361545f 	.word	0x7361545f
 80058b0:	00325f6b 	.word	0x00325f6b
 80058b4:	7361545f 	.word	0x7361545f
 80058b8:	00335f6b 	.word	0x00335f6b
 80058bc:	4c4c414d 	.word	0x4c4c414d
 80058c0:	4620434f 	.word	0x4620434f
 80058c4:	454c4941 	.word	0x454c4941
 80058c8:	49442044 	.word	0x49442044
 80058cc:	49485350 	.word	0x49485350
 80058d0:	00000054 	.word	0x00000054
 80058d4:	54415453 	.word	0x54415453
 80058d8:	53204349 	.word	0x53204349
 80058dc:	4b434154 	.word	0x4b434154
 80058e0:	45564f20 	.word	0x45564f20
 80058e4:	4f4c4652 	.word	0x4f4c4652
 80058e8:	49442057 	.word	0x49442057
 80058ec:	49485350 	.word	0x49485350
 80058f0:	00002154 	.word	0x00002154

080058f4 <__sf_fake_stderr>:
	...

08005914 <__sf_fake_stdin>:
	...

08005934 <__sf_fake_stdout>:
	...

08005954 <_global_impure_ptr>:
 8005954:	2000001c                                ... 

08005958 <_init>:
 8005958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595a:	bf00      	nop
 800595c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800595e:	bc08      	pop	{r3}
 8005960:	469e      	mov	lr, r3
 8005962:	4770      	bx	lr

08005964 <_fini>:
 8005964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005966:	bf00      	nop
 8005968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596a:	bc08      	pop	{r3}
 800596c:	469e      	mov	lr, r3
 800596e:	4770      	bx	lr
